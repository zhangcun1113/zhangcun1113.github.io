<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>shell 脚本监控公司外网ip 并实现邮件报警</title>
      <link href="/2021/11/09/shell-jiao-ben-jian-kong-gong-si-wai-wang-ip-bing-shi-xian-you-jian-bao-jing/"/>
      <url>/2021/11/09/shell-jiao-ben-jian-kong-gong-si-wai-wang-ip-bing-shi-xian-you-jian-bao-jing/</url>
      
        <content type="html"><![CDATA[<pre><code>#!/bin/bashnew_ip=`curl ifconfig.me`    #获取新公网ipold_ip=`cat /root/ip`     #查看旧ipmail_sender=1776803208@qq.com   #发件邮件邮箱</code></pre><p>    mail_user=xxxxx    #接收收邮件邮箱<br>    mail_subject=IP_CHANGED    #邮件主题</p><pre><code>if [ ! $new_ip == $old_ip ]thenecho  $new_ip &gt; /root/ipecho &quot;ip has changed, the new ip is $new_ip !!! &quot;|mail -s &quot;$mail_subject&quot; -S from=$mail_sender &quot;$mail_user&quot;fi                    </code></pre><p>注：需要安装mailx 按脚本新建对应得ip文件 –&gt; /root/ip<br>配置定时任务：<br>*/5 * * * * /root/ip.sh &gt;/dev/null 2&gt;&amp;1</p><p>其他获取新公网ip方法：<br>curl icanhazip.com<br>curl ifconfig.me<br>curl ident.me<br>curl <a href="http://ip.3322.net/">http://ip.3322.net</a><br>curl whatismyip.akamai.com<br>curl <a href="http://members.3322.org/dyndns/getip">http://members.3322.org/dyndns/getip</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 安装发送邮件 heirloom-mailx</title>
      <link href="/2021/11/09/ubuntu-an-zhuang-fa-song-you-jian-heirloom-mailx/"/>
      <url>/2021/11/09/ubuntu-an-zhuang-fa-song-you-jian-heirloom-mailx/</url>
      
        <content type="html"><![CDATA[<p>前言<br>ubuntu使用heirloom-mailx命令发送邮件。遇到一些坑，记录一下安装和配置的过程。    </p><p>安装<br>安装命令：    </p><p>sudo apt install heirloom-mailx<br>我给俩服务器装这个，一个报错：Package has no installation candidate，一个不报错。最后发现报错的服务器的apt-get使用的是163源，不报错的使用的是阿里云源。163的源里面没有包含这个软件包。所以添加这个软件包所在源：    </p><p>sudo vim /etc/apt/sources.list<br>在文件末端加入：    </p><pre><code>deb http://cz.archive.ubuntu.com/ubuntu xenial main universe    </code></pre><p>更新软件包列表：    </p><p>apt-get update<br>重新insatll：    </p><p>sudo apt install heirloom-mailx<br>安装成功。    </p><p>配置<br>网易个人邮箱配置<br>个人邮箱需要在客户端开启smtp功能，允许smtp登录。我这里是网易邮箱，只写了网易邮箱的方法。其它非网易邮箱的smtp如何开启可以自己查一下。    </p><p>126邮箱为例，登录后在上方设置处选择POP3/SMTP/IMAP这个选项    </p><p> 进去之后把这个SMTP服务开启来，我这里已经开启了。这两个开哪个都行，因为反正我需要的是SMTP，这两个都包含。    </p><p> 会让你发个短信，扫码，然后开完之后给你一个密码    </p><p>记下这个密码，这个密码可以用于通过SMTP服务登录邮箱    </p><p>回到服务器上，要在公网发送邮件，需要在安装成功后修改配置文件：    </p><p>sudo vi /etc/s-nail.rc<br>在文件末端加入：    </p><p>set from=”<a href="mailto:&#x78;&#120;&#120;&#120;&#x40;&#49;&#50;&#54;&#46;&#99;&#111;&#x6d;">&#x78;&#120;&#120;&#120;&#x40;&#49;&#50;&#54;&#46;&#99;&#111;&#x6d;</a>“<br>set smtp=”smtp.126.com”<br>set smtp-auth-user=”<a href="mailto:&#x78;&#x78;&#120;&#120;&#64;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;">&#x78;&#x78;&#120;&#120;&#64;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;</a>“<br>set smtp-auth-password=”xxxxx”<br>set smtp-auth=login    </p><p>smtp-auth-user是你的邮箱地址，smtp-auth-password是在网页上开启SMTP服务后获得的那个密码<br>配置完成，保存退出，发邮件测试：<br>echo ‘hello world’ | heirloom-mailx -s “邮件标题” -t <a href="mailto:&#x78;&#120;&#x78;&#x78;&#64;&#49;&#x32;&#54;&#46;&#x63;&#111;&#x6d;">&#x78;&#120;&#x78;&#x78;&#64;&#49;&#x32;&#54;&#46;&#x63;&#111;&#x6d;</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>详解几种Linux 查询外网出口IP命令的方法</title>
      <link href="/2021/11/09/xiang-jie-ji-chong-linux-cha-xun-wai-wang-chu-kou-ip-ming-ling-de-fang-fa/"/>
      <url>/2021/11/09/xiang-jie-ji-chong-linux-cha-xun-wai-wang-chu-kou-ip-ming-ling-de-fang-fa/</url>
      
        <content type="html"><![CDATA[<h6 id="Curl-纯文本格式输出"><a href="#Curl-纯文本格式输出" class="headerlink" title="Curl 纯文本格式输出:"></a>Curl 纯文本格式输出:</h6><p>curl icanhazip.com<br>curl ifconfig.me<br>curl curlmyip.com<br>curl ip.appspot.com<br>curl ipinfo.io/ip<br>curl ipecho.net/plain<br>curl <a href="http://www.trackip.net/i">www.trackip.net/i</a>    </p><h6 id="curl-JSON格式输出"><a href="#curl-JSON格式输出" class="headerlink" title="curl JSON格式输出:"></a>curl JSON格式输出:</h6><p>curl ipinfo.io/jsoncurl ifconfig.me/all.jsoncurl <a href="http://www.trackip.net/ip?json">www.trackip.net/ip?json</a>     </p><h6 id="curl-XML格式输出"><a href="#curl-XML格式输出" class="headerlink" title="curl XML格式输出:"></a>curl XML格式输出:</h6><p>curl ifconfig.me/all.xml<br>curl 得到所有IP细节 （挖掘机）<br>curl ifconfig.me/all    </p><h6 id="使用-DYDNS-（当你使用-DYDNS-服务时有用）"><a href="#使用-DYDNS-（当你使用-DYDNS-服务时有用）" class="headerlink" title="使用 DYDNS （当你使用 DYDNS 服务时有用）"></a>使用 DYDNS （当你使用 DYDNS 服务时有用）</h6><p>curl -s ‘<a href="http://checkip.dyndns.org&/#39;">http://checkip.dyndns.org&#39;</a> | sed ‘s/.*Current IP Address: ([0-9.]<em>).</em>/\1/g’<br>curl -s <a href="http://checkip.dyndns.org/">http://checkip.dyndns.org/</a> | grep -o “[[:digit:].]+“     </p><h6 id="使用-Wget-代替-Curl"><a href="#使用-Wget-代替-Curl" class="headerlink" title="使用 Wget 代替 Curl"></a>使用 Wget 代替 Curl</h6><p>wget <a href="http://ipecho.net/plain">http://ipecho.net/plain</a> -O - -q ; echo<br>wget <a href="http://observebox.com/ip">http://observebox.com/ip</a> -O - -q ; echo    </p><h6 id="使用-host-和-dig-命令"><a href="#使用-host-和-dig-命令" class="headerlink" title="使用 host 和 dig 命令"></a>使用 host 和 dig 命令</h6><p>如果有的话，你也可以直接使用 host 和 dig 命令。<br>host -t a dartsclink.com | sed ‘s/.*has address //‘<br>dig +short myip.opendns.com @resolver1.opendns.com     </p><h6 id="bash-脚本示例"><a href="#bash-脚本示例" class="headerlink" title="bash 脚本示例:"></a>bash 脚本示例:</h6><pre><code>#!/bin/bash    PUBLIC_IP=`wget http://ipecho.net/plain -O - -q ; echo`    echo $PUBLIC_IP    </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透无需公网IP的工具Holer</title>
      <link href="/2021/11/09/nei-wang-chuan-tou-wu-xu-gong-wang-ip-de-gong-ju-holer/"/>
      <url>/2021/11/09/nei-wang-chuan-tou-wu-xu-gong-wang-ip-de-gong-ju-holer/</url>
      
        <content type="html"><![CDATA[<p>Holer是一个免费开源的内网穿透工具，它可以将局域网服务器代理到公网的内网穿透工具，支持转发基于TCP协议的报文。</p><p>Holer地址：<a href="https://github.com/Wisdom-Projects/holer">https://github.com/Wisdom-Projects/holer</a></p><p>1.下载软件包并解压：<br>软件包地址：<a href="https://github.com/Wisdom-Projects/holer/tree/master/Binary">https://github.com/Wisdom-Projects/holer/tree/master/Binary</a>    </p><p>解压软件包 holer-client.zip    </p><p>2.修改配置文件<br>holer-client/conf/holer.conf    </p><p>公网和内网的地址映射关系    </p><p>Holer Access Key    Internet Address    Local Address<br>HOLER_CLIENT-2F8D8B78B3C2A0AE    holer.org:65530    127.0.0.1:8080<br>HOLER_CLIENT-3C07CDFD1BF99BF2    holer.org:65531    127.0.0.1:8088<br>HOLER_CLIENT-2A623FCB6E2A7D1D    holer.org:65532    127.0.0.1:80<br>本地的Tomcat端口是8080，选择第一条记录里的Holer Access Key配置到holer-client/conf/holer.conf文件里    </p><p>HOLER_ACCESS_KEY=HOLER_CLIENT-2F8D8B78B3C2A0AE<br>如果您的Tomcat端口是8088或者80请选择对应的记录进行修改，如果您的Tomcat端口均不在上述列表里，建议将本地的Tomcat端口修改为上述列表里的端口8080或者8088或者80，否则无法访问映射后的公网地址。    </p><p> 3.启动Holer服务<br>cd holer-client/bin<br>Windows: 执行命令：startup.bat或者双击startup.bat    </p><p>Linux: 执行命令： sh startup.sh    </p><p>4.访问映射后的公网地址<br>启动本地的Tomcat，浏览器里输入URL:     </p><p><a href="http://holer.org:65530/">http://holer.org:65530</a><br>启动成功就可在公网上也能访问到了本地的Tomcat Web应用了    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【shell】shell脚本实现监控端口，端口不存在自动重启</title>
      <link href="/2021/11/09/shell-shell-jiao-ben-shi-xian-jian-kong-duan-kou-duan-kou-bu-cun-zai-zi-dong-chong-qi/"/>
      <url>/2021/11/09/shell-shell-jiao-ben-shi-xian-jian-kong-duan-kou-duan-kou-bu-cun-zai-zi-dong-chong-qi/</url>
      
        <content type="html"><![CDATA[<p>服务总是自动挂掉，为解决运维人员不能及时重启，所以写个定时脚本，一分钟监控一次端口是否占用，不占用说明服务挂了，自动重启服务。</p><p>脚本，以8080端口为例</p><p>#vim  /usr/local/taskStartTomcat.sh</p><pre><code>#!/bin/shtomcat=`netstat -an | grep &quot;:8080&quot; | awk &#39;$1 == &quot;tcp&quot; &amp;&amp; $NF == &quot;LISTEN&quot; &#123;print $0&#125;&#39; | wc -l`if [ $tomcat -eq 0 ];then  #如果端口没有占用的话要怎么怎么样  /usr/local/apache-tomcat-jenkins/bin/startup.shelse  #如果端口被占用的话要怎么怎么样  echo &quot;运行正常!&quot;fi</code></pre><p>创建定时任务</p><p>#crontab -e    </p><pre><code>*/1 * * * * sh /usr/local/taskStartTomcat.sh</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Dockerfile命令详解</title>
      <link href="/2021/11/05/dockerfile-ming-ling-xiang-jie/"/>
      <url>/2021/11/05/dockerfile-ming-ling-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p>使用docker就会避免不了的要做各种镜像，就会用到dockerfile，记录一下dockerfile的主要命令    </p><p>1、主要组成部分    </p><pre><code>dockerfile执行build命令时，是从上倒下依次执行的，dockerfile的基本组成部分如下。            主要部分                              代表性命令        基础镜像信息                      FROM        维护者信息                          MAINTAINER        镜像操作指令                      RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME、ENV等        容器启动时执行指令           CMD、ENTRYPOINT    </code></pre><p>2、各命令详解    </p><p>FROM：指定基础镜像，必须为dockerfile中的第一个命令    </p><p>格式：<br>　　FROM <image><br>　　FROM <image>:<tag><br>　　FROM <image>@<digest><br>示例：<br>　　FROM mysql:5.6<br>注：<br>　　tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像    </digest></image></tag></image></image></p><p>MAINTAINER: 维护者信息    </p><p>格式：<br>    MAINTAINER <name><br>示例：<br>    MAINTAINER Jack<br>    MAINTAINER <a href="mailto:&#x6a;&#97;&#x63;&#x6b;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;">&#x6a;&#97;&#x63;&#x6b;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a><br>    MAINTAINER Jack <a href="mailto:&#106;&#97;&#x63;&#107;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#x6d;">&#106;&#97;&#x63;&#107;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#x6d;</a>    </name></p><p> RUN：构建镜像时执行的命令，一个文件中可以包含多个RUN命令    </p><p>RUN用于在镜像容器中执行命令，有以下两种命令执行方式：<br>shell执行，即/bin/sh<br>格式：<br>    RUN <command>    </p><p>exec执行<br>格式：<br>    RUN [“executable”, “param1”, “param2”]<br>    要注意的是，executable是命令，后面的param是参数<br>示例： RUN yum install -y nginx<br>      RUN [“yum”, “install”, “-y”, “nginx”]<br>注：<br>　　RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定–no-cache参数，如：docker build –no-cache    </p><pre><code>    由于RUN命令会生成一个镜像层，所以RUN并不是越多越好，需要合理使用，如果一个RUN中执行多个命令，可以使用 &amp;&amp; 连接，如果命令过长，可以使用 \ 换行，例如    </code></pre><p>RUN apt-get update &amp;&amp; apt-get install -y \<br> bzr \<br> cvs \<br> git \<br> mercurial \<br> subversion    </p><p>并且这样写还有个优点，apt-get update 和 apt-get install 被放在一个 RUN 指令中执行，这样能够保证每次安装的是最新的包。如果 apt-get install 在单独的 RUN 中执行，则会使用 apt-get update 创建的镜像层，而这一层可能是很久以前缓存的    </p><p>ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget    </p><p>如果目的位置不存在，Docker会自动创建所需要的目录结    </p><p>格式：<br>    ADD <src>… <dest><br>    ADD [“<src>“,… “<dest>“] 用于支持包含空格的路径<br>示例：<br>    ADD hom* /mydir/          # 添加所有以”hom”开头的文件<br>    ADD hom?.txt /mydir/      # ? 替代一个单字符,例如：”home.txt”<br>    ADD test relativeDir/     # 添加 “test” 到 <code>WORKDIR</code>/relativeDir/<br>    ADD test /absoluteDir/    # 添加 “test” 到 /absoluteDir/<br>  注意：    </dest></src></dest></src></p><pre><code>  需要复制的本地文件一定要放在Dockerfile文件的同级目录下    </code></pre><p>  原因：    </p><pre><code>  因为构建环境将会先上传到Docker守护进程，而复制是在Docker守护进程中进行的。任何位于构建环境之外的东西都是不可用的。ADD指令的目的的位置则必须是容器内部的一个绝对路径。     </code></pre><p>COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源    </p><pre><code>    就是不能解压，其他限制条件跟ADD一样     </code></pre><p>WORKDIR：指定工作目录，类似于cd命令，之后的命令都是基于此工作目录    </p><p>格式：<br>    WORKDIR /path/to/workdir<br>示例：<br>    WORKDIR /a  (这时工作目录为/a)<br>    WORKDIR b  (这时工作目录为/a/b)<br>    WORKDIR c  (这时工作目录为/a/b/c)<br>注：<br>　　通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。    </p><p>LABEL：用于为镜像添加元数据    </p><p>格式：<br>    LABEL <key>=<value> <key>=<value> <key>=<value> …<br>示例：<br>　　LABEL version=”1.0” description=”这是一测试工程”<br>注：<br>　　使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。    </value></key></value></key></value></key></p><p>ENV：设置环境变量    </p><p>格式：<br>    ENV <key> <value>  #<key>之后的所有内容均会被视为其<value>的组成部分，因此，一次只能设置一个变量<br>    ENV <key>=<value> …  #可以设置多个变量，每个变量为一个”<key>=<value>“的键值对，如果<key>中包含空格，可以使用\来进行转义，也可以通过””来进行标示；另外，反斜线也可以用于续行<br>示例：<br>    ENV myName John Doe<br>    ENV myDog Rex The Dog<br>    ENV myCat=fluffy    </key></value></key></value></key></value></key></value></key></p><p>EXPOSE：指定暴露镜像的端口供主机做映射    </p><p>格式：<br>    EXPOSE <port> [<port>…]<br>示例：<br>    EXPOSE 80 443<br>    EXPOSE 8080<br>    EXPOSE 11211/tcp 11211/udp<br>注：<br>　　EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口    </port></port></p><p>VOLUME：添加卷，用于指定持久化目录    </p><p>格式：<br>    VOLUME [“/path/to/dir”]<br>示例：<br>    VOLUME [“/data”]<br>    VOLUME [“/var/www”, “/var/log/apache2”, “/etc/apache2”]<br>注：<br>　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：<br>1 卷可以容器间共享和重用<br>2 容器并不一定要和其它容器共享卷<br>3 修改卷后会立即生效<br>4 对卷的修改不会对镜像产生影响<br>5 卷会一直存在，直到没有任何容器在使用它    </p><p>USER:指定运行容器时的用户名或 UID，后续的操作都会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户    </p><p>格式:<br>　　USER user<br>　　USER user:group<br>　　USER uid<br>　　USER uid:gid<br>　　USER user:gid<br>　　USER uid:group    </p><p> 示例：<br>　　USER www    </p><p> 注：<br>　　使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。    </p><p>ARG：用于指定传递给构建运行时的变量    </p><p>格式：<br>    ARG <name>[=<default value>]<br>示例：<br>    ARG site<br>    ARG build_user=www    </default></name></p><p>ONBUILD：用于设置镜像触发器    </p><p>格式：<br>　　ONBUILD [INSTRUCTION]<br>示例：<br>　　ONBUILD ADD . /app/src<br>　　ONBUILD RUN /usr/local/bin/python-build –dir /app/src<br>注：<br>　　当所构建的镜像被用做其它镜像的基础镜像时（比如用户的镜像需要从某为准备好的位置添加源代码，或者用户需要执行特定于构建镜像的环境的构建脚本），该镜像中的触发器将会被钥触发    </p><p>例如创建镜像image-A<br>  FROM ubuntu<br>  …<br>  ONBUILD ADD . /var/www<br>  …    </p><p>然后创建镜像image-B，指定image-A为基础镜像，如<br>  FROM image-A<br>  …    </p><p>然后在构建image-B的时候，日志上显示如下:<br>  Step 0 : FROM image-A    </p><h1 id="Execting-1-build-triggers"><a href="#Execting-1-build-triggers" class="headerlink" title="Execting 1 build triggers"></a>Execting 1 build triggers</h1><p>  Step onbuild-0 : ADD . /var/www<br>  …    </p><p>CMD：构建容器后调用，也就是在容器启动时才进行调用，存在多个CMD时只有最后一个生效，也支持exec语法。    </p><p>格式：<br>    CMD [“executable”,”param1”,”param2”] (执行可执行文件，优先)<br>    CMD [“param1”,”param2”] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)<br>    CMD command param1 param2 (执行shell内部命令)<br>示例：<br>    CMD echo “This is a test.” | wc -<br>    CMD [“/usr/bin/wc”,”–help”]<br>注：<br> 　　CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。    </p><p>ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。    </p><p>格式：<br>    ENTRYPOINT [“executable”, “param1”, “param2”] (可执行文件, 优先)<br>    ENTRYPOINT command param1 param2 (shell内部命令)<br>示例：<br>    FROM ubuntu<br>    ENTRYPOINT [“top”, “-b”]<br>    CMD [“-c”]<br>注：<br>　　　ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。    </p><p>注意！！！！ CMD和ENTRYPOINT的区别    </p><pre><code>CMD和ENTRYPOINT同样作为容器启动时执行的命令，区别有以下几点：          CMD的命令会被 docker run 的命令覆盖而ENTRYPOINT不会          如使用CMD [&quot;/bin/bash&quot;]或ENTRYPOINT [&quot;/bin/bash&quot;]后，再使用docker run -ti image启动容器，它会自动进入容器内部的交互终端，如同使用docker run -ti image /bin/bash。          但是如果启动镜像的命令为docker run -ti image /bin/ps，使用CMD后面的命令就会被覆盖转而执行bin/ps命令，而ENTRYPOINT的则不会，而是会把docker run 后面的命令当做ENTRYPOINT执行命令的参数。     放个例子    </code></pre><p>Dockerfile中为<br>ENTRYPOINT [“/user/sbin/nginx”]    </p><p>然后通过启动build之后的容器<br>docker run -ti image -g “daemon off”    </p><p>此时-g “daemon off”会被当成参数传递给ENTRYPOINT，最终的命令变成了<br>/user/sbin/nginx -g “daemon off”    </p><p>如果Dockerfile中定义的是CMD，则会被覆盖    </p><p>CMD和ENTRYPOINT都存在时，CMD的指令就变成了ENTRYPOINT的参数，并且此CMD提供的参数也会被 docker run 后面的命令覆盖    </p><p>Dockerfile中指令<br>..<br>ENTRYPOINT [“echo”,”hello”,”i am”]<br>CMD [“docker”]    </p><p>之后启动构建之后的容器    </p><p>使用docker run -ti image<br>输出“hello i am docker”    </p><p>使用docker run -ti image world<br>输出“hello i am world”    </p><p>最后说一下docker build命令，Dockerfile写完后要生产镜像，就需要docker build    </p><p>docker build 命令用于使用 Dockerfile 创建镜像，语法    </p><p>docker build [OPTIONS] PATH | URL |-<br>参数说明：    </p><p>–build-arg=[] :设置镜像创建时的变量；    </p><p>–cpu-shares :设置 cpu 使用权重；    </p><p>–cpu-period :限制 CPU CFS周期；    </p><p>–cpu-quota :限制 CPU CFS配额；    </p><p>–cpuset-cpus :指定使用的CPU id；    </p><p>–cpuset-mems :指定使用的内存 id；    </p><p>–disable-content-trust :忽略校验，默认开启；    </p><p>-f :指定要使用的Dockerfile路径；    </p><p>–force-rm :设置镜像过程中删除中间容器；    </p><p>–isolation :使用容器隔离技术；    </p><p>–label=[] :设置镜像使用的元数据；    </p><p>-m :设置内存最大值；    </p><p>–memory-swap :设置Swap的最大值为内存+swap，”-1”表示不限swap；    </p><p>–no-cache :创建镜像的过程不使用缓存；    </p><p>–pull :尝试去更新镜像的新版本；    </p><p>–quiet, -q :安静模式，成功后只输出镜像 ID；    </p><p>–rm :设置镜像成功后删除中间容器；    </p><p>–shm-size :设置/dev/shm的大小，默认值是64M；    </p><p>–ulimit :Ulimit配置。    </p><p>–tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。    </p><p>–network: 默认 default。在构建期间设置RUN指令的网络模式    </p><p>示例    </p><p>使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。<br>docker build -t runoob/ubuntu:v1 .     </p><p>使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。<br>docker build github.com/creack/docker-firefox    </p><p>也可以通过 -f Dockerfile 文件的位置：<br>$ docker build -f /path/to/a/Dockerfile .    </p><p>在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：<br>$ docker build -t test/myapp .<br>Sending build context to Docker daemon 2.048 kB<br>Error response from daemon: Unknown instruction: RUNCMD    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>你只是他们其中的一个</title>
      <link href="/2021/11/05/ni-shi-ta-men-qi-zhong-de-yi-ge/"/>
      <url>/2021/11/05/ni-shi-ta-men-qi-zhong-de-yi-ge/</url>
      
        <content type="html"><![CDATA[<div class="note success"><p>条件太好的男生和漂亮的女生</p></div><div class="note warning"><p>很多都是没有空窗期的</p></div>    <div class="note danger"><p>听明白了吗</p></div>    <div class="note success"><p>有多少人和想和他们谈恋爱</p></div>    <div class="note quote"><p>他们谈过多少</p></div><div class="note success"><p>你只是他们其中的一个</p></div>    <div class="note info"><p>你在那自作多情什么呢</p></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis设置密码</title>
      <link href="/2021/11/04/redis-she-zhi-mi-ma/"/>
      <url>/2021/11/04/redis-she-zhi-mi-ma/</url>
      
        <content type="html"><![CDATA[<p>redis安装过程    </p><p>$ wget <a href="http://download.redis.io/releases/redis-5.0.3.tar.gz">http://download.redis.io/releases/redis-5.0.3.tar.gz</a><br>$ tar xzf redis-5.0.3.tar.gz<br>$ cd redis-5.0.3<br>$ make    </p><p>启动服务    </p><p>$ src/redis-server      # 启动redis服务，使用的是默认配置，无密码<br>$ src/redis-cli      # 用client端链接本地redis服务<br>redis&gt; set foo bar<br>OK<br>redis&gt; get foo<br>“bar”    </p><p>设置密码等    </p><p>vim redis.conf<br>/requirepass    # 找到设置密码的字段<br>requirepass  123456     # 密码设置为 123456<br>daemonize   yes    # 设置后台运行<br>port 6379<br>bind 192.168.1.100 10.0.0.1    # 绑定外网可以访问的本机「网卡」地址，可以绑定多个ip，只要本机有这个网卡的ip<br>logfile “/export/logs/redis.log”    # 设置日志的存放位置<br>pidfile /var/run/redis_6379.pid    # 设置pid文件的存放位置<br>databases 16    # 设置数据库的个数，默认是16个（从0到15）    </p><p>登录和使用    </p><p>src/redis-server /export/redis-5.0.3/redis.conf    # 启动指定配置文件的redis服务<br>[root@JXQ-97-7-98 redis-5.0.3]# src/redis-server /export/redis-5.0.3/redis.conf<br>520:C 24 Jan 2019 21:40:22.943 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo<br>520:C 24 Jan 2019 21:40:22.943 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=520, just started<br>520:C 24 Jan 2019 21:40:22.943 # Configuration loaded<br>[root@JXQ-97-7-98 redis-5.0.3]#<br>[root@JXQ-97-7-77 redis-3.2.1]# src/redis-cli -h ‘100.97.7.98’ -p ‘6379’ -a ‘123456’    # 客户端连接服务<br>100.97.7.98:6379&gt; set f 3<br>OK<br>100.97.7.98:6379&gt; get f<br>“3”    </p><p>这里要说一下为什么要设置密码？因为只有本地访问redis是无法满足我们的需求的，我们需要远程访问，这个时候就需要设置密码了，我们需要认证，不是谁都可以访问的。    </p><p>还有一个问题就是bind，默认是绑的本机网卡ip 127.0.0.1，但这个只能本机访问，所以我们要绑定到本机的网卡上，这样远程就可以根据ip来访问了，注意，服务器有可能会有多块网卡，绑哪个要根据网络情况来定，可以绑定多个ip，如下：    </p><p>ifconfig<br>eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>        inet 100.97.7.98  netmask 255.255.252.0  broadcast 100.97.7.255<br>        inet6 fe80::f200:64ff:feb1:7c6  prefixlen 64  scopeid 0x20<link><br>        ether f0:00:64:61:07:c6  txqueuelen 1000  (Ethernet)<br>        RX packets 928533  bytes 193136262 (184.1 MiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 789011  bytes 110711946 (105.5 MiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0    </p><p>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>        inet 127.0.0.1  netmask 255.0.0.0<br>        inet6 ::1  prefixlen 128  scopeid 0x10<host><br>        loop  txqueuelen 1  (Local Loopback)<br>        RX packets 22553  bytes 922439 (900.8 KiB)<br>        RX errors 0  dropped 0  overruns 0  frame 0<br>        TX packets 22553  bytes 922439 (900.8 KiB)<br>        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0    </host></p><p>可以看到，本机有两个ip，分别是 100.97.7.98 和127.0.0.1，所以 redis.conf 中的可以设置为 bind 100.97.7.98 127.0.0.1，也可以设置1个，但是不能设置本机网卡中不存在的ip，那样会无法启动redis服务的        </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx负载均衡中4层代理和7层代理对比</title>
      <link href="/2021/11/04/nginx-fu-zai-jun-heng-zhong-4-ceng-dai-li-he-7-ceng-dai-li-dui-bi/"/>
      <url>/2021/11/04/nginx-fu-zai-jun-heng-zhong-4-ceng-dai-li-he-7-ceng-dai-li-dui-bi/</url>
      
        <content type="html"><![CDATA[<p>1.4层代理和7层代理什么意思？</p><p>这里的层是OSI 7层网络模型，OSI 模型是从上往下的，越底层越接近硬件，越往上越接近软件，这七层模型分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。</p><p>4层是指传输层的 tcp / udp 。</p><p>7层是指应用层，通常是http 。</p><p>2.代理原理：</p><p>4层用的是NAT技术。NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，请求进来的时候，nginx修改数据包里面的目标和源IP和端口，然后把数据包发向目标服务器，服务器处理完成后，nginx再做一次修改，返回给请求的客户端。</p><p>7层代理：需要读取并解析http请求内容，然后根据具体内容(url,参数，cookie,请求头)然后转发到相应的服务器，转发的过程是：建立和目标机器的连接，然后转发请求，收到响应数据在转发给请求客户端。</p><p>3.优缺点对比：</p><p>性能：</p><p>理论上4层要比7层快，因为7层代理需要解析数据包的具体内容，需要消耗额外的cpu。但nginx具体强大的网络并发处理能力， 对于一些慢连接，nginx可以先将网络请求数据缓冲完了一次性转发给上游server,这样对于上游网络并发处理能力弱的服务器(比如tomcat)，这样对tomcat来说就是慢连接变成快连接(nginx到tomcat基本上都是可靠内网),从而节省网络数据缓冲时间，提供并发性能。</p><p>灵活性：</p><p>由于4层代理用的是NAT，所以nginx不知道请求的具体内容，所以nginx啥也干不了。 用7层代理，可以根据请求内容(url,参数，cookie,请求头)做很多事情，比如：</p><p>a:动态代理：不同的url转发到不同服务器。</p><p>b.风控：屏蔽外网IP请求某些敏感url；根据参数屏蔽某些刷单用户。</p><p>c.审计：在nginx层记录请求日志。</p><p>….</p><p>4.结论：</p><p>由于现在机器cpu性能都很好，4层代理并没有明显的性能优势，而7层代理在业务层面优势明显，所以一般直接选择7层代理就OK了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx四层、七层负载均衡配置示例</title>
      <link href="/2021/11/04/nginx-si-ceng-qi-ceng-fu-zai-jun-heng-pei-zhi-shi-li/"/>
      <url>/2021/11/04/nginx-si-ceng-qi-ceng-fu-zai-jun-heng-pei-zhi-shi-li/</url>
      
        <content type="html"><![CDATA[<p>所谓四层就是基于IP+端口的负载均衡，通过虚拟IP+端口接收请求，然后再分配到真实的服务器；七层通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器七层就是基于URL等应用层信息的负载均衡。    </p><p>七层负载<br>#定义    </p><pre><code>upstream phpserver &#123;             server192.168.2.3;             server192.168.2.4;             &#125;    upstream htmlserver &#123;             server192.168.2.1;             server192.168.2.2;           &#125;    </code></pre><p>#引用    </p><pre><code>location / &#123;    root  /usr/share/nginx/html;    index  index.html index.htm;    if ($request_uri ~*\.html$)&#123;        proxy_pass http://htmlserver;    &#125;    if ($request_uri~* \.php$)&#123;        proxy_pass http://phpserver;    &#125;    </code></pre><p>}<br>四层负载    </p><pre><code>stream &#123;        log_format  proxy &#39;$remote_addr $remote_port - [$time_local] $status $protocol &#39;                  &#39;&quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; &quot;$upstream_connect_time&quot;&#39; ;    access_log /var/log/nginx/proxy.log proxy;    upstream lb &#123;            server 172.16.1.5:80 weight=5 max_fails=3 fail_timeout=30s;            server 172.16.1.6:80 weight=5 max_fails=3 fail_timeout=30s;    &#125;    server &#123;            listen 80;            proxy_connect_timeout 3s;            proxy_timeout 3s;            proxy_pass lb;    &#125;    &#125;    </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04开机运行自定义脚本</title>
      <link href="/2021/11/04/ubuntu20-04-kai-ji-yun-xing-zi-ding-yi-jiao-ben/"/>
      <url>/2021/11/04/ubuntu20-04-kai-ji-yun-xing-zi-ding-yi-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>1.简介<br>基于 Debian 的 Linux 系统默认支持 rc-local.service 服务，这个服务主要用来在系统启动时运行用户自定义的脚本命令等。</p><p>2.配置<br>要想使用 rc-local.service 服务在系统启动时运行用户自定义的脚本命令，首先需要在 /etc 目录下创建 rc.local 文件（若已创建则跳过创建）并修改可执行权限，然后设置该服务开机自启：</p><p>sudo touch /etc/rc.local<br>sudo chmod 755 /etc/rc.local<br>sudo systemctl start rc-local.service<br>sudo systemctl enable rc-local.service<br>3.添加开机自启脚本<br>打开 /etc/rc.local 文件，往其中添加运行自定义脚本的命令即可。<br>添加下列内容：</p><pre><code>#!/bin/shecho &quot;看到这行字，说明添加自启动脚本成功。&quot; &gt; /usr/local/test.log#中间这一段就是脚本的内容，例如：sudo ssr startexit 0</code></pre><p>【注】/etc/rc.local 以及自定义脚本中都不能使用系统变量（比如 $HOME，原因在于其执行自定义脚本时并没有继承系统变量）。</p><p>4.查看脚本执行结果</p><p>systemctl status rc-local.service</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>从ifconfig输出中提取MAC地址</title>
      <link href="/2021/11/03/cong-ifconfig-shu-chu-zhong-ti-qu-mac-di-zhi/"/>
      <url>/2021/11/03/cong-ifconfig-shu-chu-zhong-ti-qu-mac-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>环境 Ubuntu 20.04</p><p>ifconfig eth0 | grep -o -E ‘([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}’</p><p>-o将导致grep只打印与表达式匹配的行部分。[[:xdigit:]]{1,2}将匹配1或2个十六进制数字(Solaris不输出前导零)。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux命令行显示主机名和当前目录</title>
      <link href="/2021/11/03/linux-ming-ling-xing-xian-shi-zhu-ji-ming-he-dang-qian-mu-lu/"/>
      <url>/2021/11/03/linux-ming-ling-xing-xian-shi-zhu-ji-ming-he-dang-qian-mu-lu/</url>
      
        <content type="html"><![CDATA[<p>在开发中linux server中，如果登录后命令行一直显示（在已经有权限登录的情况下）：bash-3.2$ </p><p>如何让其显示主机名和文件路径（并根据不同的颜色显示）：</p><p>[cvadev@swcvaap3d:/home/cvadev]</p><p> <br>我这里server登录方式为：pbrun cvadev。 所以默认路径为/home/cvadev<br>查看改路径下的隐藏文件: ls -a</p><p>如果存在.bashrc文件，则直接进行修改，如果不存在就新建改文件。<br>然后添加如下内容：</p><pre><code>alias ll=&#39;ls -l&#39;alias ls=&#39;ls&#39;alias tl=&#39;tail -500&#39;alias tff=&#39;tail -600f&#39;PS1=`echo &#39;[\033[1;35m$LOGNAME\033[0m&#39;&quot;@&quot;&#39;\033[0;31m$HOSTNAME\033[0m&#39;&#39;\033[0;32m:$PWD\033[0m]&#39;``echo &quot;\n&gt; &quot;`set -o vi</code></pre><p>前面四行为命令的别名，可以根据自己情况设置，也可以不用。后面两行即为修改linux命令行提示信息，颜色可以根据自己的喜好进行修改设置</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>以指定用户启动和进入docker容器</title>
      <link href="/2021/11/03/yi-zhi-ding-yong-hu-qi-dong-he-jin-ru-docker-rong-qi/"/>
      <url>/2021/11/03/yi-zhi-ding-yong-hu-qi-dong-he-jin-ru-docker-rong-qi/</url>
      
        <content type="html"><![CDATA[<p>第一次用run创建并启动容器，运行命令</p><p>　　docker run -it -u user_name –name container_name -d image_name /bin/bash</p><p>之后可以用exec进入容器，运行命令</p><p>　　docker exec -it -u user_name container_name /bin/bash</p><p>还可以指定主机名</p><p>　　–hostname user_hostname</p><p>指定网络</p><p>　　–network=user_network</p><p>指定ip</p><p>　　–ip 172.18.0.3</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux安装库时报错error: command ‘x86_64-linux-gnu-gcc‘ failed with exit status 1</title>
      <link href="/2021/11/03/linux-an-zhuang-ku-shi-bao-cuo-error-command-x86-64-linux-gnu-gcc-failed-with-exit-status-1/"/>
      <url>/2021/11/03/linux-an-zhuang-ku-shi-bao-cuo-error-command-x86-64-linux-gnu-gcc-failed-with-exit-status-1/</url>
      
        <content type="html"><![CDATA[<p>在Ubuntu18.04上安装nameko时报错：</p><p>error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1</p><p> 解决办法：</p><p>安装依赖库</p><p>python2：</p><p>sudo apt-get install build-essential python-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev    </p><p>python3：</p><p>sudo apt-get install build-essential python3-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev</p><p>安装nameko时推荐使用python3，使用python2可能会有导包错误：</p><p>在使用nameko命令启动时报错：no module named zipp</p><p>解决办法：</p><p>pip install zipp==1.2.0     </p><p>安装nameko成功后所有安装库，不然可能会有no module named xxx之类的导入错误：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>etcd 下载链接</title>
      <link href="/2021/11/03/etcd-xia-zai-lian-jie/"/>
      <url>/2021/11/03/etcd-xia-zai-lian-jie/</url>
      
        <content type="html"><![CDATA[<p><a href="https://mirrors.huaweicloud.com/etcd/v3.3.20/">https://mirrors.huaweicloud.com/etcd/v3.3.20/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>[tcp] WEB服务,Linux下的内核参数调优</title>
      <link href="/2021/11/03/tcp-web-fu-wu-linux-xia-de-nei-he-can-shu-diao-you/"/>
      <url>/2021/11/03/tcp-web-fu-wu-linux-xia-de-nei-he-can-shu-diao-you/</url>
      
        <content type="html"><![CDATA[<p>前言:<br>web类应用一般会部署像nginx、tomcat、php等应用程序，使用默认的内核参数设置满足大部分场景，如果优化内核参数，也可以释放不少服务器性能，尤其是在高并发下    </p><p>一.SYN状态的内核参数调优<br>大量SYN_SENT<br>这种是主动连接服务端，而未得到响应，也就是SYN超时，一般是服务端根本不存在或者无法访问<br>如，我随便telnet一个位置的IP和端口    </p><p>telnet 172.18.11.110:90<br>[root@test bbs]# ss -an|grep SYN<br>SYN-SENT   0      1            172.16.196.145:55052        172.18.11.110:90<br>除了以上，还有种就是你的服务出现异常，比如mysql服务器宕机了，web服务去访问mysql数据库的时候就连不上，也会出现SYN_SENT状态，但无论哪种，都是主动发起连接导致的，因此业务上解决更好    </p><p>net.ipv4.tcp_syn_retries = 2<br>新建连接如果无响应，内核要发送多少次SYN连接才放弃，默认值为5    </p><p>在Linux下，默认重试次数为5次，该值不能大于255，重试的间隔时间从1s开始每次都翻倍(因为隔一秒重试后还会等待响应，因此实际上是从3秒开始)，5次的重试时间间隔为3s, 7s, 15s, 31s, 63s，总共63s，TCP才会把断开这个连接。统计成公式2^(n+1) - 1，因此设置越大，翻倍越多，对应内网环境，这个值修改为2比较合适    </p><p>大量SYN_RECV<br>大量的SYN出现有两种情况，可能是攻击，也可能是正常的业务请求，无论哪种，都大量的占用了服务器资源    </p><p>net.ipv4.tcp_synack_retries = 2<br>跟参数net.ipv4.tcp_syn_retries一样，只是这个内核参数是控制回应SYN失败的重试次数，默认值也是5，和上面一样修改为2    </p><p>其他内核参数调整<br>net.ipv4.tcp_syncookies = 1<br>开启SYN cookies，当出现SYN等待队列溢出时，启动cookies来处理    </p><p>什么是SYN cookies?我们知道SYN攻击是一系列伪造IP源地址的SYN包，IP地址是随意选择且不提供攻击者任何的线索，SYN攻击持续直到服务的SYN队列被用满。如果启用该参数，此时SYN cookies会将TCP请求的SYN缓存起来，当服务器正常的时候，再处理，但是如果攻击并发很高很大，其实用处不大，因此只能少量防范    </p><p>net.ipv4.tcp_max_syn_backlog = 65535<br>指定所能接受SYN同步包的最大客户端数量，即半连接上限，默认值为128，对于web服务，频繁大量的SYN同步包，应该放大这个值    </p><p>注:这个值应该&gt;=net.core.somaxconn，net.core.somaxconn后面会提到    </p><p>二.FIN_WAIT_2状态的内核参数调优<br>FIN_WAIT_2是主动关闭端等待对端关闭连接的状态，如果被动关闭不发送FIN关闭连接，那么这个状态就会一直存在，当然Linux有针对该状态的超时时间，默认为60秒    </p><p>net.ipv4.tcp_fin_timeout = 10    </p><p>三.TIME_WAIT状态的内核参数调优<br>TIME_WAIT是主动关闭端的状态，也称为2MSL等待状态，也就是2倍的MSL时间。在RFC 793[Postel 1981c]指出MSL为2分钟，然而现实中的常用值是30秒，1分钟或者2分钟(Linux设置为30秒)，Linux也没有提供能够修改TIME_WAIT状态时间的接口，除非重新编译系统内核    </p><p>MSL的理解<br>MSL是英文Maximum Segment Lifetime的缩写，翻译为”最长报文段寿命”，每个具体TCP实现必须选择一个报文段最大生存时间(Maximum Segment Lifetime)，而这个最大生存时间是任何报文段被丢弃前在网络内的最长时间    </p><p>MSL的时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL(time to live)字段，TTL可译为生存时间，IP数据报每经过一个路由器，它的值就减1，当这个值为0时，数据报则被丢弃    </p><p>为什么等待2MSL<br>1.确保有足够的时间让服务端收到ACK，如没有收到，则会响应对方新的FIN+ACK封包。比如主动关闭端(客户端)发送了最后一个ACK报文段给被动关闭端(服务端)，但这个ACK报文段有可能丢失，如果服务端没有收到这个ACK，那么处于LAST_ACK的服务端在超时后回重发FIN+ACK报文段，这样客户端就能在2MSL时间内收到这个重发的FIN+ACK报文段。如果客户端发送了最后的ACK报文不进入TIME_WAIT而是立即释放连接，那么就无法收到客户端重发的FIN+ACK报文段。因此等待2MSL是为了更安全的断开连接    </p><p>2.有足够的时间让处于TIME_WAIT状态的连接不会跟后面的连接混在一起。比如一些延迟的包发过来，但是如果没有TIME_WAIT，那么就发到了新连接上，这样就混为一团，而如果是TIME_WAIT，则会丢弃这些延迟的包    </p><p>等待2MSL的缺点<br>TCP连接在2MSL等待期间，这个处于TIME_WAIT状态的连接(客户端的IP地址和端口编号，服务器的IP地址和端口号)不能再被使用，它只能在2MSL结束后才能再被使用，而这些TIME_WAIT状态占用大量服务资源，对于web服务来说是不合理的    </p><p>修改内核参数防止因为2MSL导致TIME_WAIT过多<br>对于web服务器，由于我们需要经常去连接mysql、redis或者一些RPC调用等，会有大量的主动关闭状态(TIME_WAIT)，因此可以修改内核参数限制TIME_WAIT的数量    </p><p>net.ipv4.tcp_max_tw_buckets = 20000<br>限制timewait 的数量，防止大量timewait导致系统负载升高，一旦达到限定值，则强制清理TIME_WAIT状态的连接并在打印系统日志(time wait bucket table overflow)，该参数官方文档说明主要用来对抗DDos攻击    </p><p>net.ipv4.tcp_tw_recycle= 1<br>启用timewait快速回收    </p><p>net.ipv4.tcp_timestamps = 0<br>时间戳，0关闭，1开启。不能和net.ipv4.tcp_tw_recycle参数同时开启，因为一旦开启net.ipv4.tcp_tw_recycle，服务器就会检查包的时间戳，如果对方发来的包的时间戳是乱跳或者说时间戳是滞后的，这样服务器就不会回复，服务器会把带了”倒退”的时间戳包当作是”recycle”的tw连接的重传数据，不是新的请求，于是丢掉不回包，就容易出现syn不响应    </p><p>net.ipv4.tcp_tw_reuse = 1<br>开启重用，允许将TIME-WAIT sockets 重新用于新的TCP 连接    </p><p>TIME_WAIT总结<br>其实TIME_WAIT是主动断开连接，所以如果让对方主动断开连接的话，那么这个TIME_WAIT问题就对方的了。所以如果这个问题出现过多，多从业务着手，比如HTTP服务，NGINX设置keepalive参数(浏览器会重用一个TCP连接来处理多个HTTP请求)，然后让客户端断开连接，当然这个要设置好keepalive_timeout的超时时间，因为有些浏览器可能不会主动断开连接    </p><p>而如果是主动连接mysql、redis等后端调用，可以考虑使用长连接来避免TIME_WAIT过多的问题    </p><p>四.长连接(keepalive)的内核参数调整<br>Linux下，keepalive不是默认开启，也无内核参数控制，它需要在TCP的socket中单独开启，Linux内核影响keepalive的参数目的仅仅是探测TCP连接是否存活，然后处理异常连接    </p><p>net.ipv4.tcp_keepalive_time = 120 单位秒，表示TCP连接在多少秒没有数据报文传输时启动探测报文，探测连接是否正常<br>net.ipv4.tcp_keepalive_intvl = 5 单位秒，前后探测报文之间的时间间隔<br>net.ipv4.tcp_keepalive_probes = 3 探测次数，超过设置后丢弃    </p><p>五.TCP/UDP内存参数调整<br>(1)TCP内存使用设置<br>针对TCP socket buffer<br>net.ipv4.tcp_mem = 94500000 915000000 927000000<br>指定TCP内存的整体使用状况，单位为页。这3个值为TCP整体内存【低、压力、高】，在web服务中，放大这个值即可<br>第一个值tcp_mem[0]：当TCP全局分配的页数低于此数时，TCP不调整其内存分配<br>第二个值tcp_mem[1]：当TCP分配的内存量超过这个页数，进入内存压力模式，TCP调节内存消耗<br>第三个值tcp_mem[2]：TCP全局使用的最大页数分配，这个会值覆盖任何其他限制，如超过，所有的新的TCP的buffer(缓冲区)内存分配都会失败    </p><p>其实我们可以设置这个值较大，只要不限制系统分配内存，然后以监控来应对内存问题，一般来说，根据业务所选配置，很难将内存耗尽，否则优化的就不仅仅是这个参数了    </p><p>net.ipv4.tcp_rmem = 4096 87380 6291456<br>net.ipv4.tcp_wmem = 4096 16384 4194304<br>上面两组参数表示单个TCP连接上的读写buffer(缓冲)内存上限，单位字节，这三个值分别为最小值、默认值(会覆盖rmem_default、wmem_default配置)、最大值    </p><p>最小值:TCP socket的发送缓冲区(tcp_rmem)/接收缓冲区(tcp_wmem)的内存，默认1页(4K)    </p><p>默认值:TCP socket使用的发送缓冲区(tcp_rmem)/接收缓冲区(tcp_wmem)初始大小，这个值会覆盖(net.core.wmem_default/net.core.rmem_default)，一般设置要低于(net.core.wmem_default/net.core.rmem_default)这个值，默认值为16K    </p><p>最大值:TCP socket使用的发送缓冲区(tcp_rmem)/接收缓冲区(tcp_wmem)的最大大小，这个值不会覆盖(net.core.wmem_max/net.core.rmem_max)，默认为4M    </p><p>这两个内核参数的设置主要是针对每一个TCP连接来说的，使用默认设置就差不多了，如果设置太大，单个TCP连接占用过多内存也是有问题的    </p><p>什么是TCP读写buffer(缓冲)？<br>实际上，TCP连接所用内存的多少是由读写buffer大小决定，对读buffer来讲，当收到对端连接的TCP报文时，会导致读buffer内存增加，如果这个报文加上当前读buffer内存超过tcp_rmem[3]上限，那么该报文将被丢弃。只有当调用read、recv这样的方法读取TCP流时，读buffer内存就会减少，因此读buffer内存是一个动态变化的，用多少就分配多少buffer，如果这个连接空闲时，而用户进程已经把连接上收到的数据都消费了，那么读buffer使用的内存就为0了    </p><p>对于写buffer也是一样的，在socket编程中，当调用send或者write时，就会造成写buffer增大，那么什么时候减少？就是当接收到对端TCP连接发来的ACK确认了报文成功发送时，写buffer就会减少，类似于我给你发一个文件，我先拷贝出来发给你，我确认你收到了，我就把这个源文件删除，以免占用空间，如果确认没收到，那么我会重发    </p><p>所以读写buffer是一直不停变化的，那么怎样的场景会导致读写buffer达到上限呢？就读buffer而言，比如接收TCP对端报文，对端发了很多很多报文，我读取后无法及时读取(read和recv)，导致读buffer堆积越来越多，最终达到上限，最后丢弃报文，写buffer也一样，send或者write大量的报文时，如果TCP对端不能及时read和recv就会导致写buffer堆积。    </p><p>针对系统的读写buffer参数调整<br>net.core.rmem_default = 4194304 默认读buffer大小，单位字节<br>net.core.wmem_default = 4194304 默认写buffer大小，单位字节<br>net.core.rmem_max = 4194304 最大读buffer大小，单位字节<br>net.core.wmem_max = 4194304 最大写buffer大小，单位字节<br>看到其定义，是不是觉得跟net.ipv4.tcp_mem、net.ipv4.tcp_rmem、net.ipv4.tcp_wmem含义很重合呢？    </p><p>其实(net.ipv4.tcp_mem、net.ipv4.tcp_rmem、net.ipv4.tcp_wmem)这几个参数只控制TCP socket的内存大小，而且如果遇到TCP socket申请内存，(net.core.rmem_default、net.core.wmem_default)会被(net.ipv4.tcp_rmem、net.ipv4.tcp_wmem)覆盖    </p><p>所以(net.core.rmem_default、net.core.wmem_default、net.core.rmem_max、net.core.wmem_max)控制系统所有协议的读写buffer大小    </p><p>(2)UDP协议内存使用设置<br>net.ipv4.udp_mem = 752832 1003776 1505664<br>net.ipv4.udp_rmem_min = 4096<br>net.ipv4.udp_wmem_min = 4096<br>这几个参数针对UDP协议，则跟上面TCP的含义一致    </p><p>六.其他内核参数<br>net.ipv4.ip_local_port_range = 1024 65000<br>表示用于向外连接的临时端口范围。缺省情况下很小：32768到61000，因为主动连接需要用到很多临时端口(如连接mysql、redis)，而临时端口最大值为(2^16-1)65535，1000之前一般为系统保留端口，所以建议设置为1024到65000的较大范围    </p><p>net.core.somaxconn = 65535<br>net.core.somaxconn表示socket监听(listen)的backlog上限，backlog是socket的监听队列，也就是服务端所能accept(socket编程中accpet()函数为建立TCP连接接受连接状态)即处理数据的最大客户端数量队列，默认值为128，如果队列满了的时候新来一条建立连接，该连接会被拒绝    </p><p>该值应当小于等于net.ipv4.tcp_max_syn_backlog，因为net.ipv4.tcp_max_syn_backlog参数控制的SYN队列客户端的数量，还在建立连接之前，因此设置为65535一样比较合适    </p><p>fs.file-max = 6553600<br>设置系统所有进程一共可以打开多少个文件句柄，这是一个系统级的设置，管控的是所有进程总共可以同时打开多少文件句柄，如果多个进程打开了较多文件就会导致文件句柄不足，因此设置较大值，不过要注意程序打开的文件越多，就占用更多的内存，因此要根据业务和服务器配置起来设置    </p><p>如果想单独对某个进程设置可以打开多少文件句柄，那么可以使用ulimit -n命令设置，但该命令只对当前session生效，默认值为1024<br>ulimit -n 655350    </p><p>也可以写入文件永久生效，对每个进程的打开文件数量限制<br>vim /etc/security/limits.conf    </p><ul><li>soft nofile 655350    </li><li>hard nofile 655350    </li></ul><p>总结<br>现在多数线上业务，服务器很少暴露在外网了，前端一般有负载均衡、防火墙等代理。甚至服务器已经变成VPC(虚拟内网)环境，将这些服务器隔离在外网环境之外，这样就减少了像DDOS等攻击，这些攻击一般都让外部代理承受了。    </p><p>对于服务器的一些内核性能参数范围，如果网络环境及架构设计好，一些范围参数可以设置的偏大，性能偏极限一些，这样能最大释放服务器的性能，其他的就用系统默认的参数配置即可。对于WEB服务的优化，是多方面的，内核参数仅仅是释放了服务器本该有的性能，而更高的承载能力，需要从服务器配置、网络、架构、数据库及缓存和实际业务应用等多方面着手，不同的调整满足不同的需求</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何进入docker 使用root用户的方式</title>
      <link href="/2021/11/03/ru-he-jin-ru-docker-shi-yong-root-yong-hu-de-fang-shi/"/>
      <url>/2021/11/03/ru-he-jin-ru-docker-shi-yong-root-yong-hu-de-fang-shi/</url>
      
        <content type="html"><![CDATA[<p>docker exec -it –user root <container id> /bin/bash</container></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile文件中给debian设置中文支持</title>
      <link href="/2021/11/03/dockerfile-wen-jian-zhong-gei-debian-she-zhi-zhong-wen-zhi-chi/"/>
      <url>/2021/11/03/dockerfile-wen-jian-zhong-gei-debian-she-zhi-zhong-wen-zhi-chi/</url>
      
        <content type="html"><![CDATA[<p>#设置字体库<br>RUN apt-get clean &amp;&amp; apt-get update</p><p>RUN apt-get install -y locales</p><p>RUN localedef -c -f UTF-8 -i zh_CN zh_CN.utf8</p><p>ENV LANG zh_CN.utf8 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>通过Dockerfile 文件为linux images 添加新用户</title>
      <link href="/2021/11/02/tong-guo-dockerfile-wen-jian-wei-linux-images-tian-jia-xin-yong-hu/"/>
      <url>/2021/11/02/tong-guo-dockerfile-wen-jian-wei-linux-images-tian-jia-xin-yong-hu/</url>
      
        <content type="html"><![CDATA[<p>要求：<br>（１）增加一个新用户，名为mynewuser<br>（２）让这个用户有root权限<br>（３）设置其密码为mynewpassword<br>（４）container启动后以mynewuser登录,并且直接到mynewuser的home目录下</p><p>将下面代码片段放到Dockerfile里面。</p><p>RUN useradd –create-home –no-log-init –shell /bin/bash mynewuser<br>RUN adduser mynewuser sudoRUN echo ‘mynewuser:mynewpassword’ chpasswd<br>USER mynewuser<br>WORKDIR /home/mynewuser    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose搭建SkyWalking环境</title>
      <link href="/2021/11/02/shi-yong-docker-compose-da-jian-skywalking-huan-jing/"/>
      <url>/2021/11/02/shi-yong-docker-compose-da-jian-skywalking-huan-jing/</url>
      
        <content type="html"><![CDATA[<h3 id="一、环境说明"><a href="#一、环境说明" class="headerlink" title="一、环境说明"></a>一、环境说明</h3><p>Linux Centos7<br>ElasticSearch 7.13.1<br>SkyWalking 8.0.1    </p><h3 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h3><p>1.编写docker-compose.yml文件    </p><pre><code>version: &#39;3.3&#39;services:  elasticsearch:    #image: elasticsearch:7.8.0    image: elasticsearch:7.13.1    container_name: elasticsearch    restart: always    ports:      - 9200:9200    environment:      discovery.type: single-node      TZ: Asia/Shanghai    #volumes:    #   - ./elasticsearch/logs:/usr/share/elasticsearch/logs    #   - ./elasticsearch/data:/usr/share/elasticsearch/data    #   - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml    ulimits:      memlock:        soft: -1        hard: -1  oap:    image: apache/skywalking-oap-server:8.0.1-es7    container_name: oap    depends_on:      - elasticsearch    links:      - elasticsearch    restart: always    ports:      - 11800:11800      - 12800:12800    environment:      SW_STORAGE: elasticsearch7  # 指定ES版本      SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200      TZ: Asia/Shanghai    # volumes:      #  - ./config/alarm-settings.yml:/skywalking/config/alarm-settings.yml  ui:    image: apache/skywalking-ui:8.0.1    container_name: ui    depends_on:      - oap    links:      - oap    restart: always    ports:      - 8083:8080    environment:      SW_OAP_ADDRESS: oap:12800      TZ: Asia/Shanghai  elastichd:    image: containerize/elastichd:latest    container_name: elasticsearch-hd    restart: always    #networks:    #- net-es    ports:      - &quot;9800:9800&quot;    depends_on:      - &quot;elasticsearch&quot;    links:      - &quot;elasticsearch:demo&quot;  elasticsearch-head:    image: mobz/elasticsearch-head:5           container_name: elasticsearch-head    ports:      - &quot;9100:9100&quot; networks: net-es:   external: false</code></pre><h3 id="三-启动docker"><a href="#三-启动docker" class="headerlink" title="三.启动docker"></a>三.启动docker</h3><p>启动容器：docker-compose up -d</p><p>查看容器：docker-compose ps</p><p>删除容器：docker-compose rm</p><h3 id="四-验证"><a href="#四-验证" class="headerlink" title="四.验证"></a>四.验证</h3><p>浏览器中输入：<a href="http://localhost:8080/">http://localhost:8080</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux/CentOS设置全局代理（http）</title>
      <link href="/2021/11/02/linux-centos-she-zhi-quan-ju-dai-li-http/"/>
      <url>/2021/11/02/linux-centos-she-zhi-quan-ju-dai-li-http/</url>
      
        <content type="html"><![CDATA[<p>说明：为什么说是http代理，其实这个还不能说是全称走代理，罪名写的区别就是ICMP协议这个设置就无效，只能说是90%的应用都可以使用这个设置来实现代理访问，只有个别不行，比如一些软件根本不走http协议的，那么此种方法绝对不行；下面是讲解http的代理配置，以后会讲解全局级别的代理实现，其实也就是网关，配置网关绝对能100%，这里不做讲解。全局代理配置主要在于环境变量的设置。    </p><p>还有网上很多都说http配置代理不支持socks协议，其实是不对的。我测试的结果已经支持了。    </p><p>个人理解：我谈一下这个http_proxy的设置，首先，设置了这个变量不是说只会走http协议，上面我说的应该是普通认为会这样说的说法，我后面觉得上面已经是错误了，比如curl，git这些软件默认使用http_proxy这个环境变量来设置代理服务器，所以在linux下只要设置了这个环境变量就能被这些软件识别，而对于代理服务器用什么协议都行，比如使用http协议或者socks协议等。    </p><p>那么对于一些比如chrome和yum这些针对http_proxy可能不会生效，比如chrome用的是server_proxy这个变量，而且是在启动时设置才生效。    </p><p>下面是代理变量的配置：    </p><p>环境变量    描述    值示例<br>http_proxy    为http变量设置代理；默认不填开头以http协议传输    10.0.0.51:8080<br>user:<a href="mailto:&#112;&#x61;&#x73;&#115;&#64;&#49;&#x30;&#x2e;&#x30;&#x2e;&#x30;&#46;&#49;&#x30;">&#112;&#x61;&#x73;&#115;&#64;&#49;&#x30;&#x2e;&#x30;&#x2e;&#x30;&#46;&#49;&#x30;</a>:8080<br>socks4://10.0.0.51:1080<br>socks5://192.168.1.1:1080<br>https_proxy    为https变量设置代理；    同上<br>ftp_proxy    为ftp变量设置代理；    同上<br>all_proxy    全部变量设置代理，设置了这个时候上面的不用设置    同上<br>no_proxy    无需代理的主机或域名；<br>可以使用通配符；<br>多个时使用“,”号分隔；    <em>.aiezu.com,10.</em>.<em>.</em>,192.168.<em>.</em>,<br>*.local,localhost,127.0.0.1<br>针对上面变量的设置方法：    </p><p>1、在/etc/profile文件    </p><p>2、在~/.bashrc    </p><p>3、在~/.zshrc    </p><p>4、在/etc/profile.d/文件夹下新建一个文件xxx.sh    </p><p>写入如下配置：    </p><p>export proxy=”<a href="http://192.168.5.14:8118&quot;">http://192.168.5.14:8118&quot;</a><br>export http_proxy=$proxy<br>export https_proxy=$proxy<br>export ftp_proxy=$proxy<br>export no_proxy=”localhost, 127.0.0.1, ::1”<br>而对于要取消设置可以使用如下命令，其实也就是取消环境变量的设置：    </p><p>unset http_proxy<br>unset https_proxy<br>unset ftp_proxy<br>unset no_proxy<br>针对yum配置走代理：    </p><p>经过测试其实只要设置上面的变量之后已经可以走代理了，但如果要单独设置，可以设置如下文件的变量：    </p><p>echo “proxy=<a href="http://127.0.0.1:8080/&quot;">http://127.0.0.1:8080/&quot;</a> &gt;&gt; /etc/yum.conf    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker 安装ElasticSearch head</title>
      <link href="/2021/11/01/docker-an-zhuang-elasticsearch-head/"/>
      <url>/2021/11/01/docker-an-zhuang-elasticsearch-head/</url>
      
        <content type="html"><![CDATA[<p>github官网地址</p><p><a href="https://github.com/mobz/elasticsearch-head">https://github.com/mobz/elasticsearch-head</a></p><p>拉取镜像</p><p>docker pull mobz/elasticsearch-head:5<br>创建容器</p><p>docker create –name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5<br>启动容器</p><p>docker start elasticsearch-head<br>浏览器打开: <a href="http://ip:9100/">http://IP:9100</a></p><p>尝试连接elaseticsearch会发现无法连接上，由于是前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置，如下</p><p>修改docker中elasticsearch的elasticsearch.yml文件</p><p>docker exec -it elasticsearch /bin/bash<br>vi config/elasticsearch.yml<br>在最下面添加2行</p><p>http.cors.enabled: true<br>http.cors.allow-origin: “*”</p><p>退出并重启服务</p><p>exit<br>docker restart elasticsearch<br> 测试连接</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch 7.13.1在线安装ik分词，亲测有效</title>
      <link href="/2021/11/01/elasticsearch-7-13-1-zai-xian-an-zhuang-ik-fen-ci-qin-ce-you-xiao/"/>
      <url>/2021/11/01/elasticsearch-7-13-1-zai-xian-an-zhuang-ik-fen-ci-qin-ce-you-xiao/</url>
      
        <content type="html"><![CDATA[<p>进入容器</p><p>docker exec -it elasticsearch /bin/bash</p><p>执行安装命令</p><p>bin/elasticsearch-plugin install <a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.13.1/elasticsearch-analysis-ik-7.13.1.zip">https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.13.1/elasticsearch-analysis-ik-7.13.1.zip</a><br>验证<br>bin/elasticsearch-plugin list</p><p>容器重启<br>docker restart elasticsearch<br>ik分词器链接地址😊✔<a href="https://github.com/medcl/elasticsearch-analysis-ik/tags">https://github.com/medcl/elasticsearch-analysis-ik/tags</a>        </p><p>持久化<br>docker commit xxxxxxxx es/ik</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>删除^M</title>
      <link href="/2021/11/01/shan-chu-m/"/>
      <url>/2021/11/01/shan-chu-m/</url>
      
        <content type="html"><![CDATA[<p>linux下vim编辑文件出现^M是因为不同平台对于回车符的定义差异造成的：<br>windows：0D0A ‘/r/n’<br>unix\linux: 0A ‘/n’<br>MAC: 0D ‘/r’</p><p>当linux的文件在windows下编辑过，就容易出现^M符号，就是因为多了’/r’<br>解决办法：<br>1、dos2unix fileName 这个最简单，但是有些系统没有安装dosunix工具</p><p>2、sed -i ‘s/\r//g’ fileName 这个非常好使</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 Apache站点 强制https访问</title>
      <link href="/2021/11/01/centos7-apache-zhan-dian-qiang-zhi-https-fang-wen/"/>
      <url>/2021/11/01/centos7-apache-zhan-dian-qiang-zhi-https-fang-wen/</url>
      
        <content type="html"><![CDATA[<p>Apache版本2.4 </p><p>安装mod_ssl </p><p>yum install mod_ssl -y</p><p>apache配置<br>/etc/httpd/conf.d/ssl.conf<br>我把这下面的内容复制到另外一个文件中配置的</p><p><code>&lt;VirtualHost _default_:443&gt; ..... &lt;/VirtualHost&gt;</code><br>需要修改的几项</p><p>DocumentRoot “/var/www/example.com/public_html”</p><p>ServerName <a href="http://www.example.com:443/">www.example.com:443</a></p><p>SSLCertificateFile /etc/httpd/ssl/apache.crt<br>SSLCertificateKeyFile /etc/httpd/ssl/apache.key<br>重启apache</p><p>systemctl restart httpd.service</p><p>实现强制HTTPS访问</p><p>vim /etc/httpd/conf/httpd.conf</p><p>添加如下内容:</p><p>RewriteEngine On<br>RewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [R,L]</p><p>重启apache</p><p>systemctl restart httpd.service</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>招行每日答题赢积分【题库】</title>
      <link href="/2021/11/01/zhao-xing-mei-ri-da-ti-ying-ji-fen-ti-ku/"/>
      <url>/2021/11/01/zhao-xing-mei-ri-da-ti-ying-ji-fen-ti-ku/</url>
      
        <content type="html"><![CDATA[<p>招行APP每日答题活动，答题不限时，有的说难，索性收集了一些题目，给广大飞友参考，不定期更新。<br>若答案有疑问，请回复告知，欢迎大家分享题目~回复采纳，花花送上<br>每天答对5题可得10积分，每周六日另有瓜分场次。<br>【活动路径】招行APP–我的–积分–答题赢积分<br>有的题目描述容易【混淆】，请看清楚再作答。    </p><p>Q1：外国人查询到的信用报告为本国语言<br>A：错误<br>Q2：什么理论可以用来描述”小钱也有大用处”<br>A：拿铁理论<br>Q3：良性负债有利于财富的增长，能带来积极的回报，因此应该合理加以利用<br>A：正确<br>Q4：处于同一生命周期的个人，风险承受能力不同，其投资组合各大类资产配置比例也是不同的<br>A：正确<br>Q5：当您的固定额度不能满足消费需求时，可以向我行申请临时额度，关于临时额度，下列说法正确的一项是<br>A：申请和使用不会收取手续费用<br>Q6：使用招行信用卡在电商平台进行支付的时候，都是使用查询密码<br>A：错误<br>Q7：股票应该做集中投资才能赚大钱<br>A：错误<br>Q8：下列哪项不属于信用信息的来源<br>A：居委会走访调查<br>Q9：以下哪个是资产配置实际运用的有效案例<br>A：耶鲁大学捐赠基金<br>Q10：填写贷款/信用卡申请表时，为保护隐私，关键信息可以不填<br>A：错误<br>Q11：任何人、任何机构与任何组织无权知道您的银行卡取款密码、支付密码或短信验证码，您可拒绝任何企图索取您银行卡密码的要求<br>A：正确<br>Q12：您收到一条抽奖链接，中奖后需要您输入个人信息、卡片信息及密码，这种情况属于网络诈骗<br>A：正确<br>Q13：银行理财产品，是由商业银行自行设计并发行的产品，将募集到的资金投入金融市场，获取投资收益后，根据合同约定分配给投资人的一类理财产品，一般具有收益高且流动性也高的特色<br>A：错误<br>Q14：教育金规划需要：提前安排、专款专用、定期投入、安全第一<br>A：正确<br>Q15：我的常住地在上海并且在上海工作时申请了一张招行信用卡，如去往浙江，是需要区分”本地”和”异地”的,因为异地刷卡消费或网上支付，都会有手续费用<br>A：错误<br>Q16：资产配置就是做好资产的’荤素搭配’，家庭紧急预备金可以放在流动性强的资产中，教育金和养老金提前筹划，适当参与资本市场战胜通胀<br>A：正确<br>Q17：小鱼上网聊QQ,这时有人发来一条信息’轻松兼职,每天工作2小时,日入300元’，经了解对方说每单给5元钱手续费,会同购买商品钱一同打回到小鱼卡上。小鱼应该<br>A：不信,是骗子<br>Q18：为了保障网上购物的用卡安全，以下哪项措施可能存在风险隐患<br>A：使用生日作为密码<br>Q19：国家最权威的征信机构是?<br>A：中国人民银行征信中心<br>Q20：影响市场大盘走势的最基本因素<br>A：宏观经济与政策<br>Q21：掌握好负债比例至关重要，当资产的负债率低于3/4、负债比例低于收入的1/2时，家庭的财务是比较安全的。<br>A：错误<br>Q22：根据美国退休金十年期长期绩效的实证调查，91.5%投资报酬来源于<br>A：资产分配<br>Q23：当我们接触到一个新客户时，客户提交的基础材料应该与个人信息交叉验证<br>A：正确<br>Q24：对于大部分国内退休人群，其主要，也最稳定的收入来源是<br>A：政府退休金收入<br>Q25：资产配置中，权益类资产的作用是<br>A：获取高收益<br>Q26：初入社会小资族，工资薪水较低，已积累一定资金，理财收入为主，工资性收入为辅<br>A：错误<br>Q27：以下哪一项不属于现金流入<br>A：购房买车<br>Q28：银行信用卡能提供一定期限的免息时间，可以利用，如果用银行免息期需要有计划、不怕麻烦、执行力强，珍惜征信记录<br>A：正确<br>Q29：小明的招行信用卡是25号的账单日，那么他收到的5月账单中，一般不会包含下列哪一笔交易<br>A：5月26号ATM取现<br>Q30：被法院列入失信被执行人黑名单属于不良信息<br>A：正确<br>Q31：资产配置中，固收类资产的作用是<br>A：构建组合安全垫<br>Q32：本人信用卡可以借给自己的亲朋好友使用<br>A：错误<br>Q33：发现信用报告有错，申请异议时，应当携带本人有效身份证件。<br>A：正确<br>Q34：中国经济未来虽不能保持高速增长，但依然能够维持一定增速，因此仍能保证金融产品的刚性兑付<br>A：错误<br>Q35：在我国，存款产品最突出的特点是<br>A：安全性<br>Q36：按照七二法则，如果10年后要买房，需要手头上的资金翻倍，投资平均年化收益6%的产品则可实现翻倍。<br>A：错误<br>Q37：如果现在要给小孩规划教育金，但是目前的资金有缺口，以下哪些方面调整不可以帮助教育金的规划目标实现<br>A：买彩票<br>Q38：“征信”一词来仅指个人信用调查<br>A：错误<br>Q39：信用报告只有网上查询和现场查询两种途径<br>A：错误<br>Q40：阿基米德曾说’如果给我一个支点我能撬起地球’，所以说金融杠杆越高越好。<br>A：错误<br>Q41：下列哪项属于信用报告中最核心的信息<br>A：信贷信息<br>Q42：贝壳研究院报告显示，2018年首次置业购房者贷款成交占比90%，对贷款的依赖性更强<br>A：正确<br>Q43：房租收入大于房贷额度的负债属于资产性良性负债<br>A：正确<br>Q44：维护良好的信用记录应当认真履约，量入为出<br>A：正确<br>Q45：小赵收到一条短信，说他的手机号被快乐大本营节目组抽中，获得苹果笔记本电脑一台，需给栏目组汇1000元手续费及税款，小李没有理会，直接删除短信<br>A：正确<br>Q46：按七二法则，100万的本金，平均年化收益率为8%，多少年100万的本金能变成200万<br>A：9年<br>Q47：客户可以向法院申请强制执行金融机构修改数据<br>A：正确<br>Q48：一般来说股票PE在21-28之间说明可能被<br>A：高估<br>Q49：根据招行与尼尔森调研公司合作的《中产阶级白皮书》，中产阶级的子女教育水平超出总体平均水平多少<br>A：41万元<br>Q50：小东是某高校在校生，考英语四级前夕收到一条购买考试答案的信息，称一套答案1000元，小东马上联系了对方，并汇款1000元。<br>A：错误<br>Q51：只要客户有需要，征信中心都要免费为客户查询征信报告<br>A：错误<br>Q52:对于初入社会小资族，医疗险和意外险建议配置门槛为3%<br>A:错误<br>Q53:80年-17年，黄金拿过3年当年收益最佳冠军<br>A:错误<br>Q54:发现数据错误，在改/删之前，本人不能给错的信息加标注说明情况<br>A:错误 (265楼Challenge)<br>Q55:统计招商银行管理4万亿中高端客户资产结构，我们发现储蓄存款和单一理财产品占比达到76.7%，这种形态的资产配置，过去10年扣除通胀后的年化收益率仅为1.94<br>A:正确<br>Q56:给出入社会小资族配置建议中，短期理财的建议门槛是<br>A:20%<br>Q57:如果现在大学四年的总开销为150万，每年的学费涨幅为5%，20年大学四年的总开销为多少？<br>A:398<br>Q58:合理的房价收入比的取值范围为__倍，若高于这一范围，则认为其房价偏高<br>A:4-6<br>Q59:在线回答私密问题时，没有时间限制<br>A:错误<br>Q60:国内市场首批向公众发行的公募基金是封闭式基金吗<br>A:正确<br>Q61:2018年购房者人均居住面积为27.8平，其中24.3%的购房者人均居住面积不到20平方米，相当于三口之家住房不到60平方米<br>A:正确<br>Q62:根据招行与尼尔森调研公司合作的《中产阶级白皮书》显示，高资产量的中产阶级平均为子女规划153万元教育准备金，为中资产量与低资产量人群比例的两倍以上。<br>A:正确<br>Q63:所有银行都接受数字证书和银行卡进行身份验证。<br>A:错误<br>Q64:初入社会小资族来说，承担家庭责任较少，有更长的时间来弥补风险损失，因此承担风险承受能力较强<br>A:正确 （感谢@Fatiger 更正）<br>Q65:小久妹刚刚毕业参加工作，目前是“月光族”，对于小久妹来说，目前理财最重要的是下列哪项？<br>A:存钱<br>Q66:每张招行信用卡（外币单标卡除外）都可以设置是否需要在刷卡时验证交易密码，如设为需验证密码，称作开通“刷卡验密功能”，持卡人可以依据个人使用习惯，选择在刷卡时是否验证密码。<br>答案：正确<br>Q67:客户信用有变，应当立即通知银行。<br>答案：正确<br>Q68:企业如果破产，资产变卖后在全面偿还优先股股东后才由普通股股东分享<br>答案：正确<br>Q69:相较于股票，债券收益率波动较小，但收益向上空间较为有限。<br>答案：正确<br>Q70:下面哪项属于长期规划目标?<br>A:子女教育<br>Q71:哪一项风险可以自留<br>A:蚊虫叮咬<br>Q72:网上查询信用报告时，如果已经通过了身份验证，还是可以重新注册<br>A:错误<br>Q73:马克维兹理论中，多少百分比的报酬来源于理想的资产配置？<br>A:91.5%<br>Q74:针对每年保费支出，通常建议大概占比年收入的20%<br>A:正确<br>Q75:如果某先生小孩出国留学需要530万，当前家庭总资产130万，如果按他目前理财的平均年化收益4%来算，10年后总资产约能够增值到180万，可是距离儿子出国留学的总费用仍然有350万左右的差距，所以他的儿子无法出国留学了。<br>A:错误<br>Q76:怎样才是好的现金流管理？<br>A:收入-存下=支出<br>Q77:每月发薪日的第二天适合小白客户定投，答案是正确还是错误？<br>A:正确<br>Q78:下列哪项不属于“创富”守则？(易和Q143混淆)<br>A:改变用钱观念<br>Q79:下列哪项属于征信机构的特征<br>A:不从事放贷业务<br>Q80:恐惧是应激反应，是保护自己，但是不合理的恐惧需要科学的克服<br>A:正确<br>Q81：如果您认为征信报告有错误，提出异议，对异议处理结果不满意，只能选择诉讼解决<br>A：错误<br>Q82：早晨李阿姨的儿子上班后，李阿姨接到一个外地座机电话打来，对方操着外地口音说她儿子出了车祸正在X医院抢救，需给医院账户汇5000元抢救费，李阿姨正确的做法是<br>A：联系儿子核实<br>Q83：征信基础产品是什么<br>A：信用报告<br>Q84：首次申请招行信用卡，可以不提供身份证明，使用财力资料替代也是可以的。<br>A：错误<br>Q85：对于已经退休的投资者来说，考虑的主要是养老以及财富传承的问题，通过终身寿险的指定分配功能起到定向传承作用，避免家庭纠纷，并搭配年金保险稳定增值特性获得养老补充，是较为合理的。<br>A：正确<br>Q86：针对现金类资产，我们通常建议至少留足()的生活支出。<br>A：6个月<br>Q87：债券相比于股票，波动性更大<br>A：错误<br>Q88：接到快递员电话，要求提供手机动态验证码进行身份确认，这种情况属于不正常。<br>A：正确<br>Q89：存钱的开始步骤是<br>A：记账<br>Q90：以下哪个不是金融杠杆<br>A：全款买车<br>Q91：某同学一日收到一号码尾号为95555的手机短信，提醒自己网银到期，请点击附加网站进行更新，他便按照提示进行操作，这样的做法对不对？<br>A：错误<br>Q92：国务院在（）印发了《关于进一步深化城镇住房制度改革加快住房建设的通知》<br>A：1998年<br>Q93：财务规划目标分为长期目标和短期目标<br>A：正确<br>Q94：张小姐加入一个海外代购的群，张小姐让群主代为购买价值4万元的皮包一个，但是在汇款后却迟迟没有收到货物，群主也将张小姐踢出了微信群，此时张小姐应该如何做？<br>A：立刻报警<br>Q95：4008205555是招商银行信用卡的客户服务热线号码。<br>A：正确<br>Q96：租房住容易出现各种不良经历，从而在满足个人居住需要的质量上要低于自有住房，这是抬高个人购房意愿的主要原因之一<br>A：正确<br>Q97：黄金VS股票， 两者常常呈现正向关系，主要原因是黄金具有避险属性，股票的下跌激发黄金的避险需求，带动金价上涨。两者搭配，可对冲股票系统性风险。<br>A：错误<br>Q98：教育金的规划不仅要看当前的学费水平，还要考虑学费的增长率；不仅要关注当前的生活费水平，还要考虑通过膨胀率。<br>A：正确<br>Q99：过去十年，常见的投资工具没有一类收益率能年年冠军，即使是冠军次数最多的黄金，也曾在2013年大跌接近多少？<br>A：30%<br>Q100：意外保障型保险主要功能是为了获取高额的分红收益。<br>A：错误<br>Q101：每月还贷占月收入比例超过（），就会陷家庭于飘摇境地<br>A：50%<br>Q102：放贷机构查询、报送客户的信用信息可以不经过客户同意<br>A：错误<br>Q103：子女教育费用需要考虑的问题不包含<br>A：子女婚假金<br>Q104：耶鲁大学通过资产配置的方式管理其名下的捐赠基金，过去30年年化收益高达<br>A：13%<br>Q105：资产配置之前需要综合考虑流动性、收益性、风险性之间的关联<br>A：正确<br>Q106：使用招行信用卡支付后退货，如果退款已经处理完成并入账，则一定可以冲抵本期应还账单。<br>A：错误<br>Q107：不超过自身风险承受能力，不投资不懂的产品，不过度借钱投资<br>，不盲从跟风投资，能够有效的避免投资风险。<br>A：正确 （271楼肉测正确，249楼Challenge，仅供参考）<br>Q108:下列哪项关于理财工具的说法不正确<br>A：现金类就像船的风帆<br>Q109：发现错误数据，在改/删之前，征信中心会给错的信息加标注说明情况。<br>A：正确<br>Q110：贪婪是不对的，所以我们要完全避免贪婪<br>A：错误<br>Q111：《征信业管理条例》规定只要违约就算不良，哪怕只有一天<br>A：正确<br>Q112:征信中心从第三次查询时开始收取费用，一次费用为多少钱？<br>A：10元（已经更正）<br>Q113：发现信用报告有错，必须本人亲自申请异议<br>A：错误<br>Q114：如果您要在公共场合下查看银行卡账户（如图书馆或咖啡厅），请注意安全并建议在结束查看后在安全的网络环境下更改密码。<br>A：正确<br>Q115：信用报告，是征信机构提供的关于企业或个人信用记录的文件。<br>A：正确<br>Q116:对以小久妹为代表的初入社会小资族，建议留存–时间生活费作为备用金？<br>A：3-6个月<br>Q117:自身或亲友遭遇了诈骗，欠款已汇出，应与多长时间内报案追回被骗钱财几率更大？<br>A：24小时<br>Q118:如果法院判决要求报送数据的金融机构修改数据，金融机构可以不履行判决。<br>A：错误<br>Q119:以下不属于定期型存款的是？<br>A：智能通知存款<br>Q120:根据贝恩咨询的《中国私人财富报告》，国内企业家们的哪一项收入近年来呈现下降趋势？<br>A：企业经营收入<br>Q121:以下哪项不是纪律投资的表现？<br>A：按时定投<br>Q122:教育金规划不需要考虑日常生活开支，要把所有的费用全部考虑规则起来。<br>A：错误<br>Q123:小陈通过微信摇一摇添加了一位头像靓丽的姑娘，两人聊天十分投缘，某天姑娘突然对小陈说，家人得了重病，向他借2万元给家人治病，小李此时应该？<br>A：直接拒绝<br>Q124:信用报告中信贷信息部分能够体现客户3年内的逾期及违约行为。<br>答案：错误<br>Q125:流动性常常被投资者忽视，一般除了需要预留6个月的生活开支外，还需要一部分的应急资金，所以需要做好短期、中期、长期的期限搭配。<br>答案：正确<br>Q126:中国人民银行征信中心为国家最权威的征信机构。<br>答案：正确<br>Q127:投资三要素是安全性、风险性和收益性<br>答案：错误<br>Q128:征信中心有权（可以）修改金融机构的数据<br>A：错误<br>Q129:客户对征信报告提出异议，如果经查贷款记录与征信报告相符，也需要帮助客户修改数据<br>A：错误<br>Q130:哪项原则是征信机构最基本的职业道德，也是征信立法的主要内容之一<br>A:隐私商业秘密保护原则<br>Q131:重复<br>Q132:2006年左右，居民理财渠道较为单一，都在（）上<br>A：存款、国债<br>Q133:以下哪种是追涨杀跌的表现<br>A：指数越高越疯狂<br>Q134:如果客户已经打款，即使钱还没到账户，也算还款<br>A：错误<br>Q135:某城的一套房子1000万，首付30%就能搞定，相当于是用300万撬动了这1000万的房产<br>A:正确<br>Q136:信用卡消费签名前，需要仔细核对卡号，消费金额，币种是否正确。<br>A:正确<br>Q137:对于三明治族的资产配置要点，以下哪些说明不正确？<br>答案：降低风险偏好，投资稳定资产<br>Q138:哪些属于负面信息？<br>答案：未按合同约定还款<br>Q139:目前不良信息在征信报告的存续时间为多久<br>A：5年<br>Q140:贝壳研究院研究发现，影响换房需求有三大核心要素，哪一项不是核心要素？<br>A：价格更优惠<br>Q141:（重复）<br>Q142:信用财富在信用报告中保留5年<br>A:错<br>Q143:下列哪项不属于“享富”守则？(易和Q78混淆)<br>A:为资产做好的多元配置和科学规划<br>Q144:70后三大件 手表 自行车 缝纫机<br>Q145:e租宝涉及90万…<br>A：错<br>Q146:哪些不属于信用报告记录的信息<br>A:金融负债信息<br>Q147:下列哪项不属于征信的原则<br>A:有效性<br>Q148:如果信用报告出现错误，客户提出异议，对异议结果不满意，以下哪项不属于救济方式<br>答案:上访<br>Q149:2018年4月27日，我国发布了《关于规范金融机构资产管理业务的指导意见》（即资管新规），旨在规范金融机构资产管理业务，以下不属于资管新规发布后对银行理财产品的影响是？<br>A:将出现更多3个月以内短期理财<br>Q150：哪些属于不良信息(易和Q263混淆)<br>A：严重违约<br>Q151：在投资理财中，由于存款产品收益都非常低，所以完全无需在投资组合中选择存款产品。<br>A：错误<br>Q152：征信报告中可以查询到我有几次“恶意欠款”。<br>A：错误<br>Q153：发现数据错误，金融机构不改，可以向法院起诉。<br>A：正确<br>Q154：已经步入退休的银发老年族(60岁以上),最主要的理财工具是<br>A：银行理财、存款<br>Q155：发现征信报告有错，可以携带个人护照申请异议。<br>A：正确<br>Q156：大多数人选择的还贷收入比为？<br>A：0-30%<br>Q157：在部分境外商户通过国际组织线路进行消费时，刷卡消费一般不需要输入交易密码。<br>A：正确<br>Q158：黄金和股票通常呈现反向关系<br>A：正确<br>Q159：换手率是指风险和收益的性价比，反映了单位风险基金净值增值率超过无风险收益率的程度<br>A：错误<br>Q160：在餐厅结账时,卡片可以交给服务员拿到收银处自行刷卡结算。<br>A：错误<br>Q161：债券相较于股票，收益向上空间较为有限,但收益率波动也较小,适合风险相对较低客户。<br>A：正确<br>Q162：问题验证是指在线回答”私密性问题”的方式验证您的身份。<br>A：正确<br>Q163：定投越早进场越好<br>A：正确<br>Q164：负债比例低于收入的__时，家庭的财务是比较安全的<br>A:1/3<br>Q165：股票型基金：将__以上的资金投向股票的基金<br>A：80%<br>Q166：不属于人性特征<br>A：人云亦云<br>Q167：法院和政府部门查询信用报告也会体现在信用报告中。<br>A：错误<br>Q168：周某为一家公司的会计…最近刚学会网银购物,他开通哪种网银最合适<br>A：专门办理一张银行卡<br>Q169：基于征信工作的哪项原则,征信机构应该给予被征信人一定的知情权和申诉权<br>答：真实性<br>Q170:信用报告出错无法修改<br>A：错误<br>Q171:三明治族资产配置主要原则：长短搭配，专款专用，多元化配置<br>A：正确<br>Q172:影响大盘走势的最基本因素<br>A：宏观经济与政策<br>Q173:不是影响评估风险承受能力的因素<br>A：持有另类资产的比例<br>Q174:教育支出为刚性<br>A：正确<br>Q175:对于职场新人，由于所积累的财富较少，应采取保守型投资更为妥当。<br>A：错误<br>Q176:征信中心目前支持与中国金融认证中心（CFCA)合作的银行发放的数字证书<br>答案：正确<br>Q177:下列哪项不属于常见投资雷区<br>A：不敢进场<br>Q178:根据住房公积金和养老保险记录，我们可以确定客户当前的工作单位，结合缴费比例，可以测算出客户的收入情况。<br>A：正确<br>Q179:请选出我行网址<br>A：<a href="http://www.cmbchina.com/">www.cmbchina.com</a><br>Q180:在子女教育方面，增加保障类配置，确保专款专用的现金流，以备不时之需。<br>A：正确<br>Q181:基金类的强制储蓄小工具是什么<br>A：基金定投<br>Q182:通过征信中心官方网站查询个人信用报告，不需要本人实名注册<br>A：错误<br>Q183:不属于客户的征信权利<br>A：诉讼权<br>Q184:法院冻结个人账户后，应以__方式通知<br>答：法院文书<br>Q185:货币实际需求大于货币供给会导致货币贬值<br>A：错误<br>Q186:如果客户信用记录很差，征信中心可以拒绝为客户查询信用报告。<br>A：错误<br>Q187:健康保障型保险可以在一定程度上解决无钱医病及因病致贫的问题。<br>A：正确<br>Q188:债券VS股票，相较于股票，债券收益率波动较小，但收益线上空间较为优先，两者组合配置，可降低组合波动，提升组合收益空间。<br>A：正确<br>Q189:健康保障型保险可以在一定程度上解决无钱医病及因病致贫的问题。<br>A：正确<br>Q190:72法则指通过固定收益投资是本金翻倍的时间=72/投资回报率<br>A：正确<br>Q191:逾期发生，客户应该立即还款，实在有困难，可以与银行协商。<br>A：正确<br>Q192：灵活性原则指征信机构在采集信息时要尽量实现实时跟踪，能够使用被征信人最新的信用记录，反映其最新的信用状况。<br>A：错误<br>Q193：教育金规划三步走不包含哪一步？<br>A：多不多<br>Q194：征信报告应充分披露任何能够体现被征信人信用状况的信息，这反应了征信机构再生成信用报告时应当遵循哪项原则<br>A:全面性原则<br>Q195:配置组合建立后，如果入场时机不好，正收益概率就会小<br>A:错误<br>Q196:一般情况下，黄金与股票呈现的关系是怎样的？<br>A:反向关系<br>Q197:任何一张银行卡都能验证<br>A:错误<br>Q198:网上查询信用报告时，如果没有通过身份验证，可以重新注册 (Q72相似)<br>A：正确<br>Q199:以下哪一种信用卡信息是可以告诉其他人的<br>A:以上都不可以<br>Q200:三个月前，汪某向朋友洪某借钱。。。<br>A:错误<br>Q201:正面信息是指您拥有贷款或信用卡且正常还款的信息<br>A:正确<br>Q202:配置建立后，任一天进场，持有越久，收益更高<br>A:正确<br>Q203:信用报告最好经常查询<br>A:错误<br>Q204:为保障您的权益，请您在银行卡背面签名条签上本人姓名<br>A:正确<br>Q205:小明为了方便妈妈网上购物 。。。。 留给了妈妈<br>A:错误<br>Q206：对客户自己提供的信息，放贷机构要从其他渠道核实真伪，信用报告只是放贷机构信贷决策的参考因素之一。<br>A：正确<br>Q207:《征信业管理条例》规定的异议处理时间为20天<br>A：正确<br>Q208:对于三口之家，支出压力大，应采取进取型投资获取更多收益。<br>A：错误<br>Q209:财富传承可以通过年金保险、金葵花信托、权益类基金<br>A：正确（已经更正）<br>Q210：如选择对招行信用卡的美元账单进行购汇还款，则当期购汇金额不能超过当期美元账单金额，购汇汇率为还款当日10点公布的招商银行美元卖出价。<br>A：正确<br>Q211:使用指定范围外的银行卡也可以查信用报告<br>A：错误<br>Q212：2001年公募基金行业迎来了首只开放式基金<br>A：华安创新基金<br>Q213：商业银行柜台无法查询征信报告<br>A：错误<br>Q214：征信中心整合数据都会是自动操作，不会产生错误。<br>A：错误<br>Q215：基金过去的绩效也代表未来的绩效。<br>A：错误<br>Q216：信用报告有错误是指客户认为信用报告与其记忆不同，但不一定真错。<br>A：正确<br>Q217:某客户信用报告借贷信息数字显示为7，说明该客户<br>A：逾期<br>Q218:根据帆船理论，保障类资产代表<br>A：救生圈<br>Q219:按照财富小船理论，船体的哪个部位代表的保障类需求？<br>A：救生圈<br>Q220:地铁上有人让你扫她的二维码 。。。<br>A：错误<br>Q221:采集、加工、分析和对外提供信用信息服务的相关制度和措施的总称是<br>A：征信体系<br>Q222:某位好友跟你说她的一个投资理财项目赚了钱，建议你也去试试，这是你应该保持警惕<br>A：正确<br>Q223:下列不属于贝壳研究院对2018年购房结论的是？<br>A：年龄越小月供负担越小<br>Q224:下列哪项不属于维护良好信用记录的方法<br>A：经常查询信用报告<br>Q225:当客户在没有POS机或不能联网的情况下（如国际航班），可以使用手工压单的操作进行信用卡交易，这也是信用卡的一种付款方式。<br>A：正确<br>Q226:储蓄型保险可以实现哪些功能<br>A：以上都对<br>Q227:按照2018年10月公布的通货膨胀率2.5%来计算，在20年后，100万等于现在多少钱的购买力？<br>A：60.27万<br>Q228:信用报告出错，客户委托代理人申请异议时，委托代理人需要带上授权委托书复印件。<br>A：错误<br>Q229:下列哪项属于信用报告出错的原因<br>A：以上全选<br>Q230：过去二十年，人们主要考虑的是如何富起来，未来二十年，考虑更多的则是如何富下去。<br>A：正确<br>Q231：信用卡消费后想怎么还款就怎么还款，无时间规定。<br>A：错误<br>Q232：优先获得股息，预先定好股息收益率，不受公司经营状况影响。<br>A：正确<br>Q233：收入-储蓄=支出是应该改进的存钱方案<br>A：正确<br>Q234:中国的股票认购最早由财政部<br>A：错误<br>Q235:适当利用杠杆投资是可以的<br>A：正确<br>Q236:搞清楚自己理财目标比怎么去配置重要<br>A：正确<br>Q237:信用卡支付过程中密码应妥善保管。。。<br>A：正确<br>Q238:以下哪一项服务不属于银行投融资业务的服务范围<br>A：现金存取款业务<br>Q239：不良信贷信息是指没有按时足额还款的信息。<br>A：正确<br>Q240：2018年全国购房者中80后占比达47.8％，近年来虽然90后逐渐深入市场，不过80后仍旧占据半壁江山<br>A：正确<br>Q241:征信报告出错,办理异议的地点为中国人民银行总部。<br>A：错误<br>Q242:坚持下列哪项原则，是征信工作最重要的条件<br>A：真实性<br>Q243：客户的历史信用记录仅包含负面信息。<br>A：错误<br>Q244：2018年购房者平均年龄为<br>A：29.5<br>Q245:给初入社会小资族配置建议中，基金定投的建议门槛是？<br>A：60%<br>Q246:每年免费查询几次征信报告 or 征信中心有义务每年为您提供几次免费查询服务<br>A：2次<br>Q247:在交易的乙方承诺未来偿还的前提下，另一方为其提供商品或服务的行为是哪一概念的定义<br>A:信用<br>Q248:将资金分为三部分:要花的钱,保障的钱,生钱的钱<br>A:正确<br>Q249:招行信用卡在pos机上刷卡消费没有手续费<br>A:正确<br>Q250:初入社会小资族资产配置主要原则为：简单组合配置、纪律投资？<br>A:正确<br>Q251:网上通过问题验证查信用报告时，需要在线回答几个私密问题<br>A:5个<br>Q252:所有的衣食住行的开支都属于现金流出。<br>A:正确<br>Q253:客户经理录入客户信息有误时，只能通过诉讼途径对客户经理提出诉讼解决。<br>A:错误<br>Q254:网上查信用报告，进行问题验证时答案不需要与信用报告中的信息一致<br>A:错误<br>Q255:适当赚钱可以设立为理财目标，只要收益率合理就可以。<br>A:错误<br>Q256:三次不良后，信用报告将会终身记录。<br>A:错误<br>Q257：信用报告出错，如果是因为自己填写信息有误，则不能修改<br>A：错误<br>Q258：海购时在支付界面中常见的VBV （Verified by VISA）的意思是指的“VISA验证”，指的是一项持卡人的身份识别的验证服务。<br>A：正确<br>Q259：上证指数6124点出现在哪一年？<br>A：2007年<br>Q260:财富传承的工具有年金保险、终身寿险、金葵花财富信托等。<br>A:正确<br>Q261:（重复）<br>Q262:如果需要获得未来持续稳定的回报，那么投资周期应该更（）<br>A:长<br>Q263:下列哪项不属于不良信息（易和Q150混淆）<br>A:离婚信息<br>Q264:疾病风险目前的患病率越来越高，治疗费用也很高，但是随着医疗技术的发展治愈率逐步越来越高。<br>A:正确<br>Q265:当亏损达到50%的时候，需要上涨 才能回本<br>A:100%<br>Q266：资产配置是指根据投资需求，将投资资金在不同资产类别之间，进行分配<br>A：正确<br>Q267：下列哪项关于投资三要素说法不正确？<br>A：收益越高、风险越小<br>Q268：发现信用报告出现问题，不提异议纠正也没有不良后果。<br>A：错误<br>Q269：基金投资越分散，这样可以使得投资者不会过度暴露于单一风险之中，但基金的获利能力可能因此有所减弱。<br>A：正确<br>Q270:在征信中心查询信用报告一周之后可以获得结果<br>A:错误<br>Q271:金融机构在修改错误数据时都能够做到及时不滞后。<br>A:错误<br>Q272:发现信用报告有错误，申请异议，异议处理最少30天。<br>A:错误<br>Q273:信用报告出错，如果是印尼为自己填写信息有误，则不能修改。<br>A:错误<br>Q274:学费年年涨价，规划时不需要考虑增值速度。<br>A:错误<br>Q275:因遭受意外伤害造成去了、残疾、支出医疗费或暂时丧失劳动能力的风险指的是什么风险？<br>A:意外风险<br>Q276: 投资风险属于<br>A：广义的风险<br>Q277:商业柜台无法查询信用报告<br>A:错误<br>Q278:风险的特征不包含哪项？<br>A:确定存在<br>Q279：尼尔森调研对于中产阶级的教育费用调研显示：<br>A：中产阶级需要更好的子女教育规划<br>Q280:负面信息是指未按合同约定还款的信息<br>A:正确<br>Q281:外国人不能在征信中心查询信用报告<br>A:错误<br>Q282:不良报告 10年后消除。<br>A:错误<br>Q283：黄金和股票组合，可以对冲股票的非系统性风险<br>A：错误<br>Q284:下列哪项不属于长期规划<br>A:买车规划<br>Q285:合理消费带来的信用卡负债属于消费性良性负债<br>A:正确<br>Q286:征信机构是指依法设立，以盈利为目的的放贷机构。<br>A:错误<br>Q287:按照信用卡的结算货币方式不同，可以分为磁条卡和芯片卡。<br>A:错误<br>Q288:普通股股息不受公司经营状况影响<br>答：错误<br>Q289：净值型理财产品没有明确的预期收益率，产品收益以净值（资产组合的单价）的形式公布，因此能更为准确、真实、及时地反映所投资资产的价值。<br>A：正确<br>Q290：资产配置中，另类资产的作用是<br>A:分散风险<br>Q291:修改/删除数据，必须由金融中心操作。<br>A:正确<br>Q292:通过征信中心官方网站可以查询他人的信用报告吗？<br>A：错误<br>Q293：恶性负债就是一种财务“黑洞”，会使借款人背上沉重的财务负担，受到财务压力，甚至陷入财务困境。<br>A：正确<br>Q294：对比全球各地，中国人的买房平均年龄更为年轻化。<br>A：正确<br>Q295：现代社会中，黄金虽然不再作为直接进行流通的货币，但仍然具有独一无二的保值增值功能。<br>A：正确<br>Q296:发现信用报告有错误，可以向贷款机构或征信分中心提出异议并要求更正。<br>A：正确<br>Q297：征信系统只有责任清晰才能保证正新数据的准确性、客观性<br>A：正确<br>Q298:还贷收入比60%是危险线，仅适用于而且仅适用于工作稳定、没有孩子、个人年龄较小、升值潜力较大的人群<br>A:错误<br>Q299:自查信用报告是《征信业管理条例》赋予客户的什么权利？<br>A:知情权<br>Q300:发现信用报告有错误，申请异议，如果个人信用报告与贷款合同还款记录真实情况相符，也要按照客户要求修改报告。<br>A:错误<br>Q301：国内高净值人群对于股权投资更感兴趣，而对于资产安全性要求不高。<br>A：错误<br>Q302：社会信用体系的最终目标是形成良好的社会信用环境。<br>A：正确<br>Q303：下列关于负债规划说法不正确的是？<br>A：借款先借低的，还款先还低的<br>Q304;如果发现数据错误，金融机构要派人去征信中心修改数据。<br>A:错误<br>Q305我的户口在广东深圳，是可以在北京查询到自己的信用报告。<br>A:正确<br>Q306招行发行的银联IC芯片信用卡，符合中国金融集成电路卡规范标准，可在带有银联和QuickPass闪付标识的机具上使用，使用地区也包括境外区域<br>A:正确<br>Q307:股票认购证 财政部 90年代初 新股<br>A:错误<br>Q308：IAC公司，号称首创“蚂蚁传播”模式。用户花钱购买“种子”后，种子按会员等级以1%-2.8%的速度生长，收割后可以回收本利，年化收益365%-1022%，请问IAC公司性质是？<br>A：网络传销<br>Q309以下哪项不是基金定投的特点<br>A：获得超高收益<br>Q310:申请招商银行信用卡可以通过代办公司进行办理<br>A:错误<br>Q311:对于35岁中年白领来讲，哪一项不属于当前主要的支出费用<br>A:自己养老<br>Q312-风险的特征不包含哪项？<br>A:确定存在<br>Q313：最低还款额是指您每月最低需偿还的金额，显示在当月账单上。当月可在到期还款日期前，按时还足最低需要偿还的金额，不会影响您的个人信用记录，但不再享受免息待遇。A：正确<br>Q314目前不良记录在征信报告上存续时间为结清不良记录后几年<br>A：5年<br>Q315：每月工资进来，先存钱、再花钱，才能扎实的存下钱<br>A：正确<br>Q316：有效性原则，指征信工作要做到资料全面，内容明晰<br>A：错误<br>Q317:信用卡的卡号、有效期都是不重要信息，可以随便发给陌生人知道。<br>A:错误<br>Q318:以下哪项不应作为选购银行理财产品时的主要参考因素？<br>A:赠送礼品<br>Q319:在公共网吧、使用公共WIFI查询、保存信用报告<br>A:错误<br>Q320:随着货币发行量的增长，黄金价格不断上涨，因此黄金能够在一定程度上抵御通货膨胀<br>A:正确<br>Q321:2014年1月2日，唐某买了辆东风日产汽车。8日，唐某接到电话，对方称是东风日产汽车…告诉唐某可以享受汽车节能退税的优惠。唐某于是持工行银行卡，来到自动柜员机上，按照对方的提示进行操作。这样的做法对不对？<br>A:错误<br>Q322:法院和政府部门查询信用报告会记录在查询记录里<br>A:错误<br>Q323:通胀会使我们所持有的现金的购买力不断降低<br>A:正确<br>Q324:每月工资进来，先存钱、再花钱，才能扎实的存下钱<br>A:正确<br>Q325:预备成家的资深上班族(30岁左右),面对的理财现状是<br>A:结婚、买房开支大<br>Q326:教育支出为刚性支出，为避免突发情况影响孩子教育，应设立专款专用的储备金<br>A:正确<br>Q327:融资融券是指提供担保物，借入资金买入证券（融资）或借入证券并卖出（融券）的行为。<br>A:正确<br>Q328:对外担保不是债，不需要承担偿还义务<br>A:错误<br>Q329:资产配置不是一体成型，而是量体裁衣，风险承受力不同，各大类资产投资比例也不同。<br>A:正确<br>Q330:征信报告查询的越多越好<br>A:错误<br>Q331:还款有难处可以联系银行，免除还款<br>A:错误<br>Q332:网上查信用报告时,无需提供手机号码<br>A:错误<br>Q333:以下哪个渠道不可以参与招行信用卡积分抽奖？<br>A:滴滴出行<br>Q334:现在招行信用卡公众号底部菜单栏有几个选项?<br>A:3<br>Q335:中国的股票认购证最早是90年代初由财政部提出发行的用以认购新股的凭证。<br>A:错误<br>Q336:使用问题验证但无法通过验证可能是因为本人当前真实信息与征信系统中的信息不一致<br>A:正确<br>Q337:不良记录在不良行为终止后，在信用报告中保存10年后删除<br>A:错误<br>Q338:对于印有个人信息的快递单等纸张应如何处理？<br>A:将重要信息掩盖撕毁<br>Q339:在酒店入住或租车时，商家一般会使用招行信用卡预扣一定金额作为押金，并在消费完成后再次刷卡实际结算，此类交易通常被称为“预授权交易”，这也是信用卡使用过程中的一种常见的交易形式？<br>A:正确<br>Q340:预借现金是招商银行信用卡的基本功能之一，该功能为持卡人提供小额现金借款，无需预先存款，持卡人即可通过提取现金或透支转账的方式获取资金，同时预借现金可以享受免息还款待遇，只要在账单出来后及时还清，就不需要额外支付手续费或利息？<br>A:错误<br>Q341:理财只是工具，美好生活才是目的？<br>A:正确<br>Q342:下列哪项不属于信用报告记录的内容<br>A:金融负债信息<br>Q343:信用评分是在信息主体信息的基础上,运用统计方法,对消费者或中小企业未来信用风险的一种综合评价<br>A:正确<br>Q344:2001年9月，我国诞生了第一只开放式基金( )，使我国基金业发展实现了从封闭式基金到开放式基金的历史性跨越<br>A:华安创新基金<br>Q345:投资理财产品时，只要选择收益高的就行了，无需关注产品风险、流动性。<br>A:错误<br>Q346:小额免密免签是银联和发卡银行共同为信用卡持卡人提供的一种小额快速支付服务。当持卡人使用具有“闪付”功能的金融IC卡，在指定商户进行一定金额以下的交易时，只需将卡片或移动设备靠近POS机等受理终端的“闪付”感应区，即可完成支付。支付过程中，持卡人不会被要求输入密码，也无需签名<br>A:正确<br>Q347:70年代，年轻人筹备婚礼需要的三大件是<br>A:手表、自行车、缝纫机<br>Q348:不良征信记录不会影响客户办理信用卡<br>A:错误<br>Q349:一只基金可以有多个基金经理管理吗？<br>A:可以<br>Q350:证券投资基金在世界各国的称谓是否相同？<br>A:不相同<br>Q351:储蓄黄金可以抵御通货膨胀吗？<br>A:可以<br><img "" class="lazyload placeholder" data-original="/images/pasted-35.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="多谢打赏"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yum安装epel源</title>
      <link href="/2021/10/28/yum-an-zhuang-epel-yuan/"/>
      <url>/2021/10/28/yum-an-zhuang-epel-yuan/</url>
      
        <content type="html"><![CDATA[<p>国内yum源的安装(163，阿里云，epel)</p><p>—-阿里云镜像源</p><p>1、备份</p><p>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</p><p>2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/</p><p>CentOS 5</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-5.repo">http://mirrors.aliyun.com/repo/Centos-5.repo</a></p><p>或者</p><p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-5.repo">http://mirrors.aliyun.com/repo/Centos-5.repo</a></p><p>CentOS 6</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-6.repo">http://mirrors.aliyun.com/repo/Centos-6.repo</a></p><p>或者</p><p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-6.repo">http://mirrors.aliyun.com/repo/Centos-6.repo</a></p><p>CentOS 7</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>或者</p><p>curl -o /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.aliyun.com/repo/Centos-7.repo">http://mirrors.aliyun.com/repo/Centos-7.repo</a></p><p>3、之后运行 yum clean all，yum makecache 生成缓存</p><p>—-163镜像源</p><p>第一步：备份你的原镜像文件，以免出错后可以恢复。</p><p>mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup   第二步：下载新的CentOS-Base.repo 到/etc/yum.repos.d/</p><p>CentOS 5</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS5-Base-163.repo">http://mirrors.163.com/.help/CentOS5-Base-163.repo</a></p><p>CentOS 6</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS6-Base-163.repo">http://mirrors.163.com/.help/CentOS6-Base-163.repo</a></p><p>CentOS 7</p><p>wget -O /etc/yum.repos.d/CentOS-Base.repo <a href="http://mirrors.163.com/.help/CentOS7-Base-163.repo">http://mirrors.163.com/.help/CentOS7-Base-163.repo</a></p><p>3、之后运行 yum clean all，yum makecache 生成缓存</p><p>—-EPEL源</p><p>EPEL（Extra Packages for Enterprise Linux）是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS等提供高质量软件包的项目。装上了 EPEL，就像在 Fedora 上一样，可以通过 yum install 软件包名，即可安装很多以前需要编译安装的软件、常用的软件或一些比较流行的软件，比如现在流行的nginx、htop、ncdu、vnstat等等，都可以使用EPEL很方便的安装更新。</p><p>目前可以直接通过执行命令： yum install epel-release 直接进行安装，如果此命令无法安装可以尝试以下方法</p><p>—-安装EPEL 阿里云源</p><p>1、备份(如有配置其他epel源)</p><p>mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup</p><p>mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup</p><p>2、下载新repo 到/etc/yum.repos.d/</p><p>epel(RHEL 7)</p><p>wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-7.repo">http://mirrors.aliyun.com/repo/epel-7.repo</a></p><p>epel(RHEL 6)</p><p>wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-6.repo">http://mirrors.aliyun.com/repo/epel-6.repo</a></p><p>epel(RHEL 5)</p><p>wget -O /etc/yum.repos.d/epel.repo <a href="http://mirrors.aliyun.com/repo/epel-5.repo">http://mirrors.aliyun.com/repo/epel-5.repo</a></p><p>—-官方源直接安装</p><p>CentOS/RHEL 5 ：</p><p>rpm -Uvh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm">https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm</a></p><p>CentOS/RHEL 6 ：</p><p>rpm -Uvh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm">https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm</a></p><p>CentOS/RHEL 7 ：</p><p>rpm -Uvh <a href="https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm">https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>nginx通过域名访问项目（不接项目名称），cookie丢失问题详解</title>
      <link href="/2021/10/28/nginx-tong-guo-yu-ming-fang-wen-xiang-mu-bu-jie-xiang-mu-ming-cheng-cookie-diu-shi-wen-ti-xiang-jie/"/>
      <url>/2021/10/28/nginx-tong-guo-yu-ming-fang-wen-xiang-mu-bu-jie-xiang-mu-ming-cheng-cookie-diu-shi-wen-ti-xiang-jie/</url>
      
        <content type="html"><![CDATA[<p> 最近搞了个域名，想用它直接去访问Tomcat上部署的项目，开始一直必须加上项目名称，经过短暂配置，成功了。</p><p>访问一次，到达登陆页面，结果死活登录不进去，一直在登陆界面，原来是由于cookie丢失，现配置如下，完美解决问题：</p><pre><code>server &#123;    listen       80;    #listen       somename:8080;    server_name www.XXX.cn;    location / &#123;        proxy_pass http://IP:8080/projectName/;        proxy_cookie_path /projectName/ /;       proxy_set_header   Host    $host;       proxy_set_header   X-Real-IP   $remote_addr;       proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;        #root   html;        #index  index.html index.htm;    &#125;    location /projectName/ &#123;       proxy_pass http://IP:8080/projectName/;       proxy_cookie_path /projectName/ /;       proxy_set_header   Host    $host;       proxy_set_header   X-Real-IP   $remote_addr;       proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;   &#125;&#125;</code></pre><p> proxy_cookie_path /projectName/   /;     用于改变cookie路径，解决cookie丢失问题的</p><p>在配置域名访问应用时，常出现cookie丢失问题，原因是普通的配置cookie的路径为（没有经过代理的地址）： <a href="http://ip:8080/projectName">http://IP:8080/projectName</a>     cookie_path：/project</p><p>但是为了不添加项目名就能访问应用，我们把location的代理地址设置为/ ，所以要改变cookie的路径，语法： proxy_cookie_path path replacement; </p><p>path就是你需要替换的路径，replacement就是你需要替换的值</p><p>proxy_set_header Host $host;       </p><p>host变量的值按照如下优先级获得：</p><ol><li>请求行中的host.</li><li>请求头中的Host头部.</li><li>与一条请求匹配的server name.</li></ol><p>很清楚，有三点，取优先级最高的那个。仅从字面意思上来理解，这个选择的过程为：如果请求行中有host信息，则以请求行中的host作为host变量的</p><p>值（host与host变量不是一个东西，很拗口）；如果请求行中没有host信息，则以请求头中的Host头的值作为host变量的值；如果前面两者都没有，那</p><p>么host变量就是与该请求匹配所匹配的serve名。</p><p>proxy_set_header X-Real-IP $remote_addr;         用于获取用户真实IP的</p><p>详解如下：</p><p>经过反向代理后，由于在客户端和web服务器之间增加了中间层，因此web服务器无法直接拿到客户端的ip，通过$remote_addr变量拿到的将是Nginx的ip地址，</p><p>但是Nginx是可以获取用户的真实IP的，也就是说Nginx通过$remote_addr变量时获取的就是用户真实IP，那么想在web服务器获取用户真实IP，那咱们就需要赋</p><p>值一下，如上面的配置，Nginx将用户的真实IP赋值给X-Real-IP，然后在web端request.getAttribute(“X-real-ip”)获取IP</p><p>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;      用于获取用户真实IP的</p><p>另附上获取IP的工具</p><pre><code>import java.io.IOException;import javax.servlet.http.HttpServletRequest;/** * 常用获取客户端信息的工具 *  */public final class NetworkUtil &#123;/** * 获取请求主机IP地址,如果通过代理进来，则透过防火墙获取真实IP地址; *  * @param request * @return * @throws IOException */public final static String getIpAddress(HttpServletRequest request) throws IOException &#123;    // 获取请求主机IP地址,如果通过代理进来，则透过防火墙获取真实IP地址    String ip = request.getHeader(&quot;X-Forwarded-For&quot;);    if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;            ip = request.getHeader(&quot;Proxy-Client-IP&quot;);        &#125;        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;            ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;);        &#125;        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;            ip = request.getHeader(&quot;HTTP_CLIENT_IP&quot;);        &#125;        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;            ip = request.getHeader(&quot;HTTP_X_FORWARDED_FOR&quot;);        &#125;        if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123;            ip = request.getRemoteAddr();        &#125;    &#125; else if (ip.length() &gt; 15) &#123;        String[] ips = ip.split(&quot;,&quot;);        for (int index = 0; index &lt; ips.length; index++) &#123;            String strIp = (String) ips[index];            if (!(&quot;unknown&quot;.equalsIgnoreCase(strIp))) &#123;                ip = strIp;                break;            &#125;        &#125;    &#125;    return ip;&#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20.04 安装和卸载MySQL8</title>
      <link href="/2021/10/28/ubuntu20-04-an-zhuang-he-xie-zai-mysql8/"/>
      <url>/2021/10/28/ubuntu20-04-an-zhuang-he-xie-zai-mysql8/</url>
      
        <content type="html"><![CDATA[<p>安装MySQL8<br>安装mysql-server sudo apt install mysql-server    </p><p>初始化配置信息 sudo mysql_secure_installation    </p><p>VALIDATE PASSWORD COMPONENT…..（使用密码强度校验组件） 输入： n<br>New Password:（设置新密码,并重复一遍)<br>Remove anonymous users (删除匿名用户) n<br>Disallow root login remotely(拒绝远程root账号登录） n<br>Remove test database and access to it(移除test数据库） n<br>Reload privilege tables now (现在就重新载入权限表） y<br>登入到数据库并配置远程访问    </p><p>sudo mysql -uroot -p<br>配置root用户外网也可以连接并登录<br>use mysql<br>update user set Host=’%’ where User=’root’; # 这里插一句如果表中已经存在的话就会报错，请认真查看报错信息，已经设置的话就不需要再设置了<br>GRANT ALL ON <em>.</em> TO ‘root‘@’%’;<br>FLUSH PRIVILEGES; # 刷新权限<br>解惑<br>物理机链接不到虚拟机的MySQL（错误排查）<br>首先查看IP是否可以互相ping通（LinuxL:ifconfig-a， Windows：ipconfig）<br>使用sudo netstat -tupln 或者 sudo lsof -i:端口 查看端口状态<br>使用sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf 将 bind-address = 127.0.0.1 注释 然后保存退出<br>使用 sudo service mysql restart 重启MySQL服务    </p><p>MySQL8 卸载<br>查看MySQL依赖 ： dpkg –list|grep mysql    </p><p>卸载： sudo apt-get remove mysql-common    </p><p>卸载： sudo apt-get autoremove –purge mysql-server-8.0(这里版本对应即可)    </p><p>清除残留数据: dpkg -l|grep ^rc|awk ‘{print$2}’|sudo xargs dpkg -P    </p><p>再次查看MySQL的剩余依赖项: dpkg –list|grep mysql(这里一般就没有输出了，如果有执行下一步)    </p><p>继续删除剩余依赖项，如：sudo apt-get autoremove –purge mysql-apt-config    </p><p>【在执行过程中有的需要sudo】    </p><p>【第6部执行完了就彻底删除了】    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>crontab每秒执行一次脚本</title>
      <link href="/2021/10/27/crontab-mei-miao-zhi-xing-yi-ci-jiao-ben/"/>
      <url>/2021/10/27/crontab-mei-miao-zhi-xing-yi-ci-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>crontab的最小时间时间是一分钟，那么，如果想要更快的话，可以通过调用shell脚本，然后脚本中循环执行即可，代码如下</p><p>crontab中，每分钟调用一次sheel</p><p><code>*/1 * * * * bash /data/www/test.sh</code></p><p>test.sh脚本如下</p><pre><code>#!/bin/bash#循环29次for((i=1; i&lt; 30; i++));    do      /data/www/test/yii test/test  #控制节奏，执行一次休息1秒  sleep 1;done</code></pre><p>自己根据需要调整频率即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>服务器</title>
      <link href="/2021/10/27/fu-wu-qi/"/>
      <url>/2021/10/27/fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>服务器    </p><p>目录<br>1 远程管理    3<br>1.1 常用软件    3<br>1.2 Telnet：23    3<br>1.3 VNC：5905（默认5905）    3<br>1.4 xrdp：tcp/2820、tcp/2821    3<br>1.5 SSH：tcp/22    4<br>2 rsyslog网络日志系统    5<br>3 rsync备份与文件同步    5<br>4 unison双向文件同步    5<br>5 NFS与autofs远程文件调用    6<br>6 samba文件共享协议    6<br>7 vsftpd    6<br>8 dns    6<br>9 dhcp    7<br>10 LAMP-web apache    7<br>11 nginx    7<br>12 LEMP编译安装    7<br>13 tomcat    8<br>14 openvpn    8<br>15 postfix邮件服务器    8<br>16 IP-SAN  iscsi    8<br>17 rsnapshot备份服务器    9<br>18 keepalive高可用集群    9<br>19 iptables防火墙    9<br>20 SVN版本控制服务    9<br> <br>1    远程管理<br>1.1 常用软件<br>服务器端：Telnet、tigervnc、openssh<br>客户端：Telnet、xmanager、putty、xshell … …<br>1.2 Telnet：23<br>默认root不登陆，明文<br>yum install telnet.x86_64 telnet-server.x86_64<br>systemctl list-unit-files | grep telnet<br>systemctl start telnet.socket<br>lsof -i:23<br>mv /etc/securetty /etc/securetty.bak<br>1.3 VNC：5905（默认5905）<br>yum install tigervnc-server.x86_64 tigervnc.x86_64<br>cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:5.service<br>vi /etc/systemd/system/vncserver@:5.service<br>vncserver<br>netstat -apn | grep vnc<br>1.4 xrdp：tcp/2820、tcp/2821<br>服务器端：<br>yum install xrdp.x86_64 xrdp-devel.x86_64 xorgxrdp.x86_64<br>chcon -R  -t  bin_t /usr/sbin/xrdp<br>chcon -R  -t  bin_t /usr/sbin/xrdp-sesman<br>systemctl restart xrdp.service<br>netstat -antup | grep xrdp<br>客户端：<br>linux：vinagre<br>windows：mstsc<br>1.5 SSH：tcp/22<br>主要功能：加密远程管理，加密远程文件传输（scp、sftp）<br>1、Putty:(和puttygen一起使用)<br>mkdir /root/.ssh<br>   vi authorized_keys<br>     复制public key<br>systemctl restart sshd<br>2、远程连接<br>ssh -X <a href="mailto:&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#49;&#46;&#x31;&#56;&#50;">&#114;&#111;&#111;&#x74;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#49;&#46;&#x31;&#56;&#50;</a>                #可以查看图形界面<br>scp file <a href="mailto:&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#49;&#x2e;&#x31;&#x38;&#50;">&#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#49;&#x2e;&#x31;&#x38;&#50;</a>:/opt/            #传输文件<br>scp -rp /home/ <a href="mailto:&#x72;&#111;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#49;&#46;&#x31;&#x38;&#x32;">&#x72;&#111;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#49;&#46;&#x31;&#x38;&#x32;</a>:/opt/    #传输目录<br>sftp <a href="mailto:&#x72;&#x6f;&#111;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#46;&#x31;&#x38;&#50;">&#x72;&#x6f;&#111;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#46;&#x31;&#x38;&#50;</a><br>put a.txt    #上传<br>get b.txt    #下载<br>rename、rm<br>3、秘钥级身份认证<br>ssh-keygen<br>ssh-copy-id -i /root/.ssh/id_rsa.pub <a href="mailto:&#114;&#111;&#111;&#116;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#46;&#49;&#x38;&#50;">&#114;&#111;&#111;&#116;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#46;&#49;&#x38;&#50;</a><br>ssh 192.168.1.182<br>4、ssh访问控制<br>1）vi /etc/ssh/sshd_conf<br>AllowUsers 用户名/组名<br>DenyUsers 用户名<br>2）vi /etc/pam.d/sshd<br>添加<br>auth required /lib/security/pam_listfile.so item=user sense=deny<br>file=/etc/sshd_user_deny_list onerr=succeed<br>所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录<br>2    rsyslog网络日志管理系统    </p><p>3    rsync备份与文件同步<br>端口：tcp873<br>远程文件同步，网站的备份，（不同系统）文件的同步，手动备份<br>增量差异备份，单项文件同步<br>rsync备份与文件同步.docx<br>4    unison双向文件同步<br>端口：使用ssh端口22<br>双向同步操作，跨平台使用<br>不仅支持本地对本地同步，也支持通过SSH、RSH和Socket等网络协议进行同步。<br>unison双向文件同步.docx<br>5    NFS与autofs远程文件调用<br>端口：tcp2049<br>Linux/unix，局域网，可以跨网段、RPC远程调用协议<br>NFS与autofs服务.docx<br>6    samba文件共享协议<br>端口：tcp139、tcp445<br>SMB文件共享协议（信息服务块）<br>用于Linux与Windows，linux与linux的文件共享<br>局域网文件共享、windows域控<br>samba文件共享协议.docx<br>7    vsftpd<br>端口：    tcp/20、tcp/21（被动方式下数据传输端口不固定）<br>远程文件存取、不受平台限制、跨广域网<br>vsftpd文件传输协议.docx<br>8    dns<br>端口：53<br>域名解析服务器<br>递归解析（本地名称服务器查）与迭代解析（客户端自己查）<br>DNS.docx<br>9    dhcp<br>dhcp动态主机分配协议<br>DHCP.docx<br>10    LAMP-web apache<br>LAMP：linux-apache-mysql-php<br>apache端口：80<br>mariadb端口：3306<br>php-fpm端口：9000<br>https加密端口：443<br>LAMP-apache.docx<br>11    nginx    </p><p>12    LEMP编译安装<br>LEMP：linux-nginx-mysql-php<br>编译安装的方法<br>wordpress、owncloud发布<br>LEMP-nginx.docx<br>13    tomcat    </p><p>14    openvpn    </p><p>15    postfix邮件服务器<br>postfix邮件发送服务端口：25<br>pop3邮件接收服务端口：110<br>IMAP邮件访问协议端口：143<br>加密–发送服务器smtp：995<br>    –接受服务器pop3：25<br>postfix邮件服务器.docx<br>16    IP-SAN  iscsi<br>端口：3260<br>IP-SAN.docx<br>17    rsnapshot备份服务器<br>备份服务器-rsnapshot.docx<br>18    keepalive高可用集群<br>一台web服务器出现故障，从服务器可以直接工作<br>keepalived高可用集群.docx<br>19    iptables防火墙    </p><p>20    SVN版本控制服务<br>SVN+http：80、8080    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本配置</title>
      <link href="/2021/10/27/ji-ben-pei-zhi/"/>
      <url>/2021/10/27/ji-ben-pei-zhi/</url>
      
        <content type="html"><![CDATA[<p>一、查看系统<br>1、lscpu<br>2、free  -m   #查看内存<br>swap虚拟内存（交换分区）<br>swap分区在系统的物理内存不够用的时候，把硬盘空间中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到swap分区中，等到那些程序要运行时，再从swap分区中恢复保存的数据到内存中。<br>主要应用于数据库服务器与 web  优化服务器（面试可能会问到）<br>3、lsblk       #查看服务器磁盘分布状态<br>4、df  -h     #显示分区<br>5、lspci       #用来显示系统中所有PCI总线设备或连接到该总线上<br>              的所有设备的工具<br>lspci  |  grep  Ethernet     #网卡<br>              VGA         #显卡<br>              audio        #声卡<br>6、lsusb      #显示服务器usb接口数量<br>7、查看系统版本<br>cat /etc/redhat-release    # 查看系统发行版本<br>CentOS Linux release 7.2.1511 (Core)    </p><p>uname  -r             # 显示内核版本<br>3.10.0-327.el7.x86_64    #3主版本号 10次版本号 稳定版(偶数)<br>uname  -n             # 显示主机名    </p><p>二、基础配置<br>1、更换源<br>cd  /etc/yum.repos.d/<br>yum  clean  all<br>yum  makecache<br>yum  repolist    </p><p>本地源<br>vi  junxi.repo<br>[junxi_repo]<br>name=<a href="http://www.junxilinux.com/">www.junxilinux.com</a><br>baseurl=<a href="http://192.168.1.5/hadoop/">http://192.168.1.5/hadoop/</a><br>enable=1<br>gpgcheck=0<br>epel源<br>yum  install  epel-release.noarch    </p><p>1、防火墙<br>iptables  -L               #防火墙规则<br>iptables  -t  nat  -L       #防火墙nat表规则    </p><p>2、服务<br>systemctl  list-unti-files  |  grep  fire    #查找fire的服务<br>target  #单元组<br>socket  #接口<br>systemctl  start/stop/restart/status  firewalld.service<br>systemctl  enable/disable/is-actives  firewalld.service<br>systemctl  list-dependencise  firewalld.service   #树形查看相关服务    </p><p>3、centos7运行级别<br>systemctl  isolate  proweroff.target        #启动单元组  init 0<br>                 proweroff.target.wants   #启动单元组成员<br>                  reboot.target        init 6<br>                 multi-user.target      init 3  #命令行模式<br>                 graphical.target       init 5  #图形界面<br>                 rescue.target         init 1  #单用户模式<br>systemctl  get-default<br>runlevel                 #查看当前运行级别<br>systemctl  set-defauil  multi-user.target   #修改默认运行级别    </p><p>/etc/systemd/system      #启动单元组.wants，优先级高，<br>/usr/lib/systemd/system   #链接到/etc下    </p><p>4、网络设备命名<br>vi  /etc/sysconfig/grub<br>GRUB_CMDLINE_LINUX=”net.ifnames=0 biosdevname=0 rd.lvm.lv=JUNXI/root rd.lvm.lv=JUNXI/swap rhgb quiet”<br>grub2-mkconfig  -o  /boot/grub2/grub.cfg<br>#把修改的配置文件设置生成道/boot/grub2/grub.cfg（重新生成GRUB配置，并更新内核参数）    </p><p>5、修改网卡配置文件<br>cd  /etc/sysconfig/network<br>mv  ifcfg-eno16  ifcfg-eth0<br>vi  ifcfg-eth0<br>DEVICE=”eth0”<br>DNS1=”192.168.1.1”<br>IPADDR=192.168.1.181<br>GATEWAY=192.168.1.1<br>systemctl  network  restart</p><p>Linux主流的发行版本：debian<br>ubuntun red hat<br>什么是shell：它接收用户命令，然后调用相应的应用程序。    </p><p>cd /etc/yum.repos<br>ls<br>mv Cent-B Cen..-bak 备份原有源<br>ls /opt<br>mv /opt/Cen .<br>ls<br>yum clean all 清除缓存<br>yum makecache    建立本地缓存<br>yum repolist  列出系统中以配置的源<br>yum search epel  查找epel源<br>yum  install epel-release.noarch<br>yum repolist    </p><p>yum remove     </p><p>关闭防火墙<br>iptables -L 查看防火墙规则<br>iptables -t nat -L  查看防火墙nat表规则<br>systemctl list-unit-files 列出所有服务<br>system list-unit-files | grep fire 列出有关防火墙的服务<br>systemctl is-active firewalld.service  查看防火墙状态<br>systemctl stop firewalld.service  关闭防火墙<br>sys disable firewalld.ser  永久关闭防火墙    </p><p>删除虚拟网络接口virbr0<br>virsh net-list  查看所有虚拟网络<br>删除default网络<br>virsh net-destroy default  重启libvirtd后恢复<br>virsh net-undefine def  重启系统后不回复    </p><p>网络设备命名<br>ifconfig 查看 ip addr<br>编辑vi /etc/sysconfig/grub 文件  （nano 编辑 gedit图形界面编辑）<br>添加GRUB_CMDLINE_LINUX=”net.ifnames=0 biosdevname=0 rd.lvm…’<br>cat /etc/sysconfig/grub 查看是否成功写入<br>grub2-mkconfig -o /boot/grub2/grub.cfg 把修改的配置文件设置生成道/boot/grub2/grub.cfg（重新生成GRUB配置，并更新内核参数）<br>修改网卡配置文件<br>cd /etc/sysconfig/network  跳转目录<br>mv ifcfg-eno  ifcfg-eth0  更改配置文件名称<br>编辑vi ifcfg-eth0文件 将里面的eno16  改为eth0<br>reboot 重启<br>poweroff 关闭系统    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>网络管理服务</title>
      <link href="/2021/10/27/wang-luo-guan-li-fu-wu/"/>
      <url>/2021/10/27/wang-luo-guan-li-fu-wu/</url>
      
        <content type="html"><![CDATA[<p>网络管理服务有两个：<br>NetworkManager：修改连接名-连接名连接配置文件<br>优势：支持wifi，不会发生漂移，<br>network:直接修改设备配置文件<br>nmtui修改时，设备连接名改为一致    </p><p>vi /etc/sysconfig/grub<br>GRUB_CMDLINE_LINUX=……rhgb quiet net.ifnames=0 biosdevname=0”<br>grub2-mkconfig -o /boot/grub2/grub.cfg<br>systemctl stop NetworkManager.service<br>systemctl disable NetworkManager.service<br>reboot<br>mv ifcfg-eno16777736 ifcfg-eth0<br>vi ifcfg-eth0<br>NAME=”eth0”<br>DEVICE=”eth0”<br>mv ifcfg-ens37 ifcfg-eth1<br>NAME=”eth1”<br>DEVICE=”eth1”    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>压缩与解压缩</title>
      <link href="/2021/10/27/ya-suo-yu-jie-ya-suo/"/>
      <url>/2021/10/27/ya-suo-yu-jie-ya-suo/</url>
      
        <content type="html"><![CDATA[<p>1    常用压缩工具<br>gzip：压缩与解压缩工具<br>bzip2：块排序压缩工具<br>tar：归档工具<br>zip：打包压缩工具，支持正则，有自己的转义符<br>2    gzip<br>gzip：用于压缩一个或多个文件，并且原文件会被压缩文件取代<br>gunzip：用于将压缩文件还原为原文件<br>压缩文件是原文件的<br>1、实例<br>gzip aaa.doc                #压缩文件<br>du -sh aaa.doc.gz<br>gunzip aaa.doc.gz            #解压文件<br>gzip -d aaa.doc.gz            #解压文件<br>du -sh aaa.doc<br>2、查看压缩文件内容<br>gunzip -c rsnapshot.conf.gz<br>zcat rsnapshot.conf.gz<br>zless rsnapshot.conf.gz<br>zmore rsnapshot.conf.gz<br>3    bzip2<br>降低压缩速度，提高压缩质量<br>bzip2 aaa.doc<br>bunzip2 aaa.doc.bz2<br>4    tar<br>tar：归档文件工具，没有压缩功能<br>选项<br>c：创建新的归档文件<br>r：将某一文件或某些文件追加到已经存在的归档文件<br>t：列出文档内容，查看已经备份了哪些文件<br>u：更新文件<br>x：释放归档文件<br>辅选项<br>-f：（必选）后面紧跟文件名<br>-v：现实操作时的详细信息<br>-z：调用gzip进行压缩<br>-j：调用bzip2进行压缩<br>-p：不改变文件原来的属性<br>-k：不覆盖已经存在的同名的文件<br>-N：只打包比DATE日期新的文件<br>-C：指定解压目录<br>实例<br>mkdir -p /opt/dir/test{1..50}.txt<br>tar cvf dir.tar dir            #归档dir目录<br>tar xvf dir.tar                #释放归档文件<br>tar tvf dir.tar | more            #查看归档文件内容<br>tar zcvf dir.tar.gz dir        #调用gzip归档并压缩<br>tar zxvf dir.tar.gz dir        #解压缩<br>tar zxvf dir.tar.gz -C /mnt/    #指定解压目录<br>tar rvf dir.tar test/            #将test目录归档追加到归档文件dir.tar中<br>5    zip<br>选项<br>-r：递归处理<br>-l：列出压缩文件内容<br>-d：指定解压目录<br>实例<br>zip -r dir.zip dir/                #递归压缩<br>unzip dir.zip                    #解压缩<br>unzip -l dir.zip                    #列出压缩文件内容<br>unzip dir.zip -d     /mnt            #指定解压目录    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关闭selinux：</title>
      <link href="/2021/10/27/guan-bi-selinux/"/>
      <url>/2021/10/27/guan-bi-selinux/</url>
      
        <content type="html"><![CDATA[<p>setenforce 0<br>如果http为编译安装，selinux上下文策略与rpm安装不同，需要使用audit2allow，该工具读物审计日志并创建selinux允许审计失败的政策：<br>yum install /usr/bin/audit2allow #进行安装或者<br>yum install setroubleshoot  #安装selinux排障工具<br>过滤审计日志文件的失败写下上下文被拒绝日志audit.log<br>grep check.py /var/log/audit/audit.log<br>在找到所有否认上下文我使用audit2allow创建允许政策<br>ps -efZ |grep keepalived  <br>#确认Keepalived进程上下文为keepalived_t<br>grep keepalived_t /var/log/audit/audit.log | audit2allow -M keepalived_t<br>semodule -i keepalived_t.pp   #独立创建新的Keepalived访问策略</p><p>Selinux<br>Gentenforce 0 —- permissive  //临时关闭<br>          1 —–enforcing<br>vi  /etc/selinux/config    </p><p>chcon  -R  -t  httpd_sys_content_t  /web    //修改目录的上下文<br>ll  -Z  -d  /web/         //查看上下文<br> semanage port -l | grep httpd      //查看默认端口<br>Getsebool  -a         //布尔值    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vi编辑器</title>
      <link href="/2021/10/27/vi-bian-ji-qi/"/>
      <url>/2021/10/27/vi-bian-ji-qi/</url>
      
        <content type="html"><![CDATA[<p>Vi是linux/unix系统内置的最高效的创建和编辑的文本工具。<br>命令模式<br>编辑模式<br>末行模式<br>i光标所在左侧输入正文<br>a光标所在右侧输入正文<br>s光标所在字符输入正文<br>复制<br>nyy<br>1,5 co 10 将1到5行的所有内容，复制到第10行<br>K（上） j（下）h（左）l（右）<br>删除<br>dG 删除至文件末尾<br>d0：删除至行首<br>d$: 删除至行尾<br>：1，5 d<br>x/X 向后 向前<br>/char ?char /从上往下 ？从下往上<br>n/N 继续查找<br>替换<br>r/R<br>:1,10s /old/new 在第一行到第十行这个范围内替换，只替换每行的一个old<br>：1,10s /old/new/g 在第一行到第十行这个范围内进行全部替换。<br>：%s /old/new/g 进行全文替换<br>：%s#old#new#g 进行全文替换。分隔符可以是/#<br>:%s ,old,new,g 进行全文替换<br>:%s /^/#/g<br>:%s /$/#/g<br>:%s #\#/#g  将\替换成/<br>:%s /#/$/g<br>:1,12w /root/filename 另存为<br>：r ~/filename 读一个文件<br>：r ！ls –l  将ls –l 命令查果，读到文件中。<br>：19 r aa.txt 将aa.txt 文件，读到19行的下面。<br>：！ ls –l 执行shell命令<br>：e /etc/filename 打开/etc/filename文件<br>：set nu 设置行号<br>：set nonu 关闭行号<br>vim -o FORWARD.sh FORWARD.sh.bc 同时打开两个文件<br>Ctrl+shift++ #放大<br>Ctrl+- #缩小<br>Ctrl+w #跳转窗口    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7通过yum安装JDK1.8</title>
      <link href="/2021/10/27/centos7-tong-guo-yum-an-zhuang-jdk1-8/"/>
      <url>/2021/10/27/centos7-tong-guo-yum-an-zhuang-jdk1-8/</url>
      
        <content type="html"><![CDATA[<p>安装之前先检查一下系统有没有自带open-jdk</p><p>命令：</p><p>rpm -qa |grep java</p><p>rpm -qa |grep jdk</p><p>rpm -qa |grep gcj</p><p>如果没有输入信息表示没有安装。</p><p>如果安装可以使用rpm -qa | grep java | xargs rpm -e –nodeps 批量卸载所有带有Java的文件  这句命令的关键字是java</p><p>首先检索包含java的列表</p><p>yum list java*</p><p>检索1.8的列表</p><p>yum list java-1.8*   </p><p>安装1.8.0的所有文件</p><p>yum install java-1.8.0-openjdk* -y</p><p>使用命令检查是否安装成功</p><p>java -version</p><p>到此安装结束了。这样安装有一个好处就是不需要对path进行设置，自动就设置好了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux下显示完整路径，linux下显示绝对路径</title>
      <link href="/2021/10/27/linux-xia-xian-shi-wan-zheng-lu-jing-linux-xia-xian-shi-jue-dui-lu-jing/"/>
      <url>/2021/10/27/linux-xia-xian-shi-wan-zheng-lu-jing-linux-xia-xian-shi-jue-dui-lu-jing/</url>
      
        <content type="html"><![CDATA[<p>linux下，命令行显示路径仅最后一个文件名，非常不方便，想显示完整路径。<br>环境背景：linux，无root权限，可sudo(为了服务器安全，一般只给管理员root账号和密码，普通账号仅sudo权限)    </p><p>回到顶部<br>【1】修改环境变量PS1    </p><p>（1）临时生效<br>命令行提示符完全显示完整的工作目录名称：<br>export PS1=’[\u@\h $PWD]$’    </p><p>　　    </p><p>（2）永久生效<br>vi编辑/etc/profile文件在最后加上<br>export PS1=’[\u@\h $PWD]$’    </p><p>修改完成后，执行: source /etc/profile 使配置生效即可。    </p><p>（3）其他方式相关<br>命令行提示符只列出最后一个目录：    </p><p>export PS1=’[\u@\h \W]$’    　　    </p><p>命令行提示符显示完整工作目录，当前用户目录会以 ~代替：    </p><p>export PS1=’[\u@\h \w]$’    </p><p>　　    </p><p>回到顶部    </p><p>【2】命令释义<br>复制代码<br>\u 显示当前用户账号<br>\h 显示当前主机名<br>\W 只显示当前路径最后一个目录<br>\w 显示当前绝对路径（当前用户目录会以 ~代替）<br>$PWD 显示当前全路径<br>$ 显示命令行’$’或者’#’符号<br>复制代码<br>然后问题来了，vi 退出时，’:wq!‘回车后提示：E45: ‘readonly’ option is set (add ! to override) 。原因是权限不够，非root权限。<br>解决方法:q! 退出，然后命令行输入 sudo !!，再次vi编辑即可。<br>sudo !! // 解释：sudo来执行上一条命令，’!!’ 表示上一条命令，linux中’!’的用法可以参见参考[3]<br>参考：<br>[1] Linux 修改命令提示符当前路径的显示方式<br>[2] VIM提文件权限问题:…e45 readonly option is set (add!to override)<br>[3] Linux命令行下”!”的十个神奇用法    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>k8s创建ubuntu容器时出现Back-off restarting failed container问题</title>
      <link href="/2021/10/27/k8s-chuang-jian-ubuntu-rong-qi-shi-chu-xian-back-off-restarting-failed-container-wen-ti/"/>
      <url>/2021/10/27/k8s-chuang-jian-ubuntu-rong-qi-shi-chu-xian-back-off-restarting-failed-container-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>1、问题：k8s创建ubuntu容器时出现Back-off restarting failed container，容器一直进行重启。    </p><p>2.原因：对于像ubuntu这样的系统级docker ，用k8s集群启动管理后，会自动关闭，解决方法就是 让其一直在运行，所以在yaml文件中增加command命令即可。<br>3.解决：在yaml中添加如下参数：<br>command: [ “/bin/bash”, “-c”, “–” ]<br>args: [ “while true; do sleep 30; done;” ]    </p><p>ubuntu.yaml    </p><p>apiVersion: extensions/v1beta1<br>kind: Deployment<br>metadata:<br>  name: ubuntu-deploy<br>spec:<br>  replicas: 1<br>  template:<br>    metadata:<br>      labels:<br>        name: ubuntu<br>    spec:<br>      containers:<br>        - name: ubuntu-tz<br>          command: [“/bin/bash”,”-c”,”–”]<br>          args: [“while true; do sleep 30; done;”]<br>          securityContext:<br>            privileged: true<br>          image: ubuntu:16.04    </p><p>重新进行部署就可以了~~~    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux开启ipv4转发</title>
      <link href="/2021/10/27/linux-kai-qi-ipv4-zhuan-fa/"/>
      <url>/2021/10/27/linux-kai-qi-ipv4-zhuan-fa/</url>
      
        <content type="html"><![CDATA[<p>查看IP转发功能的状态，若net.ipv4.ip_forward为0，表示禁止进行ip转发。</p><p>sysctl net.ipv4.ip_forward<br>net.ipv4.ip_forward = 0<br>修改 /etc/sysctl.conf：</p><p> net.ipv4.ip_forward = 1<br>执行如下命令使修改生效：</p><p>sysctl -p /etc/sysctl.conf</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>用Nginx快速搭建文件服务器</title>
      <link href="/2021/10/27/yong-nginx-kuai-su-da-jian-wen-jian-fu-wu-qi/"/>
      <url>/2021/10/27/yong-nginx-kuai-su-da-jian-wen-jian-fu-wu-qi/</url>
      
        <content type="html"><![CDATA[<p>使用Nginx在局域网内和同事共享文件的好方法。    </p><p>1 安装nginx    </p><p>sudo apt-get install nginx<br>2 创建conf文件    </p><p>sudo gedit /etc/nginx/conf.d/file_server.conf<br>修改conf文件如下：    </p><pre><code>server &#123;       listen  80;       server_name    10.1.2.3; # 自己PC的ip或者服务器的域名       charset utf-8; # 避免中文乱码       root /home/xx/share;       location / &#123;          autoindex on; # 索引          autoindex_exact_size on; # 显示文件大小          autoindex_localtime on; # 显示文件时间        &#125;    &#125;    </code></pre><p>3 使配置生效    </p><p>sudo rm /etc/nginx/sites-enabled/default<br>sudo service nginx reload<br>4 访问    </p><p>浏览器里直接输入 <a href="http://10.1.2.3/">http://10.1.2.3</a>    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7使用yum安装MongoDB4.4</title>
      <link href="/2021/10/27/centos7-shi-yong-yum-an-zhuang-mongodb4-4/"/>
      <url>/2021/10/27/centos7-shi-yong-yum-an-zhuang-mongodb4-4/</url>
      
        <content type="html"><![CDATA[<h4 id="创建repo"><a href="#创建repo" class="headerlink" title="创建repo"></a>创建repo</h4><p>vi /etc/yum.repos.d/mongodb-org-4.4.repo</p><h4 id="写入repo"><a href="#写入repo" class="headerlink" title="写入repo"></a>写入repo</h4><p>[mongodb-org-4.4]<br>name=MongoDB 4.4 Repository<br>baseurl=<a href="https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/$basearch/">https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/$basearch/</a><br>gpgcheck=0<br>enabled=1</p><h4 id="yun-安装"><a href="#yun-安装" class="headerlink" title="yun 安装"></a>yun 安装</h4><p>yum -y install mongodb-org</p><h4 id="设置启动"><a href="#设置启动" class="headerlink" title="设置启动"></a>设置启动</h4><p>systemctl enable mongod<br>systemctl start mongod</p><p>本机命令行进入MongoDB<br>mongo</p><p>至此安装完毕</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 硬盘分区生效命令partprobe</title>
      <link href="/2021/10/27/linux-ying-pan-fen-qu-sheng-xiao-ming-ling-partprobe/"/>
      <url>/2021/10/27/linux-ying-pan-fen-qu-sheng-xiao-ming-ling-partprobe/</url>
      
        <content type="html"><![CDATA[<p>在Linux中使用fdisk命令进行分区时，有时会遇到“WARNING: Re-reading the partition table failed with error 16: Device or resource busy.The kernel still uses the old table.The new table will be #used at the next reboot.”这种告警信息。如下所示    </p><p>[root@localhost ~]# fdisk /dev/sde    </p><p>The number of cylinders for this disk is #set to 18928.<br>There is nothing wrong with that, but this is larger than 1024,<br>and could in certain setups cause problems with:    </p><ol><li>software that runs at boot time (e.g., old versions of LILO)    </li><li>booting and partitioning software from other OSs<br>(e.g., DOS FDISK, OS/2 FDISK)    </li></ol><p>Command (m for help): p    </p><p>Disk /dev/sde: 155.6 GB, 155692564480 bytes<br>255 heads, 63 sectors/track, 18928 cylinders<br>Units = cylinders of 16065 * 512 = 8225280 bytes    </p><p>   Device Boot      Start         End      Blocks   Id  System<br>/dev/sde1               1       18275   146793906    5  Extended<br>/dev/sde5               1       18275   146793874+  83  Linux    </p><p>Command (m for help): n<br>Command action<br>   l   logical (5 or over)<br>   p   primary partition (1-4)<br>p<br>Partition number (1-4): 2<br>First cylinder (18276-18928, default 18276):<br>Using default value 18276<br>Last cylinder or +size or +sizeM or +sizeK (18276-18928, default 18928):<br>Using default value 18928    </p><p>Command (m for help): w<br>The partition table has #been #altered!    </p><p>Calling ioctl() to re-read partition table.    </p><p>WARNING: Re-reading the partition table failed with error 16: Device or resource busy.<br>The kernel still uses the old table.<br>The new table will be #used at the next reboot.<br>Syncing disks.    </p><p>此时使用fdisk命令看不到新建的分区信息，可以使用partprobe命令解决这个问题而不用重启系统，因为partprobe可以使kernel重新读取分区信息，从而避免重启系统。    </p><p>partprobe - inform the OS of partition table changes    </p><p>DESCRIPTION<br>       This manual page documents briefly the partprobe command.    </p><pre><code>   partprobe is a program that informs the operating system kernel of partition table changes, by requesting that the operating system re-read the partition table.    </code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>华为SSLVPN客户端</title>
      <link href="/2021/10/27/hua-wei-sslvpn-ke-hu-duan/"/>
      <url>/2021/10/27/hua-wei-sslvpn-ke-hu-duan/</url>
      
        <content type="html"><![CDATA[<p>工具名称<br>secoclient<br>工具介绍    </p><div class="tagLink"><a class="link-card" title="secoclient-android-7.0.2.26.apk //用于Aandroid" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-android-7.0.2.26.apk"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-android-7.0.2.26.apk //用于Aandroid</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-android-7.0.2.26.apk</p></div></a></div><div class="tagLink"><a class="link-card" title="secoclient-iOS-7.0.2.26.ipa//用于ios" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-iOS-7.0.2.26.ipa"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-iOS-7.0.2.26.ipa//用于ios</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-iOS-7.0.2.26.ipa</p></div></a></div><div class="tagLink"><a class="link-card" title="secoclient-linux-32-7.0.2.26.run//用于linux 32bit" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-linux-32-7.0.2.26.run"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-linux-32-7.0.2.26.run//用于linux 32bit</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-linux-32-7.0.2.26.run</p></div></a></div><div class="tagLink"><a class="link-card" title="secoclient-linux-64-7.0.2.26.run//用于linux 64net" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-linux-64-7.0.2.26.run"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-linux-64-7.0.2.26.run//用于linux 64net</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-linux-64-7.0.2.26.run</p></div></a></div><div class="tagLink"><a class="link-card" title="secoclient-macosx-7.0.2.26.tar.gz用于macOS" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-macosx-7.0.2.26.tar.gz"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-macosx-7.0.2.26.tar.gz用于macOS</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-macosx-7.0.2.26.tar.gz</p></div></a></div><div class="tagLink"><a class="link-card" title="secoclient-win-32-7.0.2.26.exe//用于windows32bit" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-win-32-7.0.2.26.exe"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-win-32-7.0.2.26.exe//用于windows32bit</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-win-32-7.0.2.26.exe</p></div></a></div><div class="tagLink"><a class="link-card" title="secoclient-win-64-7.0.2.26.exe//用于windows64bit" href="http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-win-64-7.0.2.26.exe"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">secoclient-win-64-7.0.2.26.exe//用于windows64bit</p><p class="url">http://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-win-64-7.0.2.26.exe</p></div></a></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim删除空行和注释</title>
      <link href="/2021/10/27/vim-shan-chu-kong-xing-he-zhu-shi/"/>
      <url>/2021/10/27/vim-shan-chu-kong-xing-he-zhu-shi/</url>
      
        <content type="html"><![CDATA[<p>删除空行    </p><p>:g/^$/d<br>删除空行以及只有空格的行    </p><p>:g/^\s*$/d<br>删除以 # 开头或 空格# 或 tab#开头的行    </p><p>:g/^\s*#/d<br>对于 php.ini 配置文件，注释为 ; 开头    </p><p>:g/^\s*;/d<br>使用正则表达式删除行    </p><p>如果当前行包含 bbs ，则删除当前行    </p><p>:/bbs/d<br>删除从第二行到包含 bbs 的区间行    </p><p>:2,/bbs/d<br>删除从包含 bbs 的行到最后一行区间的行    </p><p>:/bbs/,$d<br>删除所有包含 bbs 的行    </p><p>:g/bbs/d<br>删除匹配 bbs 且前面只有一个字符的行    </p><p>:g/.bbs/d<br>删除匹配 bbs 且以它开头的行    </p><p>:g/^bbs/d<br>删除匹配 bbs 且以它结尾的行    </p><p>:g/bbs$/d<br>.ini 的注释是以 ; 开始的，如果注释不在行开头，那么删除 ; 及以后的字符    </p><p>:%s/;.+//g<br>删除 # 之后所有字符    </p><p>%s/#.*//g    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>会计帮：“等我做会计发财了，就跟你离婚！”</title>
      <link href="/2021/10/27/hui-ji-bang-deng-wo-zuo-hui-ji-fa-cai-liao-jiu-gen-ni-chi-hun/"/>
      <url>/2021/10/27/hui-ji-bang-deng-wo-zuo-hui-ji-fa-cai-liao-jiu-gen-ni-chi-hun/</url>
      
        <content type="html"><![CDATA[<p>0 1</p><p>“等我做会计发财了，就和你离婚”</p><p>他淡淡地说</p><p>听完后，她心里暖暖的，</p><p>她想，没有比这更天长地久。</p><p>海枯石烂的承诺了。</p><p>（因为她深知，做会计的永远也不会发财）</p><p>——2018年度最佳微小说奖</p><p>0 2</p><p>“等我干财务发财了，我就买房和你结婚”</p><p>他暖暖地说，</p><p>听完后，她心里拔凉拔凉的！</p><p>她想，这大概是最婉转的分手了。</p><p>（因为她深知，干财务的永远也不会发财）</p><p>——2018最佳微型小说提名奖</p><p>0 3</p><p>一位做会计的结婚不久，与几个朋友喝酒，醉倒后不省人事。被抬回家后，老婆试着用各种办法给他醒酒，都无济于事，于是打电话询问他的同事。同事说，我给他邮箱发一个报表，突然老公手机短信微信邮件同时响了，只见男人噌的一下从床上蹦起来，精神抖擞，大喊：“报表又出问题了？”老婆此时已泪流满面！原来老公养家真不容易！</p><p>——致敬财会行业奉献青春、挥洒热血的兄弟姐妹</p><p>0 4</p><p>在财会这个行业，在行业内都称呼为“某经理”；李经理、陈经理、张经理，其实，就是一个“出报表的”，加班加通宵，吃饭更没规律，只因你要必须时刻保证每个数字都不能有错；连亲人和你见个面都要预约，不知道的人、不了解的人以为你早出晚归外面有娇娘，一年365天日夜没休息以为你是来自星星，赚着卖白菜的钱，操着卖白粉的心！做这行的没有一个会脑痴呆，因为每天大脑都在高速运转，回来了还要回忆一下整个部门的对照状况。</p><p>工作是高端大气上档次，工资是低调奢华接地气！这就是财会人的精神。</p><p>0 5</p><p>我问大师：“我是做会计的，压力大，吃不好，睡不好，工资少，别人有时间休假，而我却不行，感觉特别累且迷茫，心理堵的慌，大师，我该怎么办？”</p><p>禅师右手捂左胸，不语。</p><p>我追问大师：“您是说不要抱怨，要问心无愧，要对得起心中梦想，对吗？”</p><p>禅师摇了摇头说：“你离我远点，我出家以前就是做这行的！今天听你又说这些，心里堵得慌！</p><p>0 6</p><p>有一天，在公园里·····</p><p>女：“有三室两厅吗？”</p><p>男：“没有！”</p><p>女：“有路虎，奥迪吗？”</p><p>男：“没有！”</p><p>女：“有7位数存款吗？”</p><p>男：“没有！”</p><p>女：“那你有啥？”</p><p>男：“我………”</p><p>女转身就要走···</p><p>突然男的说：“我是做会计的”</p><p>女立刻回头拉住男的手，满脸崇拜的说道：</p><p>“你不早说，工作量那么多，压力那么大，你还能活下来，一定是个潜力股，这就够了！够了！”</p><p>——这是2018年度最励志的段子！</p><p>0 7</p><p>记者问一位大爷说：大爷，您保持年轻的秘诀是什么？</p><p>大爷说：白天出报表，晚上忙加班，一天四包烟，天天吃泡面。</p><p>记者：啊？大爷您是做什么工作的？</p><p>大爷：会计。</p><p>记者：那大爷您今年高寿？</p><p>大爷：32</p><p>0 8</p><p>做会计的人吧，表面风光，内心彷徨；容颜未老，心已沧桑；小有成就，郁闷经常；比骡子累，比蚂蚁忙。</p><p>——处理报表的时侯脑袋脱发面容憔悴，为的是多赚点钱回家孝敬父母，照顾妻儿。</p><p>如果你身边有做会计的朋友，请多给他一点帮助，因为如今财会这行不赚钱。</p><p>吃饭聚会就不要和他AA了，你请他吧；</p><p>有时间多陪陪他，约他吃饭，喝酒各种消费时你来买单吧，不要跟他提钱了；</p><p>工作压力已经很大，请理解她、包容他、打牌也故意输给他；</p><p>临走再塞个万儿八千的红包也行，让他感受到人间的温暖吧；</p><p>请紧密陪伴他，生活是相互扶持的！</p><p>不说了，前边有人扔了个咸鸭蛋！！！</p><p>看完以上的段子，你是不是感同身受，哭笑不得呢？</p><p>虽然有一丢丢夸张搞笑的成分在，但是财会行业是真心不容易！每一个财会人都是可亲可敬的超级英雄！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jumpserver 重置用户密码、新建管理员账户以及重置mfa</title>
      <link href="/2021/10/27/jumpserver-chong-zhi-yong-hu-mi-ma-yi-ji-xin-jian-guan-li-yuan-zhang-hu/"/>
      <url>/2021/10/27/jumpserver-chong-zhi-yong-hu-mi-ma-yi-ji-xin-jian-guan-li-yuan-zhang-hu/</url>
      
        <content type="html"><![CDATA[<p>进入容器：<br>docker exec -it jms_core /bin/bash</p><p>重置密码命令：<br>python manage.py changepassword xxxx<br>python manage.py changepassword 用户名</p><p>手动新建管理员账户：</p><p>python manage.py createsuperuser –username=xxxxx –email=xxxxxxxxxxxxx<br><img "" class="lazyload placeholder" data-original="/images/pasted-34.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>jumpserver的mfa重置功能 ，解决jumpserver 某个用户得mfa得账户出现手机丢失，换手机得情况，我们就需要把这个人得mfa码给重置掉。<br>docker exec -it jms_core /bin/bash<br>cd apps<br>python manage.py shell    </p><p>设置需要修改的用户，xxxx, 修改后，第二次登录就需要重新绑定mfa了</p><p>from users.models import User<br>u = User.objects.get(username=’xxxx’)<br>u.mfa_level=’0’<br>u.otp_secret_key=’’<br>u.save()</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP状态码</title>
      <link href="/2021/10/27/http-zhuang-tai-ma/"/>
      <url>/2021/10/27/http-zhuang-tai-ma/</url>
      
        <content type="html"><![CDATA[<p>HTTP状态码<br>当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。</p><p>HTTP状态码的英文为HTTP Status Code。</p><p>下面是常见的HTTP状态码：</p><p>200 - 请求成功<br>301 - 资源（网页等）被永久转移到其它URL<br>404 - 请求的资源（网页等）不存在<br>500 - 内部服务器错误<br>HTTP状态码分类<br>HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型：</p><p>HTTP状态码分类<br>分类    分类描述<br>1**    信息，服务器收到请求，需要请求者继续执行操作<br>2**    成功，操作被成功接收并处理<br>3**    重定向，需要进一步的操作以完成请求<br>4**    客户端错误，请求包含语法错误或无法完成请求<br>5**    服务器错误，服务器在处理请求的过程中发生了错误<br>HTTP状态码列表:</p><p>HTTP状态码列表<br>状态码    状态码英文名称    中文描述<br>100    Continue    继续。客户端应继续其请求<br>101    Switching Protocols    切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议<br>200    OK    请求成功。一般用于GET与POST请求<br>201    Created    已创建。成功请求并创建了新的资源<br>202    Accepted    已接受。已经接受请求，但未处理完成<br>203    Non-Authoritative Information    非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本<br>204    No Content    无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档<br>205    Reset Content    重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域<br>206    Partial Content    部分内容。服务器成功处理了部分GET请求<br>300    #Multiples# Choices    多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择<br>301    Moved Permanently    永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替<br>302    Found    临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI<br>303    See Other    查看其它地址。与301类似。使用GET和POST请求查看<br>304    Not Modified    未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源<br>305    Use Proxy    使用代理。所请求的资源必须通过代理访问<br>306    Unused    已经被废弃的HTTP状态码<br>307    Temporary Redirect    临时重定向。与302类似。使用GET请求重定向<br>400    Bad Request    客户端请求的语法错误，服务器无法理解<br>401    Unauthorized    请求要求用户的身份认证<br>402    Payment Required    保留，将来使用<br>403    Forbidden    服务器理解请求客户端的请求，但是拒绝执行此请求<br>404    Not Found    服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面<br>405    Method Not Allowed    客户端请求中的方法被禁止<br>406    Not Acceptable    服务器无法根据客户端请求的内容特性完成请求<br>407    Proxy Authentication Required    请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权<br>408    Request Time-out    服务器等待客户端发送的请求时间过长，超时<br>409    Conflict    服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突<br>410    Gone    客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置<br>411    Length Required    服务器无法处理客户端发送的不带Content-Length的请求信息<br>412    Precondition Failed    客户端请求信息的先决条件错误<br>413    Request Entity Too Large    由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息<br>414    Request-URI Too Large    请求的URI过长（URI通常为网址），服务器无法处理<br>415    Unsupported Media Type    服务器无法处理请求附带的媒体格式<br>416    Requested range not satisfiable    客户端请求的范围无效<br>417    Expectation Failed    服务器无法满足Expect的请求头信息<br>500    Internal Server Error    服务器内部错误，无法完成请求<br>501    Not Implemented    服务器不支持请求的功能，无法完成请求<br>502    Bad Gateway    作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应<br>503    Service Unavailable    由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中<br>504    Gateway Time-out    充当网关或代理的服务器，未及时从远端服务器获取请求<br>505    HTTP Version not supported    服务器不支持请求的HTTP协议的版本，无法完成处理<br>| 排序方法 | 平均情况 | 最好情况 | 最坏情况 | 辅助空间 | 稳定性 |<br>|:—–|:—–|:—–|:—–|:—–|:—–|<br>| 冒泡排序 | O(n²) | O(nlogn) | O(n²) | O(1) | 稳定 |<br>| 简单选择 | O(n²) | O(n²) | O(n²) | O(1) | 稳定 |<br>| 直接插入 | O(n²) | O(n) | O(n²) | O(1) | 稳定 |<br>| 希尔排序 | O(nlogn)<del>O(n²) | O(n^1.3) | O(n²) | O(1) | 不稳定 |<br>| 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 |<br>| 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(n) | 不稳定 |<br>| 快速排序 | O(nlogn) | O(nlogn) | O(n²) | O(nlogn)</del>O(n) | 不稳定 |</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos 更改MySQL5.7数据库目录位置</title>
      <link href="/2021/10/27/centos-geng-gai-mysql5-7-shu-ju-ku-mu-lu-wei-zhi/"/>
      <url>/2021/10/27/centos-geng-gai-mysql5-7-shu-ju-ku-mu-lu-wei-zhi/</url>
      
        <content type="html"><![CDATA[<p>Centos 通过yum安装(RPM分发进行安装)MySQL的几个人默认目录如下：    </p><p>目录    目录内容<br>/usr/bin    客户端程序和脚本<br>/usr/sbin    mysqld服务器<br>/var/lib/mysql    日志文件，数据库文件<br>/usr/share/mysql    错误消息和字符集文件<br>/etc/my.cnf    配置文件<br>假如要把目录移到/home/data下需要进行下面几步：    </p><p>1、home目录下建立data目录    </p><p>1 mkdir -p /home/data &amp; cd /home/data/    </p><p>2、把MySQL服务进程停掉    </p><p>1 [root@localhost data]# mysqladmin -u root -p shutdown<br>2 Enter password:    </p><p>3、把/var/lib/mysql整个目录移到/home/data    </p><p>1 mv /var/lib/mysql　/home/data/    </p><p>或者    </p><p>1 cp -R /var/lib/mysql /home/data/    </p><p>这样就把MySQL的数据文件移动到了/home/data/mysql下    </p><p>4、设置/home/data/下mysql文件夹的属主和权限    </p><p>1 chown -R mysql:mysql /home/data/mysql<br>复制代码<br>1 [root@localhost data]# ls<br>2 mysql<br>3 [root@localhost data]# ll<br>4 drwxr-x–x. 5 root root# 4096 10月 31 04:03 mysql<br>5 [root@localhost data]# chown -R mysql:mysql /home/data/mysql<br>6 [root@localhost data]# ll<br>7 drwxr-x–x. 5 mysql mysql# 4096 10月 31 04:03 mysql<br>复制代码    </p><p>5、修改配置文件/etc/my.cnf    </p><p>为保证MySQL能够正常工作，需要指明mysql.sock文件的产生位置。修改socket=/var/lib/mysql/mysql.sock一行中等号右边的值为：/home/data/mysql/mysql.sock 以及修改datadir为/home/data/mysql操作如下：    </p><p>1 #datadir=/var/lib/mysql<br>2 datadir=/home/data/mysql<br>3 #socket=/var/lib/mysql/mysql.sock<br>4 socket=/home/data/mysql/mysql.sock    </p><p>6、重新启动MySQL服务    </p><p>1 service mysqld start    </p><p>往往坑总是一个接着一个。    </p><p>启动异常    </p><p>以上截图看不到任何问题，我们来查看一下日志    </p><p>1 tail -n 1000 /var/log/mysqld.log -f    </p><p>详细的日志信息    </p><p>1 2017-10-31T08:48:06.533321Z 0 [Warning] Can’t create test file /home/data/mysql/localhost.lower-test<br>2 2017-10-31T08:48:06.533401Z 0 [Note] /usr/sbin/mysqld (mysqld 5.7.20) starting as process 25325 …<br>3 2017-10-31T08:48:06.536585Z 0 [Warning] Can’t create test file /home/data/mysql/localhost.lower-test<br>4 2017-10-31T08:48:06.536617Z 0 [Warning] Can’t create test file /home/data/mysql/localhost.lower-test    </p><p>解决：<br>设置一个SELinux即可    </p><p>1 setenforce 0    </p><p>纵然世间炎凉百态！我自依旧初心不改！！    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Nginx的四层和七层代理</title>
      <link href="/2021/10/27/nginx-de-si-ceng-he-qi-ceng-dai-li/"/>
      <url>/2021/10/27/nginx-de-si-ceng-he-qi-ceng-dai-li/</url>
      
        <content type="html"><![CDATA[<p> 理论部分：    </p><p>　所谓四层负载均衡，也就是主要通过报文中的目标地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器，它一般走的是tcp，udp协议    </p><p>   所谓七层负载均衡，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器，他走的是http协议。    </p><p>四层代理实例：    </p><p>和http同等级：所以一般只在http上面一段设置，    </p><p>stream {<br>      server {<br>          listen 30028;<br>          proxy_pass appserver;<br>      }<br>      upstream appserver{<br>          server 10.0.0.12:8080 weight=2;<br>          server 10.0.0.13:8080 weight=2;<br>      }<br>}    </p><p>七层代理实例：    </p><p>在http段里设置：    </p><p>upstream appserver {<br>      server 10.0.0.12:8080 weight=2;<br>      server 10.0.0.13:8080 weight=2;<br>}<br>server {<br>    listen       80;<br>    server_name  localhost;<br>    location / {<br>       proxy_pass <a href="http://appserver/">http://appserver</a>;<br>    }　　    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker利用Dockerfile构建tomcat7-jdk8环境</title>
      <link href="/2021/10/27/docker-li-yong-dockerfile-gou-jian-tomcat7-jdk8-huan-jing/"/>
      <url>/2021/10/27/docker-li-yong-dockerfile-gou-jian-tomcat7-jdk8-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>Dockerfile构建tomcat7-jdk8环境<br>Dockerfile常用命令<br>(1) FROM: 制作image时依据的基本image<br>(2) RUN：制作image时执行的命令，一般在Dockerfile中多次出现<br>(3) CMD：启动docker时执行的命令，在Dockerfile中只出现一次<br>(4) ENV：设置环境变量<br>(5) COPY：制作image时，将文件系统中的文件复制到Docker镜像中<br>(6) WORKDIR：设置工作目录<br>(7) EXPOSE：设置向外暴露的端口<br>(8) VOLUME：设置容器与外界映射的目录<br>[1].创建dockerfile存放目录<br>mkdir -p /app/Docker/Tomcat<br>cd /app/Docker/Tomcat/    </p><p>[2].编写Dockerfile文件<br>cat&gt;/app/Docker/Tomcat/Dockerfile&lt;&lt;EOF<br>FROM centos<br>#指定基础镜像来自于哪里<br>MAINTAINER Tomcat7 images<br>#进行说明<br>ADD jdk1.8.0_144/ /opt/jdk<br>#添加jdk<br>ADD apache-tomcat-7.0.75 /opt/tomcat<br>#添加tomcat<br>#COPY xxx.war /opt/tomcat/webapps/<br>#war包可进行挂在或者直接拷贝<br>EXPOSE 8080<br>#开发端口<br>RUN /usr/bin/sed -i ‘107a JAVA_HOME=/opt/jdk’ /opt/tomcat/bin/catalina.sh<br>#配置环境变量<br>CMD [“/bin/bash”,”-c”,”/opt/tomcat/bin/catalina.sh run”]<br>#开启Tomcat<br>EOF    </p><p>[3].构建镜像<br>docker build -t tomcat7:01 /app/Docker/Tomcat<br>[4].启动容器<br>docker run -d –name “math_tomcat01” -p8080:8080 tomcat7:01<br>docker ps<br>[5].测试,并查看日志<br>测试：curl 127.0.0.1:8080 -I<br>查看日志：docker logs -f math_tomcat01<br>[6].查看负载<br>docker stats tomcat01<br>[7].利用数据方式启动    </p><p>mkdir -p /app/tomcat<br>cd /app/tomcat<br>docker run -d –name “tomcat01” tomcat:01<br>#拷贝出需要后续配置的文件（保持与镜像内文件格式相同）<br>docker cp -a tomcat01:/opt/tomcat/webapps ./<br>docker cp -a tomcat01:/opt/tomcat/logs ./<br>docker cp -a tomcat01:/opt/tomcat/bin ./<br>docker cp -a tomcat01:/opt/tomcat/conf ./<br>docker rm -f tomcat01<br>echo “欢迎使用tomcat7-jdk8”&gt;&gt;/app/data/tomcat/webapps/ROOT/index.html<br>创建数据卷:<br>docker run –name “web_data” -v /app/data/tomcat/webapps:/opt/tomcat/webapps  -v /app/data/tomcat/bin:/opt/tomcat/bin -v /app/data/tomcat/conf:/opt/tomcat/conf -v /app/data/tomcat/logs:/opt/tomcat/logs centos<br>创建tomcat容器启动:<br>docker run -d -p8080:8080 –name “tomcat” –volumes-from web_data tomcat:01    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux系统负载检查方法</title>
      <link href="/2021/10/27/linux-xi-tong-fu-zai-jian-cha-fang-fa/"/>
      <url>/2021/10/27/linux-xi-tong-fu-zai-jian-cha-fang-fa/</url>
      
        <content type="html"><![CDATA[<p>1：load Average<br>   1.1：什么是Load？什么是Load Average?<br>   Load 就是对计算机干活多少的度量（WikiPedia：the system Load is a measure of the amount of work that a compute system is doing）<br>   简单的说是进程队列的长度。Load Average 就是一段时间（1分钟、5分钟、15分钟）内平均Load。【参考文章：unix Load Average Part1：How It Works】    </p><p>   1.2：查看指令：<br>   w or uptime or procinfo or top    </p><p>   load average: 0.02,   0.27,    0.17<br>   1 per/minute 5 per/minute 15 per/minute    </p><p>1.3：如何判断系统是否已经Over Load？<br>对一般的系统来说，根据cpu数量去判断。如果平均负载始终在1.2一下，而你有2颗cup的机器。那么基本不会出现cpu不够用的情况。也就是Load平均要小于Cpu的数量<br>1.4：Load与容量规划（Capacity Planning）<br>       一般是会根据15分钟那个load 平均值为首先。    </p><p>1.5：Load误解：<br>1：系统load高一定是性能有问题。<br>    真相：Load高也许是因为在进行cpu密集型的计算<br>        2：系统Load高一定是CPU能力问题或数量不够。<br>    真相：Load高只是代表需要运行的队列累计过多了。但队列中的任务实际可能是耗Cpu的，也可能是耗i/0奶子其他因素的。<br>3：系统长期Load高，首先增加CPU<br>    真相：Load只是表象，不是实质。增加CPU个别情况下会临时看到Load下降，但治标不治本。    </p><p>2：在Load average 高的情况下如何鉴别系统瓶颈。<br>   是CPU不足，还是io不够快造成或是内存不足？    </p><p>   2.1：查看系统负载vmstat<br>Vmstat<br>procs ———–memory———- —swap– —–io—- –system– —-cpu—-<br>r b swpd free buff cache si so bi bo in cs us sy id wa<br>0 0# 100152 2436 97200 289740 0 1 34 45 99 33 0 0# 99 0    </p><p>procs<br>r 列表示运行和等待cpu时间片的进程数，如果长期大于1，说明cpu不足，需要增加cpu。<br>b 列表示在等待资源的进程数，比如正在等待I/O、或者内存交换等。<br>cpu 表示cpu的使用状态<br>us 列显示了用户方式下所花费 CPU 时间的百分比。us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，需要考虑优化用户的程序。<br>sy 列显示了内核进程所花费的cpu时间的百分比。这里us + sy的参考值为80%，如果us+sy 大于 80%说明可能存在CPU不足。<br>wa 列显示了IO等待所占用的CPU时间的百分比。这里wa的参考值为30%，如果wa超过30%，说明IO等待严重，这可能是磁盘大量随机访问造成的，也可能磁盘或者磁盘访问控制器的带宽瓶颈造成的(主要是块操作)。<br>id 列显示了cpu处在空闲状态的时间百分比<br>system 显示采集间隔内发生的中断数<br>in 列表示在某一时间间隔中观测到的每秒设备中断数。<br>cs列表示每秒产生的上下文切换次数，如当 cs 比磁盘 I/O 和网络信息包速率高得多，都应进行进一步调查。<br>memory<br>swpd 切换到内存交换区的内存数量(k表示)。如果swpd的值不为0，或者比较大，比如超过了100m，只要si、so的值长期为0，系统性能还是正常<br>free 当前的空闲页面列表中内存数量(k表示)<br>buff 作为buffer cache的内存数量，一般对块设备的读写才需要缓冲。<br>cache: 作为page cache的内存数量，一般作为文件系统的cache，如果cache较大，说明用到cache的文件较多，如果此时IO中bi比较小，说明文件系统效率比较好。<br>swap<br>si 由内存进入内存交换区数量。<br>so由内存交换区进入内存数量。<br>IO<br>bi 从块设备读入数据的总量（读磁盘）（每秒kb）。<br>bo 块设备写入数据的总量（写磁盘）（每秒kb）<br>这里我们设置的bi+bo参考值为1000，如果超过1000，而且wa值较大应该考虑均衡磁盘负载，可以结合iostat输出来分析。    </p><p>   2.2：查看磁盘负载iostat<br>每隔2秒统计一次磁盘IO信息，直到按Ctrl+C终止程序，-d 选项表示统计磁盘信息， -k 表示以每秒KB的形式显示，-t 要求打印出时间信息，2 表示每隔 2 秒输出一次。第一次输出的磁盘IO负载状况提供了关于自从系统启动以来的统计信息。随后的每一次输出则是每个间隔之间的平均IO负载状况。    </p><p>#iostat -x 1 10<br>Linux 2.6.18-92.el5xen 02/03/2009<br>avg-cpu:   %user %nice %system %iowait   %steal %idle<br>            1.10 0.00 4.82 39.54 0.07 54.46<br>Device:       rrqm/s wrqm/s r/s w/s rsec/s wsec/s avgrq-sz avgqu-sz await   svctm   %util    </p><p>   rrqm/s: 每秒进行 merge 的读操作数目。即 delta(rmerge)/s<br>   wrqm/s:   每秒进行 merge 的写操作数目。即 delta(wmerge)/s<br>   r/s:           每秒完成的读 I/O 设备次数。即 delta(rio)/s<br>   w/s:       每秒完成的写 I/O 设备次数。即 delta(wio)/s<br>   rsec/s: 每秒读扇区数。即 delta(rsect)/s<br>   wsec/s: 每秒写扇区数。即 delta(wsect)/s<br>   rkB/s:   每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)<br>   wkB/s: 每秒写K字节数。是 wsect/s 的一半。(需要计算)<br>   avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)<br>   avgqu-sz: 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。<br>   await: 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)<br>   svctm: 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)<br>   %util:    一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)    </p><p>   如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘<br>   可能存在瓶颈。<br>   idle小于70% IO压力就较大了,一般读取速度有较多的wait.    </p><p>   同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)    </p><p>   另外还可以参考<br>   一般:<br>   svctm &lt; await (因为同时等待的请求的等待时间被重复计算了)，<br>   svctm的大小一般和磁盘性能有关:CPU/内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。<br>   await: await的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式。<br>   如果 svctm 比较接近 await，说明I/O 几乎没有等待时间；<br>   如果 await 远大于 svctm，说明 I/O队列太长，应用得到的响应时间变慢，<br>   如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator算法，优化应用，或者升级 CPU。<br>   队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。    </p><pre><code> 别人一个不错的例子.(I/O 系统 vs. 超市排队)    </code></pre><p>   举一个例子，我们在超市排队 checkout 时，怎么决定该去哪个交款台呢? 首当是看排的队人数，5个人总比20人要快吧?除了数人头，我们也常常看看前面人购买的东西多少，如果前面有个采购了一星期食品的大妈，那么可以考虑换个队排了。还有就是收银员的速度了，如果碰上了连钱都点不清楚的新手，那就有的等了。另外，时机也很重要，可能 5分钟前还人满为患的收款台，现在已是人去楼空，这时候交款可是很爽啊，当然，前提是那过去的 5 分钟里所做的事情比排队要有意义(不过我还没发现什么事情比排队还无聊的)。<br>   I/O 系统也和超市排队有很多类似之处:<br>   r/s+w/s 类似于交款人的总数<br>   平均队列长度(avgqu-sz)类似于单位时间里平均排队人的个数<br>   平均服务时间(svctm)类似于收银员的收款速度<br>   平均等待时间(await)类似于平均每人的等待时间<br>   平均I/O数据(avgrq-sz)类似于平均每人所买的东西多少<br>   I/O 操作率 (%util)类似于收款台前有人排队的时间比例。<br>   我们可以根据这些数据分析出 I/O 请求的模式，以及 I/O 的速度和响应时间。<br>   下面是别人写的这个参数输出的分析<br>   #iostat -x 1<br>   avg-cpu:   %user %nice %sys %idle<br>   16.24 0.00 4.31 79.44<br>   Device: rrqm/s wrqm/s r/s w/s   rsec/s   wsec/s rkB/s wkB/s avgrq-sz avgqu-sz await   svctm   %util<br>   /dev/cciss/c0d0<br>   0.00   44.90   1.02 27.55 8.16   579.59     4.08 289.80 20.57 22.35 78.21 5.00   14.29<br>   /dev/cciss/c0d0p1<br>   0.00   44.90   1.02 27.55 8.16   579.59     4.08 289.80 20.57 22.35 78.21 5.00   14.29<br>   /dev/cciss/c0d0p2    </p><p>   上面的 iostat 输出表明秒有 28.57 次设备 I/O 操作: 总IO(io)/s = r/s(读) +w/s(写) = 1.02+27.55 = 28.57 (次/秒) 其中写操作占了主体 (w:r = 27:1)。<br>   平均每次设备 I/O 操作只需要 5ms 就可以完成，但每个 I/O 请求却需要等上 78ms，为什么? 因为发出的 I/O 请求太多 (每秒钟约 29 个)，假设这些请求是同时发出的，那么平均等待时间可以这样计算:<br>   平均等待时间 = 单个 I/O 服务时间 * ( 1 + 2 + … + 请求总数-1) / 请求总数<br>   应用到上面的例子: 平均等待时间 = 5ms * (1+2+…+28)/29 = 70ms，和 iostat 给出的78ms 的平均等待时间很接近。这反过来表明 I/O 是同时发起的。<br>   每秒发出的 I/O 请求很多 (约 29 个)，平均队列却不长 (只有 2 个 左右)，这表明这 29 个请求的到来并不均匀，大部分时间 I/O 是空闲的。<br>   一秒中有 14.29% 的时间 I/O 队列中是有请求的，也就是说，85.71% 的时间里 I/O 系统无事可做，所有 29 个 I/O 请求都在142毫秒之内处理掉了。<br>   delta(ruse+wuse)/delta(io) = await = 78.21 =&gt; delta(ruse+wuse)/s=78.21 * delta(io)/s = 78.21*28.57 =2232.8，表明每秒内的I/O请求总共需要等待2232.8ms。所以平均队列长度应为 2232.8ms/1000ms = 2.23，而iostat 给出的平均队列长度 (avgqu-sz) 却为 22.35，为什么?! 因为 iostat 中有 bug，avgqu-sz值应为 2.23，而不是 22.35。    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux服务器下shell脚本加密与破解方法盘点</title>
      <link href="/2021/10/26/linux-fu-wu-qi-xia-shell-jiao-ben-jia-mi-yu-po-jie-fang-fa-pan-dian/"/>
      <url>/2021/10/26/linux-fu-wu-qi-xia-shell-jiao-ben-jia-mi-yu-po-jie-fang-fa-pan-dian/</url>
      
        <content type="html"><![CDATA[<p>当前服务器服务器操作系统主要分为：WINDOWS、LINUX、NETWARE、UNIX四大流派，而Linux系统深受喜爱，今天我们就来盘点Linux系统的shell脚本加密与解密方法。假设有hanming.com.sh脚本。我们要对其进行加密， 废话不多，开始由简单到复杂的介绍。</p><p>一、gzexe压缩加密<br>1、加密方法<br>执行“gzexe hanming.com.sh”，出现“hanming.com.sh”（密文）和“hanming.com.sh~”（明文）两个文件，其hanming.com.sh就是加密好的脚本了。</p><p>2、解密方法<br>就以刚才加密的脚本进行解密，此时我们需要删除刚才的原文文件hanming.com.sh~，直接执行“rm hanming.com.sh”来进行删除，删除的原因是防止干扰大家。</p><p>(1)加密的脚本存在已经存在于目录“/root/”下，我们直接执行“gzexe -d hanming.com.sh”，此时执行“ls”发现也出现了“hanming.com.sh”（明文）和“hanming.com.sh~”（密文）两个文件，hanming.com.sh即解密好的脚本。</p><p>二、shc加密解密<br>1、加密方法<br>(1)安装，依次执行下面代码进行安装。<br>sudo add-apt-repository ppa:neurobin/ppa<br>sudo apt-get update</p><p>sudo apt-get install shc</p><p>上方命令不能安装可以执行下方代码<br>wget -q <a href="http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9.tgz">http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9.tgz</a><br>tar zxvf shc-3.8.9.tgz<br>cd shc-3.8.9</p><p>make</p><p>(2)加密环节</p><p>shc -v -r -T -f hanming.com.sh</p><p>说明：hanming.com.sh是原来脚本，hanming.com.sh.x的已经编译后的二进制可执行文件，而hanming.com.sh.x.c 的是转化的C语言源文件。<br>2、解密方法</p><p>使用unshc.sh脚本解密</p><p>wget <a href="https://raw.githubusercontent.com/yanncam/UnSHc/master/latest/unshc.sh">https://raw.githubusercontent.com/yanncam/UnSHc/master/latest/unshc.sh</a></p><p>chmod 777 ./unshc.sh</p><p>. /unshc.sh hanming.com.sh.x -o hanming.com.sh</p><p>说明：“hanming.com.sh.x”是加密的脚本名，而“hanming.com.sh”是明文</p><p>三、upx加密解密<br>1、加密方法</p><p>(1)下载</p><p>wget <a href="https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz">https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz</a></p><p>tar vxf upx-3.95-amd64_linux.tar.xz</p><p>cd upx-3.95-amd64_linux</p><p>chmod 777 ./upx</p><p>(2)下次需要使用先执行</p><p>cd upx-3.95-amd64_linux</p><p>(3)加密环节</p><p>./upx /root/hanming.com.sh</p><p>此外，upx还能加密后变异一下，让其不能使用脚本解密，但也能够手脱upx加密。</p><p>2、解密方法</p><p>cd upx-3.95-amd64_linux</p><p>./upx -d /root/hanming.com.sh</p><p>综合的加密解密手段<br>1、加密方法<br>先gzexe加密，再shc加密，最后upx<br>需要注意的是进行了upx加密的脚本不能进行shc加密<br>2、解密方法<br>upx解密→shc解密→gzexe解密</p><p>综合来讲，市面上的加密就这几种，防小白，但也不安全。需要更安全的脚本请使用C语言写脚本，有句话说得好，shell能做的，C语言都能做，为什么呢？因为shell是一个用C语言编写的程序，它是用户使用 Linux 的桥梁，既然是C语言编写的，那么shell能做的，C语言当然都能做到。通过C语言编写程序再编译的脚本会更加的安全。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>dpkg 批量卸载</title>
      <link href="/2021/10/26/dpkg-pi-liang-xie-zai/"/>
      <url>/2021/10/26/dpkg-pi-liang-xie-zai/</url>
      
        <content type="html"><![CDATA[<p>dpkg -l |grep deepin|awk ‘{print $2}’|xargs sudo dpkg -P</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ES-9200端口与9300端口</title>
      <link href="/2021/10/26/es-9200-duan-kou-yu-9300-duan-kou/"/>
      <url>/2021/10/26/es-9200-duan-kou-yu-9300-duan-kou/</url>
      
        <content type="html"><![CDATA[<p>（1）Elasticsearch是基于lucene的全文检索服务器</p><p>（1）9300：ES节点之间的通讯使用</p><p>（2）9200：ES节点和外部通讯使用</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux安装ping</title>
      <link href="/2021/10/26/linux-an-zhuang-ping/"/>
      <url>/2021/10/26/linux-an-zhuang-ping/</url>
      
        <content type="html"><![CDATA[<p>使用docker仓库下载的ubuntu 14.04 镜像。里面精简的连 ping 命令都没有。google 百度都搜索不到ping 命令在哪个包里。</p><p>努力找了半天，在一篇文章的字里行间发现了 ping 的来历～</p><p>root@node2:/# apt-get install inetutils-ping</p><p>还有ifconfig<br>可以用 apt-get install net-tools 来安装～ </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker删除状态为Exited的容器</title>
      <link href="/2021/10/26/docker-shan-chu-zhuang-tai-wei-exited-de-rong-qi/"/>
      <url>/2021/10/26/docker-shan-chu-zhuang-tai-wei-exited-de-rong-qi/</url>
      
        <content type="html"><![CDATA[<p>docker rm $(docker ps -qf status=exited)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB给数据库创建用户</title>
      <link href="/2021/10/26/mongodb-gei-shu-ju-ku-chuang-jian-yong-hu/"/>
      <url>/2021/10/26/mongodb-gei-shu-ju-ku-chuang-jian-yong-hu/</url>
      
        <content type="html"><![CDATA[<p>一.先以非授权的模式启动MongoDB<br>非授权：</p><p>linux/Mac : mongod -f /mongodb/etc/mongo.conf</p><p>windows  : mongod –config c:\mongodb\etc\mongo.conf  或者  net start mongodb （前提是mongo安装到了服务里面）</p><p>备注：</p><p>/mongodb/etc/mongo.conf 位mongo配置文件所在的地址</p><p>授权：</p><p>mongod -f /mongodb/etc/mongo.conf –auth</p><p>备注：</p><p>1.–auth代表授权启动，需要帐号密码才能访问</p><p>2.auth=true可以加到mongo.conf配置文件里面去进行统一管理</p><p>二.创建管理员<br>1.通过非授权的方式启动mongo</p><p>2.创建admin数据库</p><p>use admin</p><p>3.添加管理员用户<br>db.createUser({user:”admin”,pwd:”123456”,roles:[“root”]})</p><p>备注：用户名和密码可随意定</p><p>4.认证</p><p>db.auth(“admin”, “123456”)</p><p>三.以授权的方式启动Mongo,给使用的数据库添加用户<br>1.切换数据库</p><p>use test</p><p>2.创建用户</p><p>db.createUser({user: “root”, pwd: “123456”, roles: [{ role: “dbOwner”, db: “test” }]})</p><p>3.通过客户端连接test数据库</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker动态查看日志最后100行</title>
      <link href="/2021/10/26/docker-dong-tai-cha-kan-ri-zhi-zui-hou-100-xing/"/>
      <url>/2021/10/26/docker-dong-tai-cha-kan-ri-zhi-zui-hou-100-xing/</url>
      
        <content type="html"><![CDATA[<p>docker logs -f -t –tail=100 c337e9df72a7<br>指的是实时查看容器id为c337e9df72a7的最后100行日志    </p><p>$ docker logs [OPTIONS] CONTAINER<br>  Options:<br>        –details        显示更多的信息<br>    -f, –follow         跟踪实时日志<br>        –since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）<br>        –tail string    从日志末尾显示多少行日志， 默认是all<br>    -t, –timestamps     显示时间戳<br>        –until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）    </p><p>例子：    </p><p>查看指定时间后的日志，只显示最后100行：    </p><p>$ docker logs -f -t –since=”2018-02-08” –tail=100 CONTAINER_ID    </p><p>查看最近30分钟的日志:    </p><p>$ docker logs –since 30m CONTAINER_ID    </p><p>查看某时间之后的日志：    </p><p>$ docker logs -t –since=”2018-02-08T13:23:37” CONTAINER_ID    </p><p>查看某时间段日志：    </p><p>$ docker logs -t –since=”2018-02-08T13:23:37” –until “2018-02-09T12:23:37” CONTAINER_ID        </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose快速搭建本地ElasticSearch7和Elastichd环境</title>
      <link href="/2021/10/25/shi-yong-docker-compose-kuai-su-da-jian-ben-di-elasticsearch7-he-elastichd-huan-jing/"/>
      <url>/2021/10/25/shi-yong-docker-compose-kuai-su-da-jian-ben-di-elasticsearch7-he-elastichd-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>先编写docker-compose.es.yml</p><pre><code>version: &#39;3&#39;services:  elasticsearch:    image: elasticsearch:7.5.1    container_name: elasticsearch    networks:    - net-es    volumes:    - ../data/elasticsearch/data:/usr/share/elasticsearch/data　　#这里将elasticsearch的数据文件映射本地，以保证下次如果删除了容器还有数据    environment:    - discovery.type=single-node    ports:    - &quot;9200:9200&quot;  elastichd:    image: containerize/elastichd:latest    container_name: elasticsearch-hd    networks:    - net-es    ports:      - &quot;9800:9800&quot;    depends_on:      - &quot;elasticsearch&quot;    links:      - &quot;elasticsearch:demo&quot;#这里要注意，es和eshd要在相同网络才能被linksnetworks:  net-es:    external: false                                           </code></pre><p>启动代码：<br>docker-compose -f docker-compose.es.yml up    </p><p>启动后访问<a href="http://localhost:9800打开elastichd">http://localhost:9800打开elastichd</a></p><p>输入elasticsearch地址点connect即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL创建用户与授权</title>
      <link href="/2021/10/25/mysql-chuang-jian-yong-hu-yu-shou-quan/"/>
      <url>/2021/10/25/mysql-chuang-jian-yong-hu-yu-shou-quan/</url>
      
        <content type="html"><![CDATA[<p>一. 创建用户    </p><p>命令:CREATE USER ‘username‘@’host’ IDENTIFIED BY ‘password’;    </p><p>说明：<br>username：你将创建的用户名<br>host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%<br>password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器<br>例子：<br>CREATE USER ‘dog‘@’localhost’ IDENTIFIED BY ‘123456’;<br>CREATE USER ‘pig‘@’192.168.1.101_’ IDENDIFIED BY ‘123456’;<br>CREATE USER ‘pig‘@’%’ IDENTIFIED BY ‘123456’;<br>CREATE USER ‘pig‘@’%’ IDENTIFIED BY ‘’;<br>CREATE USER ‘pig‘@’%’;    </p><p>二. 授权:    </p><p>命令:GRANT privileges ON databasename.tablename TO ‘username‘@’host’    </p><p>说明:<br>privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALL<br>databasename：数据库名<br>tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用<em>表示，如</em>.*<br>例子:<br>GRANT SELECT, INSERT ON test.user TO ‘pig‘@’%’;<br>GRANT ALL ON <em>.</em> TO ‘pig‘@’%’;<br>GRANT ALL ON maindataplus.* TO ‘pig‘@’%’;<br>注意:<br>用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:<br>GRANT privileges ON databasename.tablename TO ‘username‘@’host’ WITH GRANT OPTION;    </p><p>尝试连接，连接成功    </p><p>三.设置与更改用户密码    </p><p>命令:SET PASSWORD FOR ‘username‘@’host’ = PASSWORD(‘newpassword’);    </p><p>如果是当前登陆用户用:<br>SET PASSWORD = PASSWORD(“newpassword”);<br>例子:<br>SET PASSWORD FOR ‘pig‘@’%’ = PASSWORD(“123456”);    </p><p>四. 撤销用户权限<br>命令:REVOKE privilege ON databasename.tablename FROM ‘username‘@’host’;<br>说明:<br>privilege, databasename, tablename：同授权部分    </p><p>例子:<br>REVOKE SELECT ON <em>.</em> FROM ‘pig‘@’%’;<br>注意:<br>假如你在给用户‘pig‘@’%’授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO ‘pig‘@’%’，则在使用REVOKE SELECT ON <em>.</em> FROM ‘pig‘@’%’;命令并不能撤销该用户对test数据库中user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON <em>.</em> TO ‘pig‘@’%’;则REVOKE SELECT ON test.user FROM ‘pig‘@’%’;命令也不能撤销该用户对test数据库中user表的Select权限。    </p><p>具体信息可以用命令SHOW GRANTS FOR ‘pig‘@’%’; 查看。    </p><p>五.删除用户<br>命令:DROP USER ‘username‘@’host’;    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat项目自动部署脚本</title>
      <link href="/2021/10/18/tomcat-xiang-mu-zi-dong-bu-shu-jiao-ben/"/>
      <url>/2021/10/18/tomcat-xiang-mu-zi-dong-bu-shu-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>一般情况下使用的Linux环境都是加固的，root路径只有超级管理员权限才能进入。我们新建一个自己的用户，在/home下会有一个用户目录，传输war包都放在这个目录下，此时不动webapps文件下的内容，传输包的时候，项目不会中断。    </p><p>如下是部署脚本deploy.sh：    </p><p>复制代码<br>#!/bin/bash<br>#自动部署脚本    </p><p>#tomcat路径<br>tomcatBinPath=/alidata/server/tomcat-7.0.54/bin<br>#war包和脚本目录<br>homepath=/home/baihuidong/DeployApplicationForTomcat    </p><p>echo ‘——–开始部署——–’    </p><p>#检查war包是否存在<br>cd $homepath<br>if [ $(find ./ -maxdepth 1 -name “*.war”|wc -l) -ne 1 ]; then<br>    echo ‘请保证DeployApplicationForTomcat文件中有且只有一个war包！’<br>    exit 1<br>fi    </p><p>#进入tomcat目录<br>cd $tomcatBinPath<br>if [ $? -ne 0 ];then<br>    echo ‘请检查tomcat的bin路径是否正确！’<br>    exit 1<br>fi<br>echo “进入tomcat的bin目录：$tomcatBinPath”    </p><p>pid=$(ps -fu <code>whoami</code>|grep “$tomcatBinPath”|grep -v grep|awk ‘{print $2}’)<br>if [ -z “$pid” ];then<br>    echo “相关tomcat进程已关闭:$pid”<br>else<br>    ./shutdown.sh    #停止tomcat服务<br>    sleep 8<br>    kill -9 $pid<br>    echo ‘成功关闭tomcat服务！’<br>fi    </p><p>#清空oldWarPackage目录<br>cd $homepath<br>if [ $? -ne 0 ];then<br>    echo ‘请检查homepath路径是否正确或者是否有权限进入！’<br>    exit 1<br>fi    </p><p>if [ -d $homepath/oldWarPackage ];then<br>    echo “oldWarPackage文件夹存在！”<br>    rm -rf $homepath/oldWarPackage/*<br>else<br>    echo “oldWarPackage文件夹不存在！”<br>    mkdir $homepath/oldWarPackage<br>fi    </p><p>cd $tomcatBinPath/../webapps/<br>if [ $? -ne 0 ];then<br>    echo ‘请检查webapps路径是否正确！’<br>    exit 1<br>fi<br>echo “进入webapps目录：$(pwd)”    </p><p>cp *.war $homepath/oldWarPackage/<br>if [ $? -ne 0 ];then<br>    echo ‘请检查webapps下是否有war包或者oldWarPackage目录是否存在！’<br>    exit 1<br>fi    </p><p>rm -rf *<br>cp $homepath/*.war ./    </p><p>chown root:root *.war<br>chmod 755 *.war    </p><p>cd $tomcatBinPath<br>./startup.sh    </p><p>echo ‘——–部署结束——–’<br>复制代码<br>若部署中间出错，则使用回滚脚本    </p><p>回滚脚本rollback.sh：    </p><p>复制代码<br>#!/bin/bash<br>#回滚脚本    </p><p>#war包和脚本目录<br>homepath=/home/baihuidong/DeployApplicationForTomcat    </p><p>cd $homepath/oldWarPackage<br>if [ $(find ./ -maxdepth 1 -name “*.war”|wc -l) -ne 1 ]; then<br>    echo ‘请保证oldWarPackage文件中有且只有一个war包！’<br>    exit 1<br>fi    </p><p>echo ‘——回滚开始——‘<br>cd ../<br>rm -rf ./<em>.war<br>cp ./oldWarPackage/</em>.war ./<br>./deploy.sh<br>echo ‘——回滚结束——‘<br>复制代码<br>其实这里的回滚脚本，是重新部署原war包的方案。还有一种方案，就是备份webapps路径下的war包和ROOT文件夹，回滚之后拷贝到webapps下，重启tomcat，这样省去了Tomcat解压war包的时间。    </p><p>注意：    </p><p>如果在Linux下使用vim命令编写脚本，需添加相关执行权限才能被执行（文件名变成绿色）。    </p><p>如果在windows下编写的sh脚本，传到Linux上，需要增加相关执行权限，且需要格式转化    </p><p>使用如下命令进行转换：    </p><p>chmod 755 deploy.sh    //设置执行权限<br>dos2unix deploy.sh    //格式转化<br>busybox dos2unix deploy.sh    //如果提示dos2unix命令找不到，使用这条<br>还可以使用vim进行格式转化。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux 常用命令（一）：操作文件命令</title>
      <link href="/2021/10/18/linux-chang-yong-ming-ling-yi-cao-zuo-wen-jian-ming-ling/"/>
      <url>/2021/10/18/linux-chang-yong-ming-ling-yi-cao-zuo-wen-jian-ming-ling/</url>
      
        <content type="html"><![CDATA[<p>目录    </p><p>一、命令的基本格式<br>  1. 命令的提示符<br>  2. 命令的基本格式<br>二、目录操作命令<br>  1．ls命令<br>  2．cd命令<br>  3．pwd命令<br>  4．mkdir命令<br>  5．rmdir命令<br>三、文件操作命令<br>  1．touch命令<br>  2．stat命令<br>  3．cat命令<br>  4．more命令<br>  5．less命令<br>  6．head命令<br>  7．tail命令<br>  8．ln命令<br>四、目录和文件都能操作的命令<br>  1．rm命令<br>  2．cp命令<br>  3．mv命令<br>一、命令的基本格式    </p><ol><li>命令的提示符<br>[root@localhost ~]<br>[]：这是提示符的分隔符号，没有特殊含义。<br>root：显示的是当前的登录用户，超哥现在使用的是root用户登录  。<br>@：分隔符号，没有特殊含义。<br>localhost：当前系统的简写主机名（完整主机名是localhost.localdomain）。<br>~：代表用户当前所在的目录，此例中用户当前所在的目录是家目录。<br>#：命令提示符。超级用户是#，普通用户是$    </li><li>命令的基本格式<br>[root@localhost ~]# 命令  [选项] [参数]<br>ls是最常见的目录操作命令，主要作用是显示目录下的内容。    命令名称：ls。<br>英文原意：list。<br>所在路径：/bin/ls。<br>执行权限：所有用户。<br>功能描述：显示目录下的内容。<br>复制代码<br>[root@localhost ~]#ls [选项] [文件名或目录名]<br>选项：       <pre><code>-a:        显示所有文件       --color=when: 支持颜色输出，when的值默认是always（总显示颜色），也可以是never（从不显示颜色）和auto（自动）       -d：显示目录信息，而不是目录下的文件      -h：人性化显示，按照我们习惯的单位显示文件大小    -i：显示文件的i节点号    -l：长格式显示    </code></pre>复制代码<br>举几个例子：    </li></ol><p>[root@localhost ~]# ls -l<br>总用量 44 -rw——-. 1 root root#  1207 1月    14 18:18 anaconda-ks.cfg<br>#权限引用计数所有者所属组大小文件修改时间文件名<br>   我们已经知道“-l”选项用于  显示文件的详细信息，那么“-l”选项  显示的这7列分别 是什么含义？    </p><p>   第一列：权限。具体权限的含义将在4.5节中讲解。<br>   第二列：引用计数。文件的引用计数代表该文件的硬链接个数，而目录的引用计数代表该目录有多少个一级子目录。<br>   第三列：所有者，也就是这个文件属于哪个用户。默认所有者是文件的建立用户<br>   第四列：所属组。默认所属组是文件建立用户的有效组，一般情况下就是建立用户的所在组。<br>   第五列：大小。默认单位是字节。<br>   第六列：文件修改时间。文件状态修改时间或文件数据修改时间都会更改这个时间，注意这个时间不是文件的创建时间。<br>   第七列：文件名。选项：是用于调整命令的功能的。参数：是命令的操作对象，如果省略参数，是因为有默认参数<br>  注：选项：是用于调整命令的功能的。参数：是命令的操作对象，如果省略参数，是因为有默认参数    </p><p>二、目录操作命令<br>1．ls命令<br>见前一小节的内容。    </p><p>2．cd命令<br>  cd是切换所在目录的命令，这个命令的基本信息如下。    </p><p>   命令名称：cd。<br>   英文原意：change directory。<br>   所在路径：Shell内置命令。<br>   执行权限：所有用户。<br>   功能描述：切换所在目录。<br>2.1cd命令的简化用法<br>特殊符号       作                用<br> ~     代表用户的家目录    </p><ul><li> 代表上次所在目录<br>.     代表当前目录<br>..     代表上级目录    </li></ul><p>2.2 绝对路径和相对路径<br>    绝对路径：以跟目录为参照物，从根目录开始，一级一级进入目录    </p><pre><code>相对路径：以当前目录作为参照物，进行目录查找    </code></pre><p>3．pwd命令<br>   pwd命令是查询所在目录的命令，基本信息如下：    </p><p>   命令名称：pwd英文原意：print name of current/working directory<br>   所在路径：/bin/pwd执行权限：所有用户。<br>   功能描述：查询所在的工作目录。<br>4．mkdir命令<br>   mkdir是创建目录的命令，其基本信息如下。    </p><p>   命令名称：mkdir。英文原意：make directories。<br>   所在路径：/bin/mkdir。<br>   执行权限：所有用户。<br>   功能描述：创建空目录。<br>命令格式    </p><p>[root@localhost ~]# mkdir [选项] 目录名<br>选项：<br>     -p：递归建立所需目录<br>5．rmdir命令<br>  既然有建立目录的命令，就一定会有删除目录的命令rmdir，其基本信息如下。    </p><p>   命令名称：rmdir。<br>   英文原意：remove empty directories。<br>   所在路径：/bin/rmdir。<br>   执行权限：所有用户。<br>   功能描述：删除空目录。<br>命令格式    </p><p>root@localhost ~]# rmdir [选项] 目录名<br>选项：<br>    -p：递归删除目录<br>   注：rmdir命令的作用十分有限，因为只能删除空目录，所以一旦目录中有内容，就会报错。这个命令比较“笨”，所以我们不太常用。后续我们不论删除的是文件还是目录，都会使用rm命令    </p><p>三、文件操作命令<br>1．touch命令<br>  创建空文件或修改文件时间，这个命令的基本信息如下。    </p><p>   命令名称：touch。<br>   英文原意：change file timestamps。<br>   所在路径：/bin/touch。<br>   执行权限：所有用户。<br>   功能描述：修改文件的时间戳。<br>2．stat命令<br>  stat是查看文件详细信息的命令，而且可以看到文件的这三个时间，其基本信息如下。    </p><p>   命令名称：stat。<br>   英文原意：display file or file system status。<br>   所在路径：/usr/bin/stat。<br>   执行权限：所有用户。<br>功能描述：显示文件或文件系统的详细信息。<br>命令格式    </p><p>复制代码<br>[root@localhost ~]# stat  anaconda-ks.cfg<br>   文件：”anaconda-ks.cfg”<br>   大小：1453      块：8          IO 块：4096   普通文件<br>设备：803h/2051d Inode：33574991    硬链接：1<br>权限：(0600/-rw——-)  Uid：(    0/    root)   Gid：(    0/    root)<br>环境：system_u:object_r:admin_home_t:s0<br>最近访问：2018-11-06 23:22:23.409038121 +0800<br>最近更改：2018-10-24 00:53:08.760018638 +0800 #数据修改时间<br>最近改动：2018-10-24 00:53:08.760018638 +0800 #状态修改时间<br>创建时间：-<br>复制代码<br>3．cat命令<br>  cat命令用来查看文件内容。这个命令的基本信息如下。    </p><p>   命令名称：cat。<br>   英文原意：concatenate files and print on the standard output。<br>   所在路径：/bin/cat。<br>   执行权限：所有用户。<br>  功能描述：合并文件并打印输出到标准输出。<br>命令格式    </p><p>复制代码<br>[root@localhost ~]# cat [选项] 文件名<br>选项：<br>     -A：相当于-vET选项的整合，用于列出所有隐藏符号<br>     -E：列出每行结尾的回车符$<br>     -n：显示行号<br>     -T：把Tab键用^I显示出来<br>     -v：列出特殊字符<br>复制代码<br>4．more命令<br>  more是分屏显示文件的命令，其基本信息如下。    </p><p>   命令名称：more。<br>   英文原意：file perusal filter for crt viewin。<br>   所在路径：/bin/more。<br>   执行权限：所有用户。<br>   功能描述：分屏显示文件内容。<br>  more命令比较简单，一般不用什么选项，命令会打开一个交互界面，可以识别一些交互命令。常用的交互命令如下。    </p><p>   空格键：向下翻页。<br>   b：向上翻页。<br>   回车键：向下滚动一行。<br>   /字符串：搜索指定的字符串。<br>   q：退出  。<br>5．less命令<br>  less命令和more命令类似，只是more是分屏显示命令，而less是分行显示命令，其基本信息如下。    </p><p>   命令名称：less。<br>   英文原意：opposite of more。<br>   所在路径：/usr/bin/less。<br>   执行权限：所有用户。<br>功能描述：分行显示文件内容<br>6．head命令<br>  head是用来显示文件开头的命令，其基本信息如下。    </p><p>   命令名称：head。<br>   英文原意：output the first part of files。<br>   所在路径：/usr/bin/head。<br>   执行权限：所有用户。<br>   功能描述：显示文件开头的内容。<br>命令格式    </p><p>[root@localhost ~]# head [选项] 文件名<br>选项：<br>     -n 行数：从文件头开始，显示指定行数<br>     -v：显示文件名    </p><p>7．tail命令<br>  既然有显示文件开头的命令，就会有显示文件结尾的命令。tail命令的基本信息如下。    </p><p>   命令名称：tail。<br>   英文原意：output the last part of files。<br>   所在路径：/usr/bin/tail。执行权限：所有用户。<br>   功能描述：显示文件结尾的内容。<br>命令格式    </p><p>[root@localhost ~]# tail [选项] 文件名<br>选项：<br>      -n 行数：从文件结尾开始，显示指定行数<br>      -f：监听文件的新增内容    </p><p>8．ln命令<br>  我们来看看ln命令的基本信息。    </p><p>   命令名称：ln。<br>   英文原意：make links between file。<br>   所在路径：/bin/ln。<br>   执行权限：所有用户。<br>   功能描述：在文件之间建立链接。<br>命令格式    </p><p>[root@localhost ~]# ln [选项] 源文件目标文件<br>选项：<br>      -s：建立软链接文件。如果不加“-s”选项，则建立硬链接文件<br>      -f：强制。如果目标文件已经存在，则删除目标文件后再建立链接文件<br>注：链接文件的意思我认为就是文件挂载    </p><p>8.1 硬链接<br>命令格式    </p><p>[root@localhost ~]# touch cangls<br>[root@localhost ~]# ln /root/cangls /tmp/<br>#建立硬链接文件，目标文件没有写文件名，会和原名一致<br>#也就是/root/cangls和/tmp/cangls是硬链接文件<br>硬链接特征：    </p><p>   源文件和硬链接文件拥有相同的Inode和Blockl<br>   修改任意一个文件，另一个都改变<br>   删除任意一个文件，另一个都能使用<br>   硬链接标记不清，很难确认硬链接文件位置，不建议使用<br>   硬链接不能链接目录l硬链接不能跨分区<br>8.1 软链接<br>命令格式    </p><p>[root@localhost ~]# touch bols<br>[root@localhost ~]# ln -s /root/bols  /tmp/<br>#建立软链接文件<br>软链接特征：    </p><p>   软链接和源文件拥有不同的Inode和Block<br>   两个文件修改任意一个，另一个都改变<br>   删除软链接，源文件不受影响；删除源文件，软链接不能使用<br>   软链接没有实际数据，只保存源文件的Inode，不论源文件多大，软链接大小不变<br>   软链接的权限是最大权限lrwxrwxrwx.，但是由于没有实际数据，最终访问时需要参考源文件权限<br>   软链接可以链接目录<br>   软链接可以跨分区l软链接特征明显，建议使用软连接<br>四、目录和文件都能操作的命令<br>1．rm命令<br>  rm是强大的删除命令，不仅可以删除文件，也可以删除目录。这个命令的基本信息如下。    </p><p>   命令名称：rm。    </p><p>   英文原意：remove files or directories。    </p><p>   所在路径：/bin/rm。    </p><p>   执行权限：所有用户。    </p><p>   功能描述：删除文件或目录。    </p><p>命令格式    </p><p>[root@localhost ~]# rm [选项] 文件或目录<br>选项：<br>      -f：强制删除（force）<br>      -i：交互删除，在删除之前会询问用户<br>      -r：递归删除，可以删除目录（recursive）<br>2．cp命令<br>  cp是用于复制的命令，其基本信息如下：    </p><p>   命令名称：cp。    </p><p>   英文原意：copy files and directories。    </p><p>   所在路径：/bin/cp。    </p><p>   执行权限：所有用户。    </p><p>   功能描述：复制文件和目录 。    </p><p>命令格式    </p><p>复制代码<br>[root@localhost ~]# cp [选项] 源文件   目标文件<br>选项：<br>      -a：相当于-dpr选项的集合，这几个选项我们一一介绍<br>      -d：如果源文件为软链接（对硬链接无效），则复制出的目标文件也为软链接<br>      -i：询问，如果目标文件已经存在，则会询问是否覆盖<br>      -p：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间）<br>      -r：递归复制，用于复制目录<br>复制代码<br>3．mv命令<br>  mv是用来剪切的命令，其基本信息如下。    </p><p>   命令名称：mv。<br>   英文原意：move (rename) files。<br>   所在路径：/bin/mv。<br>   执行权限：所有用户。<br>   功能描述：移动文件或改名。<br>命令格式    </p><p>[root@localhost ~]# mv [选项] 源文件目标文件<br>选项：<br>      -f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖<br>      -i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项）<br>      -v：显示详细信息    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>centos7 安装docker-compose</title>
      <link href="/2021/10/18/docker-compose-an-zhuang/"/>
      <url>/2021/10/18/docker-compose-an-zhuang/</url>
      
        <content type="html"><![CDATA[<p>推荐使用docker官方的docker-compose安装教程<br>官网安装教程    </p><p>推荐使用pip安装docker-compose，因为pip可以为你自动对应版本问题<br>安装pip<br>yum -y install epel-release<br>yum -y install python3-pip<br>确认版本<br>pip –version<br>更新pip<br>pip3 install –upgrade pip<br>安装docker-compose<br>pip3 install docker-compose<br>查看版本<br>docker-compose version</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker构建python3.7镜像</title>
      <link href="/2021/10/18/docker-gou-jian-python3-7-jing-xiang/"/>
      <url>/2021/10/18/docker-gou-jian-python3-7-jing-xiang/</url>
      
        <content type="html"><![CDATA[<p>安装 Docker Engine-Community<br>使用 Docker 仓库进行安装</p><p>在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。</p><p>设置仓库</p><p>安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。</p><p>$ sudo yum install -y yum-utils \<br>  device-mapper-persistent-data \<br>  lvm2<br>使用以下命令来设置稳定的仓库。</p><p>$ sudo yum-config-manager \<br> –add-repo \<br>    <a href="https://download.docker.com/linux/centos/docker-ce.repo">https://download.docker.com/linux/centos/docker-ce.repo</a><br>安装 Docker Engine-Community</p><p>安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本：</p><p>$ sudo yum install docker-ce docker-ce-cli containerd.io<br>如果提示您接受 GPG 密钥，请选是。</p><p>启动 Docker。</p><p>$ sudo  systemctl start docker<br>构建python3镜像<br>一.在Dockerfile/Dockerfile 中写入以下代码    </p><p>注意：Dockerfile目录中最好不要有多余的文件,也会发送给docker引擎，速度会变慢</p><pre><code>###############################################基于centos7构建python3运行环境#构建命令: 在Dockerfile文件目录下执行 docker build -t python:37 .#容器启动命令: docker run -itd --name python --restart always --privileged=true -v /root/dockers/python:/root/python -v /root/dockers/python/cron:/var/spool/cron python:37 /usr/sbin/init#进入容器：docker exec -it python /bin/bash##############################################FROM centos:7.6.1810MAINTAINER mioshu # 指定作者信息RUN set -ex \   # 预安装所需组件   &amp;&amp; yum install -y wget tar libffi-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make initscripts \   &amp;&amp; wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz \   &amp;&amp; tar -zxvf Python-3.7.0.tgz \   &amp;&amp; cd Python-3.7.0 \   &amp;&amp; ./configure prefix=/usr/local/python3 \   &amp;&amp; make \   &amp;&amp; make install \   &amp;&amp; make clean \   &amp;&amp; rm -rf /Python-3.7.0* \   &amp;&amp; yum install -y epel-release \   &amp;&amp; yum install -y python-pip#设置默认为python3RUN set -ex \   # 备份旧版本python   &amp;&amp; mv /usr/bin/python /usr/bin/python27 \   &amp;&amp; mv /usr/bin/pip /usr/bin/pip27 \   # 配置默认为python3   &amp;&amp; ln -s /usr/local/python3/bin/python3.7 /usr/bin/python \   &amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip#修复因修改python版本导致yum失效问题RUN set -ex \   &amp;&amp; sed -i &quot;s#/usr/bin/python#/usr/bin/python2.7#&quot; /usr/bin/yum \   &amp;&amp; sed -i &quot;s#/usr/bin/python#/usr/bin/python2.7#&quot; /usr/libexec/urlgrabber-ext-down \   &amp;&amp; yum install -y deltarpm#基础环境配置RUN set -ex \   # 修改系统时区为东八区   &amp;&amp; rm -rf /etc/localtime \   &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \   &amp;&amp; yum install -y vim \   # 安装定时任务组件   &amp;&amp; yum -y install cronie#支持中文RUN yum install kde-l10n-Chinese -yRUN localedef -c -f UTF-8 -i zh_CN zh_CN.utf8#更新pip版本RUN pip install --upgrade pipENV LC_ALL zh_CN.UTF-8</code></pre><p>二 dockerfile构建命令:</p><p>在Dockerfile文件目录下执行</p><p>docker build -t python:37 .<br>-t：指定镜像名称</p><p>三 启动容器</p><p>docker run -itd –name python –restart always –privileged=true -v /root/dockers/python:/root/python -v /root/dockers/python/cron:/var/spool/cron python:37 /usr/sbin/init<br>docker run 命令会创建一个名为python的容器<br>-i：互交模式<br>-t：终端模式<br>-d：后台启动<br>–name： 容器名称，即后面的python<br>-v：资源卷映射，主机目录、文件映射到容器目录、文件<br>四 进入容器</p><p>docker exec -it python /bin/bash<br>五 导出容器</p><p>Ctrl + d 退出当前容器后执行下面语句</p><p>docker export python &gt; python.tar<br>六、导入容器</p><p>docker import python.tar python:3<br>通过export+import的方法创建镜像不会保留镜像历史，可以缩小镜像体积</p><p>七、push到hub</p><p>需要先到 <a href="https://hub.docker.com/">https://hub.docker.com</a> 注册一个账号</p><p>上传完成后可以在任一主机上拉取镜像：</p><p>docker pull vfrtgb158/python:3</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 20.04 安装 nfs</title>
      <link href="/2021/10/18/ubuntu-16-04-an-zhuang-nfs/"/>
      <url>/2021/10/18/ubuntu-16-04-an-zhuang-nfs/</url>
      
        <content type="html"><![CDATA[<p>Ubuntu 20.04系统上NFS的安装与使用</p><p>摘要：本文介绍了NFS服务器的安装过程、配置文件和常用命令行工具，以及NFS客户端上如何安装常用工具，介绍如何挂载共享目录，并通过实验进行验证。</p><p>一、服务器端：</p><p>1.1安装NFS服务：</p><p>#执行以下命令安装NFS服务器，</p><p>#apt会自动安装nfs-common、rpcbind等13个软件包</p><p>sudo apt install nfs-kernel-server</p><p>1.2编写配置文件：</p><p>#编辑/etc/exports 文件：</p><p>sudo vi /etc/exports</p><p>#/etc/exports文件的内容如下：</p><p>/tmp *(rw,sync,no_subtree_check,no_root_squash)</p><p>/data *(rw,sync,no_subtree_check,no_root_squash)</p><p>/logs *(rw,sync,no_subtree_check,no_root_squash)</p><p>1.3创建共享目录</p><p>#在服务器端创建/tmp /data和/logs共享目录</p><p>sudo mkdir -p /tmp</p><p>sudo mkdir -p /data</p><p>sudo mkdir -p /logs</p><p>1.4重启nfs服务：</p><p>sudo service nfs-kernel-server restart</p><p>1.5常用命令工具：</p><p>#在安装NFS服务器时，已包含常用的命令行工具，无需额外安装。</p><p>#显示已经mount到本机nfs目录的客户端机器。</p><p>sudo showmount -e localhost</p><p>#将配置文件中的目录全部重新export一次！无需重启服务。</p><p>sudo exportfs -rv</p><p>#查看NFS的运行状态</p><p>sudo nfsstat</p><p>#查看rpc执行信息，可以用于检测rpc运行情况</p><p>sudo rpcinfo</p><p>#查看网络端口，NFS默认是使用111端口。</p><p>sudo netstat -tu -4</p><p>二、客户端：</p><p>2.1安装客户端工具：</p><p>#在需要连接到NFS服务器的客户端机器上，</p><p>#需要执行以下命令，安装nfs-common软件包。</p><p>#apt会自动安装nfs-common、rpcbind等12个软件包</p><p>sudo apt install nfs-common</p><p>2.2查看NFS服务器上的共享目录</p><p>#显示指定的（192.168.3.167）NFS服务器上export出来的目录</p><p>sudo showmount -e 192.168.3.167</p><p>2.3创建本地挂载目录</p><p>sudo mkdir -p /mnt/data</p><p>sudo mkdir -p /mnt/logs</p><p>2.4挂载共享目录</p><p>#将NFS服务器192.168.3.167上的目录，挂载到本地的/mnt/目录下</p><p>sudo mount -t nfs 192.168.3.167:/data /mnt/data</p><p>sudo mount -t nfs 192.168.3.167:/logs /mnt/logs</p><p>#注：在没有安装nfs-common或者nfs-kernel-server软件包的机器上，</p><p>#直接执行showmount、exportfs、nfsstat、rpcinfo等命令时，</p><p>#系统会给出友好的提示，</p><p>#比如直接showmount会提示需要执行sudo apt install nfs-common命令，</p><p>#比如直接rpcinfo会提示需要执行sudo apt install rpcbind命令。</p><p>实验附图：</p><p>1-在没有安装nfs相关软件包的机器上，直接执行nfsstat和rpcinfo命令时，会给出安装提示</p><p>2-在没有安装nfs相关软件包的机器上，直接执行exportfs和showmount命令时，会给出的安装提示</p><p>3-在NFS服务器上使用apt命令，安装nfs-kernel-server软件包，系统提示同时安装nfs-common,rpcinfo等13个软件包</p><p>4-完成NFS服务器端的安装以后，查看etc下exports文件的默认内容</p><p>5-查看NFS服务器端的目录，创建共享目录，重启nfs服务</p><p>6-在NFS服务器端查看共享出来的目录</p><p>7-重启NFS服务，查看服务器端的共享目录，查看NFS的状态，以及RPC信息</p><p>8-在客户端192.168.3.166机器上，查看NFS服务器167上的共享目录</p><p>9-在客户端192.168.3.166上使用mount命令挂载NFS服务器167上的共享目录，查看目录中的内容</p><p>【结束】</p><p>参考链接：</p><p>超全面的NFS详解</p><p><a href="http://server.51cto.com/sManage-150923.htm">http://server.51cto.com/sManage-150923.htm</a> </p><p>ubuntu 16.04 nfs服务的搭建 </p><p><a href="http://www.cnblogs.com/MoreExcellent/p/7222895.html">http://www.cnblogs.com/MoreExcellent/p/7222895.html</a>  </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux下批量ping某个网段的脚本</title>
      <link href="/2021/10/18/linux-xia-pi-liang-ping-mou-ge-wang-duan-de-jiao-ben/"/>
      <url>/2021/10/18/linux-xia-pi-liang-ping-mou-ge-wang-duan-de-jiao-ben/</url>
      
        <content type="html"><![CDATA[<p>比如现在需要对192.168.1.0/24网段的ip进行检查，检查哪些ip现在被占用，哪些ip没有被占用，可以通过ping命令来检查，也可以通过nmap接参数来检查    </p><p>ping命令脚本如下：    </p><p>复制代码<br>[root@ZFVM-APP-0-172 shell]# vim ping.sh<br>#!/bin/bash<br>. /etc/init.d/functions<br>for var in {1..254};<br>do<br>ip=192.168.1.$var<br>ping -c2 $ip &gt;/dev/null 2&gt;&amp;1<br>if [ $? = 0 ];then<br>action “$ip” /bin/true<br>else<br>action “$ip” /bin/false<br>fi<br>done    </p><p>复制代码<br>复制代码<br>[root@uatdns01 opt]# bash ping.sh<br>172.168.1.1                                                [FAILED]<br>172.168.1.2                                                [FAILED]<br>172.168.1.3                                                [FAILED]<br>172.168.1.4                                                [FAILED]<br>172.168.1.5                                                [FAILED]<br>………<br>………<br>192.168.1.249                                              [FAILED]<br>192.168.1.250                                              [FAILED]<br>192.168.1.251                                              [FAILED]<br>192.168.1.252                                              [FAILED]<br>192.168.1.253                                              [FAILED]<br>192.168.1.254                                              [FAILED]<br>复制代码<br>用nmap需要先安装nmap命令    </p><p>复制代码<br>[root@ZFVM-APP-0-172 shell]# yum install -y nmap    </p><p>[root@ZFVM-APP-0-172 shell]# nmap -v -sP 192.168.1.0/24 |grep down<br>Nmap scan report for 192.168.1.0 [host down]<br>Nmap scan report for 192.168.1.2 [host down]<br>Nmap scan report for 192.168.1.3 [host down]<br>Nmap scan report for 192.168.1.4 [host down]<br>Nmap scan report for 192.168.1.5 [host down]<br>……<br>……<br>Nmap scan report for 192.168.1.251 [host down]<br>Nmap scan report for 192.168.1.252 [host down]<br>Nmap scan report for 192.168.1.253 [host down]<br>Nmap scan report for 192.168.1.254 [host down]<br>Nmap scan report for 192.168.1.255 [host down]<br>复制代码<br> 检查192.168.1.1网关是否可达的脚本    </p><p>复制代码<br>[root@ZFVM-APP-0-161 shells]# vim ping.sh<br>#!/bin/bash<br>ping <a href="http://www.baidu.com/">www.baidu.com</a> -c 4 -W 5 &gt; /dev/null 2&gt;&amp;1<br>if [ $? -eq 0 ]<br>then<br>  echo “网络已通”<br>else<br>  echo “网络不可达”<br>fi<br>复制代码    </p><p>执行结果    </p><p>[root@ZFVM-APP-0-161 shells]# sh ping.sh<br>网络可通    </p><p><em><strong><strong><strong><strong><strong><strong><strong>运维攻城狮</strong></strong></strong></strong></strong></strong></strong></em>    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>samba用户自行修改密码</title>
      <link href="/2021/10/15/samba-yong-hu-zi-xing-xiu-gai-mi-ma/"/>
      <url>/2021/10/15/samba-yong-hu-zi-xing-xiu-gai-mi-ma/</url>
      
        <content type="html"><![CDATA[<p>最近一直在潜心研究linux shell,所以好久没有更新了。今天也是在QQ有人和我聊到samba密码ldap集中验证时，想到一个问题，内网使用samba服务器来存储用户数据，所有的用户不能登陆LINUX后台，如何让客户自行修改密码？</p><p>想要解决客户端实现修改samba密码，其实不需要去搭建ldap(维护成本较高)，也不需要利用行政手法统计客户端密码（毕竟同事也不好意思告诉你他平时习惯用的密码），网上google了下，利用changepassword这个工具即可利用其WEB界面让普通用户登录WEB修改自己的密码，大大提高了工作效率。</p><p>SAMBA: CentOS默认yum源</p><p>CHANGEPASSWORD: changepassword-0.9</p><p>APACHE: httpd-2.4.4</p><p>一.环境搭建：</p><p>1.配置前先关闭iptables和SELINUX，避免配置过程中报错。</p><p>#service iptables stop</p><p>#setenforce 0</p><p>#vi /etc/sysconfig/selinux</p><hr><p>SELINUX=disabled</p><hr><p>2.安装开发包</p><p>#yum install gcc -y</p><p>3.安装apache<br>#yum install httpd -y</p><p>传送门：<a href="http://www.linuxidc.com/Linux/2013-05/83788.htm">http://www.linuxidc.com/Linux/2013-05/83788.htm</a></p><p>二.配置samba：</p><p>1.安装samba:</p><p>#yum install samba -y</p><p>2.配置samba:</p><p>要使用changepassword程序实现，客户端更改密码必须设置系统密码和samba密码同步</p><p>#vi /etc/samba/smb.conf</p><p>搜索security = user 添加以下内容(这里注释了默认一行内容)</p><hr><p>security = user</p><p>pam password change = no</p><p>passwd chat = *<em>NEW</em>UNIX<em>password</em> %n\n <em>Retype</em>new<em>UNIX</em>password* %n\n <em>successfully</em></p><p>passwd program = LANG=en_US /usr/bin/passwd %u</p><p>unix password sync = yes</p><p>passdb backend = smbpasswd</p><p>smb passwd file = /etc/samba/smbpasswd</p><p>#passdb backend = tdbsam</p><hr><p>#service smb restart</p><p>注：上述修改其实将tdbsam认证方式修改该成smbpasswd,并将认证文件加密保存在/etc/samba/smbpasswd下</p><p>创建smb账户</p><p>#useradd -s /sbin/nologin test04</p><p>#passwd test04</p><p>#smbpasswd -a test04</p><p>注：这里创建samba账户时必须设置系统账户密码，以及smb账户密码</p><p>因为changepassword更改密码的机制是，先修改系统账户密码，然后将系统账户密码同步到 /etc/samba/smbpasswd SMB密码库文件下。</p><p>二.安装配置changepassword</p><p>1,下载解压:</p><p>#wget <a href="http://prdownloads.sourceforge.net/changepassword/changepassword-0.9.tar.gz">http://prdownloads.sourceforge.net/changepassword/changepassword-0.9.tar.gz</a></p><p>#tar -zxvf changepassword-0.9.tar.gz</p><p>#cd changepassword-0.9</p><p>vim conf.h</p><p>将前三行的定义修改为自己创建的目录（这里我修改到了/var/smbchangepwd目录下）：</p><p>// temporary directory and files to use<br>char TMPFILE[]=”/var/smbchangepwd/changepassword-shadow-XXXXXX”;<br>char TMPSMBFILE[]=”/var/smbchangepwd/changepassword-smb-XXXXXX”;<br>char TMPSQUIDFILE[]=”/var/smbchangepwd/changepassword-squid-XXXXXX”;</p><p>创建需要用到的目录</p><p>mkdir –pv /var/smbchangepwd</p><p>2.编译changepassword前需要安装一个依赖包</p><p>#cd smbencrypt/</p><p>#tar -xzvf libdes-4.04b.tar.gz</p><p>#cd des/</p><p>#make</p><p>#cp libdes.a ../</p><p>#cd ../..</p><p>3.编译安装changepassword</p><p>#./configure -enable-cgidir=/var/www/cgi-bin -enable-language=Chinese -enable-smbpasswd=/etc/samba/smbpasswd -disable-squidpasswd -enable-logo=logo.jpg</p><p>注：-enable-smbpasswd=/etc/samba/smbpasswd # 修改保存samba密码的库文件</p><p>-disable-squidpasswd # 禁用squid</p><p>-enable-cgidir # 自定义apache根目录路径</p><p>-disable-squidpasswd # 自定义smbpassword的密码文件路径</p><p>-enable-logo # 设置web根目录logo文件,此处的相对路径对应的是apache根目录</p><p>#也就是 samba/logo.jpg对应/var/www/cgi-bin/logo.jpg</p><p>#make &amp;&amp; make install</p><p>4.设置apache支持cgi模块</p><p>#vim /etc/httpd/conf/httpd.conf</p><p>搜索cgi 去掉如下注释：</p><hr><p>AddHandler cgi-script .cgi</p><p>————– 将AddDefaultCharset的值改为 GB2312，以防中文乱码</p><p>重启服务</p><p>#service httpd restart</p><p>5.访问web后台：</p><p><a href="http://192.168.1.28/cgi-bin/changepassword.cgi">http://192.168.1.28/cgi-bin/changepassword.cgi</a></p><p>按照提示修改密码提交即可</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Debian GNU/Linux 换源</title>
      <link href="/2021/10/14/debian-gnu-linux-huan-yuan/"/>
      <url>/2021/10/14/debian-gnu-linux-huan-yuan/</url>
      
        <content type="html"><![CDATA[<p>Debian 默认源， /etc/apt/sources.list<br>删除/移除 默认源  /etc/apt/sources.list</p><p>##这里使用163的镜像站<br>执行：<br>echo ‘deb <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br>deb <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br>deb <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br>deb <a href="http://mirrors.163.com/debian-security/">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian-security/">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib’ &gt; /etc/apt/sources.list</p><p>163镜像站</p><p>deb <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br>deb <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br>deb <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-updates main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian/">http://mirrors.163.com/debian/</a> stretch-backports main non-free contrib<br>deb <a href="http://mirrors.163.com/debian-security/">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib<br>deb-src <a href="http://mirrors.163.com/debian-security/">http://mirrors.163.com/debian-security/</a> stretch/updates main non-free contrib</p><p>中科大镜像站<br>deb <a href="https://mirrors.ustc.edu.cn/debian/">https://mirrors.ustc.edu.cn/debian/</a> stretch main contrib non-free<br>deb-src <a href="https://mirrors.ustc.edu.cn/debian/">https://mirrors.ustc.edu.cn/debian/</a> stretch main contrib non-free</p><p>deb <a href="https://mirrors.ustc.edu.cn/debian/">https://mirrors.ustc.edu.cn/debian/</a> stretch-updates main contrib non-free<br>deb-src <a href="https://mirrors.ustc.edu.cn/debian/">https://mirrors.ustc.edu.cn/debian/</a> stretch-updates main contrib non-free</p><p>deb <a href="https://mirrors.ustc.edu.cn/debian/">https://mirrors.ustc.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb-src <a href="https://mirrors.ustc.edu.cn/debian/">https://mirrors.ustc.edu.cn/debian/</a> stretch-backports main contrib non-free</p><p>deb <a href="https://mirrors.ustc.edu.cn/debian-security/">https://mirrors.ustc.edu.cn/debian-security/</a> stretch/updates main contrib non-free<br>deb-src <a href="https://mirrors.ustc.edu.cn/debian-security/">https://mirrors.ustc.edu.cn/debian-security/</a> stretch/updates main contrib non-free</p><p>阿里云镜像站<br>deb <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> stretch main non-free contrib<br>deb-src <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> stretch main non-free contrib<br>deb <a href="http://mirrors.aliyun.com/debian-security">http://mirrors.aliyun.com/debian-security</a> stretch/updates main<br>deb-src <a href="http://mirrors.aliyun.com/debian-security">http://mirrors.aliyun.com/debian-security</a> stretch/updates main<br>deb <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> stretch-updates main non-free contrib<br>deb-src <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> stretch-updates main non-free contrib<br>deb <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> stretch-backports main non-free contrib<br>deb-src <a href="http://mirrors.aliyun.com/debian/">http://mirrors.aliyun.com/debian/</a> stretch-backports main non-free contrib</p><p>华为镜像站<br>deb <a href="https://mirrors.huaweicloud.com/debian/">https://mirrors.huaweicloud.com/debian/</a> stretch main contrib non-free<br>deb-src <a href="https://mirrors.huaweicloud.com/debian/">https://mirrors.huaweicloud.com/debian/</a> stretch main contrib non-free<br>deb <a href="https://mirrors.huaweicloud.com/debian/">https://mirrors.huaweicloud.com/debian/</a> stretch-updates main contrib non-free<br>deb-src <a href="https://mirrors.huaweicloud.com/debian/">https://mirrors.huaweicloud.com/debian/</a> stretch-updates main contrib non-free<br>deb <a href="https://mirrors.huaweicloud.com/debian/">https://mirrors.huaweicloud.com/debian/</a> stretch-backports main contrib non-free<br>deb-src <a href="https://mirrors.huaweicloud.com/debian/">https://mirrors.huaweicloud.com/debian/</a> stretch-backports main contrib non-free </p><p>清华大学镜像站<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> stretch main contrib non-free<br>deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> stretch main contrib non-free<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> stretch-updates main contrib non-free<br>deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> stretch-updates main contrib non-free<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian/">https://mirrors.tuna.tsinghua.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/debian-security/">https://mirrors.tuna.tsinghua.edu.cn/debian-security/</a> stretch/updates main contrib non-free<br>deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/debian-security/">https://mirrors.tuna.tsinghua.edu.cn/debian-security/</a> stretch/updates main contrib non-free</p><p>兰州大学镜像站<br>deb <a href="http://mirror.lzu.edu.cn/debian">http://mirror.lzu.edu.cn/debian</a> stable main contrib non-free<br>deb-src <a href="http://mirror.lzu.edu.cn/debian">http://mirror.lzu.edu.cn/debian</a> stable main contrib non-free<br>deb <a href="http://mirror.lzu.edu.cn/debian">http://mirror.lzu.edu.cn/debian</a> stable-updates main contrib non-free<br>deb-src <a href="http://mirror.lzu.edu.cn/debian">http://mirror.lzu.edu.cn/debian</a> stable-updates main contrib non-free<br>deb <a href="http://mirror.lzu.edu.cn/debian/">http://mirror.lzu.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb-src <a href="http://mirror.lzu.edu.cn/debian/">http://mirror.lzu.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb <a href="http://mirror.lzu.edu.cn/debian-security/">http://mirror.lzu.edu.cn/debian-security/</a> stretch/updates main contrib non-free<br>deb-src <a href="http://mirror.lzu.edu.cn/debian-security/">http://mirror.lzu.edu.cn/debian-security/</a> stretch/updates main contrib non-free</p><p>上海交大镜像站<br>deb <a href="https://mirror.sjtu.edu.cn/debian/">https://mirror.sjtu.edu.cn/debian/</a> stretch main contrib non-free<br>deb-src <a href="https://mirror.sjtu.edu.cn/debian/">https://mirror.sjtu.edu.cn/debian/</a> stretch main contrib non-free<br>deb <a href="https://mirror.sjtu.edu.cn/debian/">https://mirror.sjtu.edu.cn/debian/</a> stretch-updates main contrib non-free<br>deb-src <a href="https://mirror.sjtu.edu.cn/debian/">https://mirror.sjtu.edu.cn/debian/</a> stretch-updates main contrib non-free<br>deb <a href="https://mirror.sjtu.edu.cn/debian/">https://mirror.sjtu.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb-src <a href="https://mirror.sjtu.edu.cn/debian/">https://mirror.sjtu.edu.cn/debian/</a> stretch-backports main contrib non-free<br>deb <a href="https://mirror.sjtu.edu.cn/debian-security/">https://mirror.sjtu.edu.cn/debian-security/</a> stretch/updates main contrib non-free<br>deb-src <a href="https://mirror.sjtu.edu.cn/debian-security/">https://mirror.sjtu.edu.cn/debian-security/</a> stretch/updates main contrib non-free</p><p>最后附上官方全球镜像站列表地址<a href="https://www.debian.org/mirror/list">https://www.debian.org/mirror/list</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>K8S中Harbor使用Nginx反向代理无法获取image</title>
      <link href="/2021/10/13/k8s-zhong-harbor-shi-yong-nginx-fan-xiang-dai-li-wu-fa-huo-qu-image/"/>
      <url>/2021/10/13/k8s-zhong-harbor-shi-yong-nginx-fan-xiang-dai-li-wu-fa-huo-qu-image/</url>
      
        <content type="html"><![CDATA[<p>问题：Kubernetes创建Pod失败，无法获取image</p><p>Failed create pod sandbox: rpc error: code = Unknown desc = failed pulling image “harbor.od.com/public/pause:latest”: Error response from daemon: Get <a href="http://harbor.od.com/v2/public/pause/manifests/latest">http://harbor.od.com/v2/public/pause/manifests/latest</a>: Get <a href="http://harbor.od.com:180/service/token?scope=repository:public/pause:pull&amp;service=harbor-registry">http://harbor.od.com:180/service/token?scope=repository%3Apublic%2Fpause%3Apull&amp;service=harbor-registry</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers</p><p>环境：<br>harbor.od.com二进制包安装，使用docker-compose启动，<br>harbor.yaml配置port：180<br>然后通过部署nginx，反向到后端harbor上    </p><p>故障排查：</p><p>1.使用docker pull 仓库镜像也无法获取</p><p>Error response from daemon: Get <a href="http://harbor.od.com/v2/public/pause/manifests/latest">http://harbor.od.com/v2/public/pause/manifests/latest</a>: Get <a href="http://harbor.od.com:180/service/token?scope=repository:public/paue:pull&amp;service=harbor-registry">http://harbor.od.com:180/service/token?scope=repository%3Apublic%2Fpaue%3Apull&amp;service=harbor-registry</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>2.使用docker loginx登录Harbor</p><p>Error response from daemon: Get <a href="https://harbor,od,com/v2/">https://harbor,od,com/v2/</a>: dial tcp: lookup harbor,od,com: no such host</p><p>3.修改成使用IP的方式登录Harbor</p><p>Error response from daemon: Get <a href="http://harbor.od.com/v2/">http://harbor.od.com/v2/</a>: Get <a href="http://harbor.od.com:180/service/token?account=admin&amp;client_id=docker&amp;offline_token=true&amp;service=habor-registry">http://harbor.od.com:180/service/token?account=admin&amp;client_id=docker&amp;offline_token=true&amp;service=habor-registry</a>: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers)</p><p>分析问题：</p><p>docker使用Http请求获取镜像，harbor是通过nginx的80端口访问，但是通过Log上看到的是使用Get方式，另外还要带有域名加180端口方式验证，应该是配置问题引起</p><p>#<a href="https://www.cnblogs.com/liucx/">https://www.cnblogs.com/liucx/</a></p><p>解决问题：<br>修改harbor.yml配置文件，取消external_url注释，设置为：</p><p>external_url: <a href="http://harbor.od.com/">http://harbor.od.com:80</a><br>然后，docker-compose down停止所有服务，删除当前配置目录：rm -rf ./common/config下配置清单，重新执行install.sh生成配置，即可解决</p><p>配置大概解释：如果使用外部代理就要启动该项<br>#Uncomment external_url if you want to enable external proxy<br>#And when it enabled the hostname will no longer used</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Docker镜像的导入导出</title>
      <link href="/2021/10/13/docker-jing-xiang-de-dao-ru-dao-chu/"/>
      <url>/2021/10/13/docker-jing-xiang-de-dao-ru-dao-chu/</url>
      
        <content type="html"><![CDATA[<p>Docker镜像的导入导出<br>本文介绍Docker镜像的导入导出，用于迁移、备份、升级等场景，准备环境如下：</p><p>CentOS 7.0<br>Docker 1.18<br>导入导出命令介绍<br>涉及的命令有export、import、save、load</p><p>save<br>命令<br>docker save [options] images [images…]</p><p>示例<br>docker save -o nginx.tar nginx:latest<br>或<br>docker save &gt; nginx.tar nginx:latest<br>其中-o和&gt;表示输出到文件，nginx.tar为目标文件，nginx:latest是源镜像名（name:tag）<br>load<br>命令<br>docker load [options]</p><p>示例<br>docker load -i nginx.tar<br>或<br>docker load &lt; nginx.tar<br>其中-i和&lt;表示从文件输入。会成功导入镜像及相关元数据，包括tag信息<br>export<br>命令<br>docker export [options] container</p><p>示例<br>docker export -o nginx-test.tar nginx-test<br>其中-o表示输出到文件，nginx-test.tar为目标文件，nginx-test是源容器名（name）<br>import<br>命令<br>docker import [options] file|URL|- [REPOSITORY[:TAG]]</p><p>示例<br>docker import nginx-test.tar nginx:imp<br>或<br>cat nginx-test.tar | docker import - nginx:imp<br>区别<br>export命令导出的tar文件略小于save命令导出的    </p><p>export命令是从容器（container）中导出tar文件，而save命令则是从镜像（images）中导出<br>基于第二点，export导出的文件再import回去时，无法保留镜像所有历史（即每一层layer信息，不熟悉的可以去看Dockerfile），不能进行回滚操作；而save是依据镜像来的，所以导入时可以完整保留下每一层layer信息。如下图所示，nginx:latest是save导出load导入的，nginx:imp是export导出import导入的。</p><p>建议<br>可以依据具体使用场景来选择命令</p><p>若是只想备份images，使用save、load即可<br>若是在启动容器后，容器内容有变化，需要备份，则使用export、import</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>curl 的用法指南</title>
      <link href="/2021/10/13/curl-de-yong-fa-zhi-nan/"/>
      <url>/2021/10/13/curl-de-yong-fa-zhi-nan/</url>
      
        <content type="html"><![CDATA[<p>简介<br>curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。</p><p>它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。</p><p>本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自《curl cookbook》。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的《curl 初学者教程》。</p><p>不带有任何参数时，curl 就是发出 GET 请求。</p><p>$ curl <a href="https://www.example.com/">https://www.example.com</a><br>上面命令向<a href="http://www.example.com发出/">www.example.com发出</a> GET 请求，服务器返回的内容会在命令行输出。</p><p>-A<br>-A参数指定客户端的用户代理标头，即User-Agent。curl 的默认用户代理字符串是curl/[version]。</p><p>$ curl -A ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36’ <a href="https://google.com/">https://google.com</a><br>上面命令将User-Agent改成 Chrome 浏览器。</p><p>$ curl -A ‘’ <a href="https://google.com/">https://google.com</a><br>上面命令会移除User-Agent标头。</p><p>也可以通过-H参数直接指定标头，更改User-Agent。</p><p>$ curl -H ‘User-Agent: php/1.0’ <a href="https://google.com/">https://google.com</a><br>-b<br>-b参数用来向服务器发送 Cookie。</p><p>$ curl -b ‘foo=bar’ <a href="https://google.com/">https://google.com</a><br>上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。</p><p>$ curl -b ‘foo1=bar;foo2=bar2’ <a href="https://google.com/">https://google.com</a><br>上面命令发送两个 Cookie。</p><p>$ curl -b cookies.txt <a href="https://www.google.com/">https://www.google.com</a><br>上面命令读取本地文件cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。</p><p>-c<br>-c参数将服务器设置的 Cookie 写入一个文件。</p><p>$ curl -c cookies.txt <a href="https://www.google.com/">https://www.google.com</a><br>上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。</p><p>-d<br>-d参数用于发送 POST 请求的数据体。</p><p>$ curl -d’login=emma＆password=123’-X POST <a href="https://google.com/login">https://google.com/login</a><br>#或者<br>$ curl -d ‘login=emma’ -d ‘password=123’ -X POST  <a href="https://google.com/login">https://google.com/login</a><br>使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。</p><p>-d参数可以读取本地文本文件的数据，向服务器发送。</p><p>$ curl -d ‘@data.txt’ <a href="https://google.com/login">https://google.com/login</a><br>上面命令读取data.txt文件的内容，作为数据体向服务器发送。</p><p>–data-urlencode<br>–data-urlencode参数等同于-d，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。</p><p>$ curl –data-urlencode ‘comment=hello world’ <a href="https://google.com/login">https://google.com/login</a><br>上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。</p><p>-e<br>-e参数用来设置 HTTP 的标头Referer，表示请求的来源。</p><p>curl -e ‘<a href="https://google.com/?q=example&#39;">https://google.com?q=example&#39;</a> <a href="https://www.example.com/">https://www.example.com</a><br>上面命令将Referer标头设为<a href="https://google.com/?q=example%E3%80%82">https://google.com?q=example。</a></p><p>-H参数可以通过直接添加标头Referer，达到同样效果。</p><p>curl -H ‘Referer: <a href="https://google.com/?q=example&#39;">https://google.com?q=example&#39;</a> <a href="https://www.example.com/">https://www.example.com</a><br>-F<br>-F参数用来向服务器上传二进制文件。</p><p>$ curl -F ‘file=@photo.png’ <a href="https://google.com/profile">https://google.com/profile</a><br>上面命令会给 HTTP 请求加上标头Content-Type: multipart/form-data，然后将文件photo.png作为file字段上传。</p><p>-F参数可以指定 MIME 类型。</p><p>$ curl -F ‘file=@photo.png;type=image/png’ <a href="https://google.com/profile">https://google.com/profile</a><br>上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream。</p><p>-F参数也可以指定文件名。</p><p>$ curl -F ‘file=@photo.png;filename=me.png’ <a href="https://google.com/profile">https://google.com/profile</a><br>上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。</p><p>-G<br>-G参数用来构造 URL 的查询字符串。</p><p>$ curl -G -d ‘q=kitties’ -d ‘count=20’ <a href="https://google.com/search">https://google.com/search</a><br>上面命令会发出一个 GET 请求，实际请求的 URL 为<a href="https://google.com/search?q=kitties&amp;count=20%E3%80%82%E5%A6%82%E6%9E%9C%E7%9C%81%E7%95%A5--G%EF%BC%8C%E4%BC%9A%E5%8F%91%E5%87%BA%E4%B8%80%E4%B8%AA">https://google.com/search?q=kitties&amp;count=20。如果省略--G，会发出一个</a> POST 请求。</p><p>如果数据需要 URL 编码，可以结合–data–urlencode参数。</p><p>$ curl -G –data-urlencode ‘comment=hello world’ <a href="https://www.example.com/">https://www.example.com</a><br>-H<br>-H参数添加 HTTP 请求的标头。</p><p>$ curl -H ‘Accept-Language: en-US’ <a href="https://google.com/">https://google.com</a><br>上面命令添加 HTTP 标头Accept-Language: en-US。</p><p>$ curl -H ‘Accept-Language: en-US’ -H ‘Secret-Message: xyzzy’ <a href="https://google.com/">https://google.com</a><br>上面命令添加两个 HTTP 标头。</p><p>$ curl -d ‘{“login”: “emma”, “pass”: “123”}’ -H ‘Content-Type: application/json’ <a href="https://google.com/login">https://google.com/login</a><br>上面命令添加 HTTP 请求的标头是Content-Type: application/json，然后用-d参数发送 JSON 数据。</p><p>-i<br>-i参数打印出服务器回应的 HTTP 标头。</p><p>$ curl -i <a href="https://www.example.com/">https://www.example.com</a><br>上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。</p><p>-I<br>-I参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。</p><p>$ curl -I <a href="https://www.example.com/">https://www.example.com</a><br>上面命令输出服务器对 HEAD 请求的回应。</p><p>–head参数等同于-I。</p><p>$ curl –head <a href="https://www.example.com/">https://www.example.com</a><br>-k<br>-k参数指定跳过 SSL 检测。</p><p>$ curl -k <a href="https://www.example.com/">https://www.example.com</a><br>上面命令不会检查服务器的 SSL 证书是否正确。</p><p>-L<br>-L参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。</p><p>$ curl -L -d ‘tweet=hi’ <a href="https://api.twitter.com/tweet">https://api.twitter.com/tweet</a><br>–limit-rate<br>–limit-rate用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。</p><p>$ curl –limit-rate 200k <a href="https://google.com/">https://google.com</a><br>上面命令将带宽限制在每秒 200K 字节。</p><p>-o<br>-o参数将服务器的回应保存成文件，等同于wget命令。</p><p>$ curl -o example.html <a href="https://www.example.com/">https://www.example.com</a><br>上面命令将<a href="http://www.example.com保存成example.html./">www.example.com保存成example.html。</a></p><p>-O<br>-O参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。</p><p>$ curl -O <a href="https://www.example.com/foo/bar.html">https://www.example.com/foo/bar.html</a><br>上面命令将服务器回应保存成文件，文件名为bar.html。</p><p>-s<br>-s参数将不输出错误和进度信息。</p><p>$ curl -s <a href="https://www.example.com/">https://www.example.com</a><br>上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</p><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><p>$ curl -s -o /dev/null <a href="https://google.com/">https://google.com</a><br>-S<br>-S参数指定只输出错误信息，通常与-s一起使用。</p><p>$ curl -s -o /dev/null <a href="https://google.com/">https://google.com</a><br>上面命令没有任何输出，除非发生错误。</p><p>-u<br>-u参数用来设置服务器认证的用户名和密码。</p><p>$ curl -u ‘bob:12345’ <a href="https://google.com/login">https://google.com/login</a><br>上面命令设置用户名为bob，密码为12345，然后将其转为 HTTP 标头Authorization: Basic Ym9iOjEyMzQ1。</p><p>curl 能够识别 URL 里面的用户名和密码。</p><p>$ curl <a href="https://bob:12345@google.com/login">https://bob:12345@google.com/login</a><br>上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。</p><p>$ curl -u ‘bob’ <a href="https://google.com/login">https://google.com/login</a><br>上面命令只设置了用户名，执行后，curl 会提示用户输入密码。</p><p>-v<br>-v参数输出通信的整个过程，用于调试。</p><p>$ curl -v <a href="https://www.example.com/">https://www.example.com</a><br>–trace参数也可以用于调试，还会输出原始的二进制数据。</p><p>$ curl –trace - <a href="https://www.example.com/">https://www.example.com</a><br>-x<br>-x参数指定 HTTP 请求的代理。</p><p>$ curl -x socks5://james:<a href="mailto:&#x63;&#97;&#116;&#x73;&#64;&#109;&#x79;&#112;&#x72;&#x6f;&#x78;&#121;&#x2e;&#99;&#x6f;&#109;">&#x63;&#97;&#116;&#x73;&#64;&#109;&#x79;&#112;&#x72;&#x6f;&#x78;&#121;&#x2e;&#99;&#x6f;&#109;</a>:8080 <a href="https://www.example.com/">https://www.example.com</a><br>上面命令指定 HTTP 请求通过myproxy.com:8080的 socks5 代理发出。</p><p>如果没有指定代理协议，默认为 HTTP。</p><p>$ curl -x james:<a href="mailto:&#99;&#x61;&#x74;&#x73;&#64;&#109;&#121;&#x70;&#x72;&#x6f;&#120;&#x79;&#x2e;&#99;&#x6f;&#109;">&#99;&#x61;&#x74;&#x73;&#64;&#109;&#121;&#x70;&#x72;&#x6f;&#120;&#x79;&#x2e;&#99;&#x6f;&#109;</a>:8080 <a href="https://www.example.com/">https://www.example.com</a><br>上面命令中，请求的代理使用 HTTP 协议。</p><p>-X<br>-X参数指定 HTTP 请求的方法。</p><p>$ curl -X POST <a href="https://www.example.com/">https://www.example.com</a><br>上面命令对<a href="https://www.example.com发出/">https://www.example.com发出</a> POST 请求。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>E: 错误，pkgProblemResolver::Resolve 发生故障，这可能是有软件包被要求保持现状的缘故。 E: 无法更正依赖关系</title>
      <link href="/2021/10/13/e-cuo-wu-pkgproblemresolver-resolve-fa-sheng-gu-zhang-zhe-ke-neng-shi-you-ruan-jian-bao-bei-yao-qiu-bao-chi-xian-zhuang-de-yuan-gu-e-wu-fa-geng-zheng-yi-lai-guan-xi/"/>
      <url>/2021/10/13/e-cuo-wu-pkgproblemresolver-resolve-fa-sheng-gu-zhang-zhe-ke-neng-shi-you-ruan-jian-bao-bei-yao-qiu-bao-chi-xian-zhuang-de-yuan-gu-e-wu-fa-geng-zheng-yi-lai-guan-xi/</url>
      
        <content type="html"><![CDATA[<p>mentohust:i386 已经是最新的版本了。<br>您可能需要运行“apt-get -f install”来纠正下列错误：<br>下列软件包有未满足的依赖关系：<br> mentohust:i386 : 依赖: libpcap0.8:i386 但是它将不会被安装 或<br>                          libpcap0.9:i386 但无法安装它 或<br>                          libpcap1.0:i386 但无法安装它 或<br>                          libpcap1:i386 但无法安装它<br> wps-office : 依赖: libc6:i386 (&gt;= 2.12) 但是它将不会被安装<br>              依赖: libstdc++6:i386 (&gt;= 4.5) 但是它将不会被安装<br>              依赖: libfreetype6:i386 (&gt;= 2.4) 但是它将不会被安装<br>              依赖: libglu1-mesa:i386 但是它将不会被安装<br>              依赖: libcups2:i386 但是它将不会被安装<br>              依赖: libglib2.0-0:i386 但是它将不会被安装<br>              依赖: libsm6:i386 但是它将不会被安装<br>              依赖: libxrender1:i386 但是它将不会被安装<br>              依赖: libfontconfig1:i386 但是它将不会被安装<br>              推荐: ttf-mscorefonts-installer 但是它将不会被安装<br>E: 有未能满足的依赖关系。请尝试不指明软件包的名字来运行“apt-get -f install”(也可以指定一个解决办法)。</p><p>E: 错误，pkgProblemResolver::Resolve 发生故障，这可能是有软件包被要求保持现状的缘故。</p><p>E: 无法更正依赖关系</p><p>卸载包</p><p>apt-get purge mentohust</p><p>或者更换一下源</p><p>gedit /etc/apt/sources.list<br>#华中科技大学更新服务器<br>deb <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic main restricted universe multiverse<br>deb <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-backports restricted universe multiverse<br>deb <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-proposed main restricted universe multiverse<br>deb <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-security main restricted universe multiverse<br>deb <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-updates main restricted universe multiverse<br>deb-src <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic main restricted universe multiverse<br>deb-src <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-backports main restricted universe multiverse<br>deb-src <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-proposed main restricted universe multiverse<br>deb-src <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-security main restricted universe multiverse<br>deb-src <a href="http://mirrors.hust.edu.cn/ubuntu/">http://mirrors.hust.edu.cn/ubuntu/</a> utopic-updates main restricted universe multiverse</p><p>完啦以后<br>apt-get -f install<br>会要求卸载有冲突的软件包</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决取消挂载时 umount: /mnt: device is busy</title>
      <link href="/2021/10/13/1/"/>
      <url>/2021/10/13/1/</url>
      
        <content type="html"><![CDATA[<p>取消挂载/mnt时出现 umount: /mnt: device is busy,</p><p>原因是因为有程序在使用 /mnt 目录，我们可以使用 fuser 命令查看挂载目录被哪些进程占用</p><p>fuser -kvm /mnt<br>然后 kill 就可以了。</p><p>命令：kill -9 pid</p><p>如果还是不行，还可以强行解除挂载</p><p>umount -l /mnt 强行解除挂载</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux mysql5.7设置中文字符集</title>
      <link href="/2021/10/13/linux-mysql5-7-she-zhi-zhong-wen-zi-fu-ji/"/>
      <url>/2021/10/13/linux-mysql5-7-she-zhi-zhong-wen-zi-fu-ji/</url>
      
        <content type="html"><![CDATA[<p>ubuntu20.04已测试</p><p>注意版本，好像从5.6根5.5就不一样，配置文件更深了一层。</p><p>1.用vim或nano编辑   /etc/mysql/mysql.conf.d/mysqld.cnf</p><p>2.[mysqld]后面添加  character_set_server=utf8     保存退出</p><p>3.#service mysql restart</p><p>4.登录mysql   #mysql -u root -p      后mysql&gt;show variables like ‘character%’查看编码是否都变成了utf8，如果还有latin编码则失败。</p><p><img "" class="lazyload placeholder" data-original="/images/pasted-21.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu sudo免密码操作</title>
      <link href="/2021/10/12/ubuntu-sudo-mian-mi-ma-cao-zuo/"/>
      <url>/2021/10/12/ubuntu-sudo-mian-mi-ma-cao-zuo/</url>
      
        <content type="html"><![CDATA[<p>sudo vi /etc/sudoers<br>输入密码<br>添加cunzhang ALL=(ALL) NOPASSWD : ALL<br>注释掉 #%sudo  ALL=(ALL:ALL) ALL<br>改成%sudo ALL=NOPASSWD: ALL</p><p>wq! 保存</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vmware workstation16许可证密钥</title>
      <link href="/2021/10/12/vmware-workstation16-xu-ke-zheng-mi-yao/"/>
      <url>/2021/10/12/vmware-workstation16-xu-ke-zheng-mi-yao/</url>
      
        <content type="html"><![CDATA[<p>vmware workstation16许可证密钥</p><p>ZF3R0-FHED2-M80TY-8QYGC-NPKYF<br>YF390-0HF8P-M81RQ-2DXQE-M2UT6<br>ZF71R-DMX85-08DQY-8YMNC-PPHV8</p><p>前面的如果已经失效，用下面的</p><p>FA1M0-89YE3-081TQ-AFNX9-NKUC0</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jenkins ssh连接超时错误</title>
      <link href="/2021/10/12/jenkins-ssh-lian-jie-chao-shi-cuo-wu/"/>
      <url>/2021/10/12/jenkins-ssh-lian-jie-chao-shi-cuo-wu/</url>
      
        <content type="html"><![CDATA[<p>SSH: Disconnecting configuration [汇保理测试] …<br>ERROR: Exception when publishing, exception message [Exec timed out or <code>was</code> interrupted after  120,000  ms]<br>Finished: UNSTABLE<br>解决办法很简单：    </p><p>1.延长timeout时间如下，默认的timeout时间为120秒：<br>1<br>1.延长timeout时间如下，默认的timeout时间为120秒：</p><ol start="2"><li>测试过程中发现及时timeout了调用的脚本也会执行完，只是在Jenkins看不到输出的日志。</li></ol><p>3.如果Job会执行很长时间，也不想等timeout可以勾选[Exec in pty]选项</p><p>勾选后再执行，成功</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker logs－查看docker容器日志</title>
      <link href="/2021/10/12/docker-logs-cha-kan-docker-rong-qi-ri-zhi/"/>
      <url>/2021/10/12/docker-logs-cha-kan-docker-rong-qi-ri-zhi/</url>
      
        <content type="html"><![CDATA[<p>通过docker logs命令可以查看容器的日志。    </p><p>命令格式：    </p><p>$ docker logs [OPTIONS] CONTAINER<br>  Options:<br>        –details        显示更多的信息<br>    -f, –follow         跟踪实时日志<br>        –since string   显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟）<br>        –tail string    从日志末尾显示多少行日志， 默认是all<br>    -t, –timestamps     显示时间戳<br>        –until string   显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）<br>例子：    </p><p>查看指定时间后的日志，只显示最后100行：</p><p>docker logs –tail 50 –follow –timestamps  id</p><p>$ docker logs -f -t –since=”2018-02-08” –tail=100 CONTAINER_ID<br>查看最近30分钟的日志:    </p><p>$ docker logs –since 30m CONTAINER_ID<br>查看某时间之后的日志：    </p><p>$ docker logs -t –since=”2018-02-08T13:23:37” CONTAINER_ID<br>查看某时间段日志：    </p><p>$ docker logs -t –since=”2018-02-08T13:23:37” –until “2018-02-09T12:23:37” CONTAINER_ID    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>【Docker】容器与系统时间同步</title>
      <link href="/2021/10/12/docker-rong-qi-yu-xi-tong-shi-jian-tong-bu/"/>
      <url>/2021/10/12/docker-rong-qi-yu-xi-tong-shi-jian-tong-bu/</url>
      
        <content type="html"><![CDATA[<p>宿主机时间<br>[root@slave-1 ~]# date<br>Fri May 12 11:20:30 CST 2017    </p><p>容器时间<br>[root@slave-1 ~]# docker exec -ti 87986863838b /bin/bash<br>root@87986863838b:/# date<br>Fri May 12 03:20:33 UTC 2017<br>发现两者之间的时间相差了八个小时！<br>宿主机采用了CST时区，CST应该是指（China Shanghai Time，东八区时间）<br>容器采用了UTC时区，UTC应该是指（Coordinated Universal Time，标准时间）    </p><p>统一两者的时区有下面几种方法    </p><p>1）共享主机的localtime    </p><p>创建容器的时候指定启动参数，挂载localtime文件到容器内，保证两者所采用的时区是一致的。<br>#docker run -ti -d –name my-nginx -v /etc/localtime:/etc/localtime:ro  docker.io/nginx  /bin/bash<br>2)复制主机的localtime    </p><p>[root@slave-1 ~]# docker cp /etc/localtime 87986863838b:/etc/    </p><p>然后再登陆容器，查看时间，发现已经跟宿主机时间同步了<br>[root@slave-1 ~]# docker exec -ti 87986863838b /bin/bash<br>root@87986863838b:/# date<br>Fri May 12 11:26:19 CST 2017<br>3）创建dockerfile文件的时候，自定义该镜像的时间格式及时区。在dockerfile文件里添加下面内容：    </p><p>……<br>FROM tomcat<br>ENV CATALINA_HOME /usr/local/tomcat<br>…….<br>#设置时区<br>RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo ‘Asia/Shanghai’ &gt;/etc/timezone    </p><p>保存后，利用docker build命令生成镜像使用即可,使用dockerfile创建的镜像的容器改变了容器的时区，<br>这样不仅保证了容器时间与宿主机时间一致（假如宿主机也是CST）,并且像上面使用tomcat作为父镜像的话，JVM的时区也是CST,<br>这样tomcat的日志信息的时间也是和宿主机一致的，像上面那两种方式只是保证了宿主机时间与容器时间一致，JVM的时区并没有改变，tomcat日志的打印时间依旧是UTC。    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安装Maven环境</title>
      <link href="/2021/10/12/an-zhuang-maven-huan-jing/"/>
      <url>/2021/10/12/an-zhuang-maven-huan-jing/</url>
      
        <content type="html"><![CDATA[<p>因为用到的docker镜像中不包含maven，所以要在宿主机中安装，通过文件挂载的方式提供调用    </p><p>（1）切换到要安装的文件夹    </p><p>cd /opt/software<br>（2）下载maven包    </p><p>wget <a href="http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz">http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz</a><br>（3）解压    </p><p>tar -xzvf apache-maven-3.6.3-bin.tar.gz<br>（4）配置settings.xml（可选）<br>此处使用了阿里云的Maven仓库    </p><mirror>        <id>aliyunmaven</id>        <mirrorOf>*</mirrorOf>        <name>阿里云公共仓库</name>        <url>https://maven.aliyun.com/repository/public</url>    </mirror>    （5）添加环境变量    <p>vi /etc/profile<br>在文件底部加上    </p><p>export M2_HOME=/opt/software/apache-maven-3.6.3<br>export PATH=$PATH:${M2_HOME}/bin<br>保存并退出编辑，使用下面的命令让修改生效    </p><p>source /etc/profile<br>（6）验证Maven安装    </p><p>mvn -version    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>unbuntu 安装cdua11.4</title>
      <link href="/2021/10/11/unbuntu-an-zhuang-cdua11-4/"/>
      <url>/2021/10/11/unbuntu-an-zhuang-cdua11-4/</url>
      
        <content type="html"><![CDATA[<p>​<br>1.备份原来的源，将以前的源备份一下，以防以后可以用的。</p><p> </p><p>sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</p><p>2.打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。</p><p>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal main restricted universe multiverse<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal main restricted universe multiverse<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal-updates main restricted universe multiverse<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal-updates main restricted universe multiverse<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal-backports main restricted universe multiverse<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal-backports main restricted universe multiverse<br>deb <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal-security main restricted universe multiverse<br>#deb-src <a href="https://mirrors.tuna.tsinghua.edu.cn/ubuntu/">https://mirrors.tuna.tsinghua.edu.cn/ubuntu/</a> focal-security main restricted universe multiverse multiverse</p><p>3.执行apt-get update 更新源</p><p>4.下载pin文件</p><p>wget <a href="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin">https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin</a><br>mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600<br>apt-key adv –fetch-keys <a href="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub">https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub</a></p><p>向 source.list 中添加 cuda软件源</p><p>add-apt-repository “deb <a href="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/">https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/</a> /“</p><p>sed -i ‘s/nvidia.com/nvidia.cn/‘ /etc/apt/sources.list  <br>apt-get update<br>apt-get -y install cuda</p><p>vim /etc/profile     再最后两行添加</p><p>export PATH=/usr/local/cuda-11.4/bin:$PATH<br>export LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64:$LD_LIBRARY_PATH </p><p>source  /etc/profile</p><p>验证 nvcc  -V</p><p>nvidia-smi</p><p>如遇：下图请重启电脑</p><p>cuda官网链接：<a href="https://developer.nvidia.com/cuda-downloads">https://developer.nvidia.com/cuda-downloads</a></p><p>​</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu使用非root用户运行docker</title>
      <link href="/2021/10/08/ubuntu-shi-yong-fei-root-yong-hu-yun-xing-docker/"/>
      <url>/2021/10/08/ubuntu-shi-yong-fei-root-yong-hu-yun-xing-docker/</url>
      
        <content type="html"><![CDATA[<p>默认情况下，docker 命令会使用 Unix socket 与 Docker 主机通讯，安装完docker主机后默认会创建一个docke用户组。而只有 root 用户和 docker 组的用户才可以访问 Docker 主机的 Unix socket，所以需要把linux非root用户添加到docker组才能直接访问docker 主机。步骤如下：    </p><p>1.如果没有创建docker用户组，则需要先创建一个docket用户组。<br>$ sudo groupadd docker<br>2.将指定的用户添加到docker用户组。<br>  $ sudo usermod -aG docker userName<br>3.重启docker服务<br>  $ sudo service docker restart //或者<br>  $ sudo /etc/init.d/docker restart<br>4.切换当前回话到docker组或者关闭当前回话重新打开终端。    </p><p> $ newgrp - docker //切换到docker用户组    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu20.04详细安装教程</title>
      <link href="/2021/09/30/ubuntu20-04-xiang-xi-an-zhuang-jiao-cheng/"/>
      <url>/2021/09/30/ubuntu20-04-xiang-xi-an-zhuang-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="ubuntu20.04详细安装教程">ubuntu20.04详细安装教程</h1><br><p>本文为方便演示采用 <img no-lazy class="inline" src="http://img.doutula.com/production/uploads/image/2019/08/15/20190815849485_fKMqYD.gif" style="height:100px;"> VMware Workstation 16    </p><p>如在<span class="p red">生产环境安装</span>基本雷同！</p><p>下载ISO镜像：</p><div class="tagLink"><a class="link-card" title="从网易的镜像网站下载" href="http://mirrors.163.com/ubuntu-releases/20.04/"><span class="link-card-backdrop" style="background-image: url(https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg)"></span><div class="left"><img "" class="lazyload placeholder" data-original="https://cdn.pixabay.com/photo/2018/12/05/13/41/panda-3857754__340.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></div><div class="right"><p class="text">从网易的镜像网站下载</p><p class="url">http://mirrors.163.com/ubuntu-releases/20.04/</p></div></a></div><p>　　</p><p><img "" class="lazyload placeholder" data-original="/images/pasted-4.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><div class="note "><p>创建虚拟机：</p></div><p>　　打开vmware，选择【文件】——【新建虚拟机】：典型</p><p> <img "" class="lazyload placeholder" data-original="/images/pasted-5.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>【下一步】：“安装客户机操作系统”窗口中，选择：【稍后安装操作系统】。<br> <img "" class="lazyload placeholder" data-original="/images/pasted-6.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>【下一步】：“选择客户机操作系统”窗口中，操作系统选择：【Linux】，版本选择【Ubuntu 64位】。<br> <img "" class="lazyload placeholder" data-original="/images/pasted-7.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>【下一步】：“命名虚拟机”窗口中，位置一栏中，选择用于存放虚拟机的目录，这里建议找个空闲的磁盘分区。<br> <img "" class="lazyload placeholder" data-original="/images/pasted-8.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>【下一步】：“指定磁盘容量”窗口中，大小默认不动，下面选择：【将虚拟磁盘存储为单个文件】。<br><img "" class="lazyload placeholder" data-original="/images/pasted-9.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "><br>【下一步】：“已准备好创建虚拟机”窗口中，选择：【完成】。<br> <img "" class="lazyload placeholder" data-original="/images/pasted-10.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><div class="note quote"><p>分配虚拟机硬件资源：</p></div><blockquote><p>　　打开VMware，选择【虚拟机】——【设置】，打开“虚拟机设置”窗口，快捷键：<kbd>ctrl</kbd> + <kbd>D<kbd>。   根据自己的硬件条件，适当分配一些硬件资源。<br>   <img "" class="lazyload placeholder" data-original="/images/pasted-11.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></kbd></kbd></p></blockquote><p>　　必须设置的一项为：【CD/DVD(STAT)】，在右侧“连接”板块内选择【使用ISO镜像文件】，并指定前面下载的Ubuntu镜像文件存放目录。</p><p>  <img "" class="lazyload placeholder" data-original="/images/pasted-12.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "><br>　　分配好虚拟机的硬件资源后点击【确定】。<br>  <img "" class="lazyload placeholder" data-original="/images/pasted-13.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><div class="note warning"><p>开始安装Ubuntu</p></div><div class="note "><p>1、运行虚拟机，加载一段时间后弹出“安装”界面。语言栏倒数第三个是中文。点击【安装 Ubuntu】。</p></div><p> <img "" class="lazyload placeholder" data-original="/images/pasted-14.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>　　</p><div class="note quote"><p>2、键盘布局，【继续】</p></div><p>  <img "" class="lazyload placeholder" data-original="/images/pasted-15.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><p>　　</p><div class="note success"><p>3、更新和其他软件，取消【安装Ubuntu时下载更新】选项，点击【继续】。</p></div><p>   <img "" class="lazyload placeholder" data-original="/images/pasted-16.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><blockquote><p>　　4、安装类型，这里如果是学习，或者是为了熟悉这个系统，那直接【现在安装】，让系统自动分配分区，随后弹出“将改动写入此盘吗”，选择【继续】。<br>   <img "" class="lazyload placeholder" data-original="/images/pasted-17.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" ">   </p></blockquote> <div class="note danger"><p>5、你在什么地方，选择【Shanghai】——【继续】。</p></div><p> 　<br>    <img "" class="lazyload placeholder" data-original="/images/pasted-18.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><div class="note info"><p>6、你是谁，将各个选项填写一下。点击【继续】。</p></div><p> 　　<br> <img "" class="lazyload placeholder" data-original="/images/pasted-19.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><div class="note success"><p>7、安装完成，重启，进入桌面。</p></div><p>　　</p><p> <img "" class="lazyload placeholder" data-original="/images/pasted-20.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker 网络的几种模式</title>
      <link href="/2021/09/30/untitled/"/>
      <url>/2021/09/30/untitled/</url>
      
        <content type="html"><![CDATA[<p>docker 网络分为单机和多机，我们来了解一下docker的单机网络<br>docker单机网络分为以下几种：<br>1）bridge NetWork，使用–net=bridge指定，默认设置。<br>2）Host NetWork ，使用–net=host指定。<br>3）None NetWork，使用–net=none指定。<br>4）Container NetWork，使用–net=container:NAME_or_ID指定。<br>5）自定义 NetWork，使用docker network create my_net，使用–net=my_net指定。    </p><p>1、首先，我们来看看一个比较重要的概念，关于namespace，看看network的namespace到底是怎么回事。<br>通过实践演示network-namespace。<br>创建容器：创建两个busybox容器    </p><p>[root@docker01 ~]# docker run -itd –name test1 busybox<br>f862152b6631cf28cf041b454ab85f5d190b03029c088a331a64b164900ef331<br>[root@docker01 ~]# docker run -itd –name test2 busybox<br>f78690e1e0b820c4fea8af6e4d062f4f6460f68697274e70b0189b5c2ff3386d<br>启动了2个容器，test1与test2，进入这2个容器查看各自的ip地址    </p><p>复制代码<br>[root@docker01 ~]# docker exec -it test1 sh<br>/ # ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>30: eth0@if31: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue<br>link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff<br>inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0<br>valid_lft forever preferred_lft forever<br>/ # exit<br>[root@docker01 ~]# docker exec -it test2 sh<br>/ # ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>32: eth0@if33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue<br>link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff<br>inet 172.17.0.3/16 brd 172.17.255.255 scope global eth0<br>valid_lft forever preferred_lft forever<br>复制代码<br>可以看出test1的ip为172.17.0.2，test2的ip为172.17.0.3。其实这块就是网络命名空间！<br>在test2上ping可以ping通test1的namespace。    </p><p>[root@docker01 ~]# docker exec -it test2 sh<br>/ # ping 172.17.0.2<br>PING 172.17.0.2 (172.17.0.2): 56 data bytes<br>64 bytes from 172.17.0.2: seq=0 ttl=64 time=18.389 ms<br>64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.084 ms<br>可以发现命名空间是独立的，容器内的网络命名空间和容器外不同，容器和容器之前的网络命名空间也是相对独立的。    </p><p> 2、那么docker网络究竟是如何配置的？    </p><ol><li>bridge网络模式<br>我们进入容器内，ping baidu发现可以ping通。这是什么原理呢，肯定是通过可以转接的方式，如：容器—&gt;虚拟机—-&gt;宿主机–&gt;baidu。    </li></ol><p>/ # ping <a href="http://www.baidu.com/">www.baidu.com</a><br>PING <a href="http://www.baidu.com/">www.baidu.com</a> (115.239.210.27): 56 data bytes<br>64 bytes from 115.239.210.27: seq=0 ttl=127 time=15.410 ms<br>64 bytes from 115.239.210.27: seq=1 ttl=127 time=7.586 ms<br>查看docker网络：    </p><p>[root@docker01 ~]# docker network ls<br>NETWORK ID NAME DRIVER SCOPE<br>99c36d692cac bridge  <code>bridge</code> local<br>ec237fbb8837  <code>host</code> host local<br>94e84f3d8354 none null local<br>这里我们可以看到桥接模式。<br>对于test1与test2 来讲，他是通过bridge的方式<br>我们可以看一下其内部网络信息：    </p><p>复制代码<br>[root@docker01 ~]# docker inspect test1<br>……<br>“NetworkSettings”: {<br>“Bridge”: “”,<br>“SandboxID”: “6f8f2f996e4d5bfeddd179832cc5ffb3cd3f9ee830ce6acfff16fd249e9e0130”,<br>“HairpinMode”: false,<br>“LinkLocalIPv6Address”: “”,<br>“LinkLocalIPv6PrefixLen”: 0,<br>“Ports”: {},<br>“SandboxKey”: “/var/run/docker/netns/6f8f2f996e4d”,<br>“SecondaryIPAddresses”: null,<br>“SecondaryIPv6Addresses”: null,<br>“EndpointID”: “d0a01da2cd1b487c6829518c7bdc01215b66a11b1e79e80862ab81c49e5cb0f7”,<br>“Gateway”: “172.17.0.1”,<br>“GlobalIPv6Address”: “”,<br>“GlobalIPv6PrefixLen”: 0,<br>“IPAddress”: “172.17.0.2”,<br>“IPPrefixLen”: 16,<br>“IPv6Gateway”: “”,<br>“MacAddress”: “02:42:ac:11:00:02”,<br>“Networks”: {<br>“bridge”: {<br>“IPAMConfig”: null,<br>“Links”: null,<br>“Aliases”: null,<br>“NetworkID”: “99c36d692cac8d6be351681e590e0048f6a746fd9e1c88b2e3b7769dfd57fccb”,<br>“EndpointID”: “d0a01da2cd1b487c6829518c7bdc01215b66a11b1e79e80862ab81c49e5cb0f7”,<br>“Gateway”: “172.17.0.1”,<br>“IPAddress”: “172.17.0.2”,<br>“IPPrefixLen”: 16,<br>“IPv6Gateway”: “”,<br>“GlobalIPv6Address”: “”,<br>“GlobalIPv6PrefixLen”: 0,<br>“MacAddress”: “02:42:ac:11:00:02”,<br>“DriverOpts”: null<br>}<br>}<br>……<br>复制代码<br>查看宿主机ip信息：    </p><p>复制代码<br>[root@docker01 ~]# ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>inet6 ::1/128 scope host<br>valid_lft forever preferred_lft forever<br>2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>link/ether 00:0c:29:cf:3d:4b brd ff:ff:ff:ff:ff:ff<br>inet 10.0.0.99/24 brd 10.0.0.255 scope global noprefixroute ens33<br>valid_lft forever preferred_lft forever<br>inet6 fe80::20c:29ff:fecf:3d4b/64 scope link<br>valid_lft forever preferred_lft forever<br>3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default<br>link/ether 02:42:1f:f4:29:1a brd ff:ff:ff:ff:ff:ff<br>inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0<br>valid_lft forever preferred_lft forever<br>inet6 fe80::42:1fff:fef4:291a/64 scope link<br>valid_lft forever preferred_lft forever<br>4: veth3b111e2@if32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group default<br>link/ether 62:a9:c9:0b:be:d6 brd ff:ff:ff:ff:ff:ff link-netnsid 1<br>inet6 fe80::60a9:c9ff:fe0b:bed6/64 scope link<br>valid_lft forever preferred_lft forever<br>5: vethdc6d1fa@if30: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default<br>link/ether a2:17:9c:af:d1:d9 brd ff:ff:ff:ff:ff:ff link-netnsid 2<br>inet6 fe80::a017:9cff:feaf:d1d9/64 scope link<br>valid_lft forever preferred_lft forever<br>复制代码<br>这个机器有5个网路，除了lo，ens33，docker0，veth3b111e2@if32，vethdc6d1fa@if30，veth其实是连接了2个networknamespace，vethdbcb3a6@if11与vethdc6d1fa@if30负责连接docker0上边的，容器test1与test2里面也应该有个和veth连接的。    </p><p>复制代码<br>[root@docker01 ~]# docker exec test1 ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>30: eth0@if31: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue<br>link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff<br>inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0<br>valid_lft forever preferred_lft forever<br>复制代码<br>eth0@if31和外边的veth3b111e2@if32 其实是一对。test2同理。    </p><p>可以通过命令查看他们的关系： yum install -y bridge-utils<br>#安装后可以运行brctl这个命令了    </p><p>[root@docker01 ~]# brctl show<br>docker0    8000.02421ff4291a    no    veth3b111e2<br>                                      vethdc6d1fa<br>因为目前两个容器test1与test2的桥接，所以就显示两个。<br>test1 和test2 之前通过docker0，docker0 类似test1和test2之前的路由器，docker0 在通过nat的eth0连接互联网。    </p><p>为了形象理解docker bridge network可以参考下图：    </p><p><img "" class="lazyload placeholder" data-original="/images/pasted-3.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt=" "></p><ol start="2"><li>host 网络模式<br>host模式下容器不会获得一个独立的network namespace，而是与宿主机共用一个。这就意味着容器不会有自己的网卡信息，而是使用宿主机的。容器除了网络，其他都是隔离的。    </li></ol><p>复制代码<br>[root@docker01 ~]# docker run -itd –name test3 –network host busybox<br>2268c2f8eb8ff74b72e521148dc1fe82a9a822857f251abab2368b24924453d6<br>[root@docker01 ~]# docker exec -it test3 /bin/sh<br>/ # ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>inet6 ::1/128 scope host<br>valid_lft forever preferred_lft forever<br>2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000<br>link/ether 00:0c:29:cf:3d:4b brd ff:ff:ff:ff:ff:ff<br>inet 10.0.0.99/24 brd 10.0.0.255 scope global noprefixroute ens33<br>valid_lft forever preferred_lft forever<br>inet6 fe80::20c:29ff:fecf:3d4b/64 scope link<br>valid_lft forever preferred_lft forever<br>3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default<br>link/ether 02:42:1f:f4:29:1a brd ff:ff:ff:ff:ff:ff<br>inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0<br>valid_lft forever preferred_lft forever<br>inet6 fe80::42:1fff:fef4:291a/64 scope link<br>valid_lft forever preferred_lft forever<br>4: veth3b111e2@if32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group default<br>link/ether 62:a9:c9:0b:be:d6 brd ff:ff:ff:ff:ff:ff link-netnsid 1<br>inet6 fe80::60a9:c9ff:fe0b:bed6/64 scope link<br>valid_lft forever preferred_lft forever<br>5: vethdc6d1fa@if30: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group default<br>link/ether a2:17:9c:af:d1:d9 brd ff:ff:ff:ff:ff:ff link-netnsid 2<br>inet6 fe80::a017:9cff:feaf:d1d9/64 scope link<br>valid_lft forever preferred_lft forever<br>复制代码<br>此容器没有自己的接口，与宿主机ip完全一样，起容器只能起单个，比如nginx。    </p><ol start="3"><li>none网络模式：<br>获取独立的network namespace，但不为容器进行任何网络配置，需要我们手动配置。    </li></ol><p>复制代码<br>[root@docker01 ~]# docker run -itd –name test4 –network none busybox<br>7222ec17cd70c1094af5710445bec25bd2a7bd09c86f97348857ad5f70ed21b3<br>[root@docker01 ~]# docker exec -it test4 /bin/sh<br>/ # ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>复制代码<br>此容器没有接口ip，与外界无沟通，用于安全性比较高的业务，可自己手动添加网络。    </p><ol start="4"><li>container 网络模式：<br>与指定的容器使用同一个network namespace，具有同样的网络配置信息，两个容器除了网络，其他都还是隔离的。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。    </li></ol><p>复制代码<br>[root@docker01 ~]# docker run -itd –name test5 –net=container:test1 busybox<br>af3a29e3171f82ef1a2e827d9307fbd2de6484ec225c6227de5de2fe6e557a90<br>[root@docker01 ~]# docker exec -it test5 /bin/sh<br>/ # ip a<br>1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000<br>link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00<br>inet 127.0.0.1/8 scope host lo<br>valid_lft forever preferred_lft forever<br>30: eth0@if31: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue<br>link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff<br>inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0<br>valid_lft forever preferred_lft forever<br>复制代码<br>可以看出 test5 与 test1的网络配置信息是一致的。    </p><ol start="5"><li>自定义网络模式：<br>与默认的bridge原理一样，但自定义网络具备内部DNS发现，可以通过容器名或者主机名容器之间网络通信。<br>通过docker network create 创建自定义的网络：    </li></ol><p>复制代码<br>[root@docker01 ~]# docker network create test<br>[root@docker01 ~]# docker network ls<br>NETWORK ID   NAME   DRIVER  SCOPE<br>99c36d692cac <code>bridge</code> bridge  local<br>ec237fbb8837 <code>host</code>   host    local<br>94e84f3d8354 none   null    local<br>ea714a707d9d test   bridge  local<br>复制代码<br>创建容器指定自定义网桥：    </p><p>[root@docker01 ~]# docker run -itd –name test6 –net=test busybox<br>6b4add91370de5e9ac727c5d8992e516c7a5e8f75846f55f4c314bc433083998<br>[root@docker01 ~]# docker run -itd –name test7 –net=test busybox<br>eb55f38600e725f050dea02d5227516858a4a3c7c6f85fec8bc9932864c811f8<br>与普通bridge网络不同的是，自定义网络中创建的容器可以通过容器名或者主机名互通。    </p><p>复制代码<br>[root@docker01 ~]# docker exec -it test6 /bin/sh<br>/ # ping test7<br>PING test7 (172.21.0.3): 56 data bytes<br>64 bytes from 172.21.0.3: seq=0 ttl=64 time=0.151 ms<br>64 bytes from 172.21.0.3: seq=1 ttl=64 time=0.132 ms<br>^C<br>— test7 ping statistics —<br>3 packets transmitted, 3 packets received, 0% packet loss<br>round-trip min/avg/max = 0.083/0.122/0.151 ms<br>/ # exit<br>[root@docker01 ~]# docker exec -it test7 /bin/sh<br>/ # ping test6<br>PING test6 (172.21.0.2): 56 data bytes<br>64 bytes from 172.21.0.2: seq=0 ttl=64 time=0.139 ms<br>64 bytes from 172.21.0.2: seq=1 ttl=64 time=0.087 ms<br>^C<br>— test6 ping statistics —<br>3 packets transmitted, 3 packets received, 0% packet loss<br>round-trip min/avg/max = 0.087/0.104/0.139 ms<br>复制代码<br>其原理是各容器内部的hosts文件做了ip与主机名解析。    </p><p>复制代码<br>/ # cat /etc/hosts<br>127.0.0.1    localhost<br>::1    localhost ip6-localhost ip6-loopback<br>fe00::0    ip6-localnet<br>ff00::0    ip6-mcastprefix<br>ff02::1    ip6-allnodes<br>ff02::2    ip6-allrouters<br>172.21.0.3    eb55f38600e7<br>复制代码<br>以上就是docker网络的5种模式。    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>video视频</title>
      <link href="/2021/09/29/video-shi-pin/"/>
      <url>/2021/09/29/video-shi-pin/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="video演示">video演示</h2><br><p>100%宽度</p><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><p>50%宽度</p><div class="videos" col="2"><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div></div><p>25%宽度</p><div class="videos" col="4"><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src="https://assets.mixkit.co/videos/preview/mixkit-down-the-river-in-a-bamboo-canoe-6804-large.mp4" type="video/mp4">Your browser does not support the video tag.</video></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Text文本样式标签</title>
      <link href="/2021/09/29/111/"/>
      <url>/2021/09/29/111/</url>
      
        <content type="html"><![CDATA[<h2 class="bamboo-h " id="Text文本样式标签演示">Text文本样式标签演示</h2><br><p>带 <u>下划线</u> 的文本</p><p>带 <emp>着重号</emp> 的文本</p><p>带 <wavy>波浪线</wavy> 的文本</p><p>带 <del>删除线</del> 的文本</p><p>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></p><p>密码样式的文本：<psw>这里没有验证码</psw></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>timeline时间线</title>
      <link href="/2021/09/29/abc/"/>
      <url>/2021/09/29/abc/</url>
      
        <content type="html"><![CDATA[<div class="timeline"><div class="timenode"><div class="meta"><p></p><p>2021-01-01 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.3 -&gt; 1.0.3</a></p><p></p></div><div class="body"><ol><li>我是一个测试文字<code>ghghgh</code>。</li><li>我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀<code>fgfgf</code>佛第三节课。</li><li>我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀<code>trtrtr</code>佛第三节课。</li></ol></div></div><div class="timenode"><div class="meta"><p></p><p>2020-08-15 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.2 -&gt; 1.0.2</a></p><p></p></div><div class="body"><p>这是一段测试文字</p></div></div><div class="timenode"><div class="meta"><p></p><p>2020-08-08 <a href="https://github.com/yuang01/hexo-theme-bamboo">1.0.0 -&gt; 1.0.0</a></p><p></p></div><div class="body"><ol><li>我是一个测试文字<code>ghghgh</code>。</li><li>我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀<code>fgfgf</code>佛第三节课。</li><li>我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀<code>trtrtr</code>佛第三节课。</li></ol></div></div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>title</title>
      <link href="/2021/09/29/line/"/>
      <url>/2021/09/29/line/</url>
      
        <content type="html"><![CDATA[<h1 class="bamboo-h " id="我是标题">我是标题</h1><br><p>你好啊，未来越来越好哦</p><h2 class="bamboo-h " id="我是标题">我是标题</h2><br><p>你好啊，加油哦</p><h2 class="bamboo-h warning" id="我是标题">我是标题</h2><br><h2 class="bamboo-h red" id="我是标题">我是标题</h2><br><h1 id="上述事例代码"><a href="#上述事例代码" class="headerlink" title="上述事例代码"></a>上述事例代码</h1><pre><code>1 &#123;% title h1, 我是标题 %&#125;2 你好啊，未来越来越好哦3 &#123;% title h2, 我是标题 %&#125;4 你好啊，加油哦5 &#123;% title h2, 我是标题, warning %&#125;6 % title h2, 我是标题, red %&#125;</code></pre><h2 class="bamboo-h-b" id="我是标题bbb" style="color:!important">我是标题bbb</h2><div></div><h2 class="bamboo-h-b" id="我是标题bbb" style="color:#895546!important">我是标题bbb</h2><div></div><h2 class="bamboo-h-b" id="我是标题bbb" style="color:red!important">我是标题bbb</h2><div></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用docker-compose部署wiki</title>
      <link href="/2021/09/27/wiki/"/>
      <url>/2021/09/27/wiki/</url>
      
        <content type="html"><![CDATA[<p>操作系统环境 ubuntu 20.04</p><p>1.u盘安装ubuntu 并安装ssh服务（方便后面远程操作）<br>2.安装更新apt源和安装必要软件包<br>3.安装docker和docker-compose （2和3具体见docker部署openvpn-web）    </p><p>4.具体搭建过程</p><p>1.1 基础准备<br>1.1.1 拉取docker镜像，我们选择的版本是cptactionhank/atlassian-confluence:latest<br>mkdir  ./confluence<br>cd ./confluence<br>docker  pull  cptactionhank/atlassian-confluence:latest    </p><p>1.1.2 准备好mysql的驱动，我们使用的mysql版本是5.7<br>wget  <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar">https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar</a></p><p>#mysql8.0.20驱动：<br>wget  <a href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar">https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar</a></p><p>1.1.3 准备好docker-compose.yml    </p><pre><code>version: &#39;3&#39;services:  confluence:    image: cptactionhank/atlassian-confluence:latest    container_name: confluence    restart: always    user: root    ports:      - 8090:8090      - 8091:8091    networks:      - traefik    volumes:      - &quot;/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime&quot;      - ./confluence/logs:/opt/atlassian/confluence/logs      - ./server.xml:/opt/atlassian/confluence/conf/server.xml      - ./confluence-data:/var/atlassian/confluence      - ./mysql-connector-java-5.1.47.jar:/opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.47.jarnetworks:  traefik:    external: true</code></pre><p>1.1.4 在准备好的 msyql 中创建数据库<br>– drop database confluence;<br>create database confluence DEFAULT CHARACTER SET utf8 COLLATE utf8_bin;</p><p>1.1.5 下载好破解工具<br>#下载链接：<br><a href="http://image.baishapu.com/confluence%E7%A0%B4%E8%A7%A3%E5%B7%A5%E5%85%B7.zip">http://image.baishapu.com/confluence破解工具.zip</a></p><p>1.2 部署破解<br>1.2.1 启动<br>#创建网卡<br>docker network create traefik<br>#启动<br>docker-compose  up  -d<br>#查看日志<br>docker logs -tf –tail 300 confluence<br>#访问地址：  yourIp:8090    </p><p>1.2.2 复制出 atlassian 的 jar 包<br>docker cp  confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar  ./atlassian-extras-2.4.jar    </p><p>下载 atlassian-extras-2.4.jar 文件到windows上</p><p><img "" class="lazyload placeholder" data-original="/images/pasted-22.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="下载jar包"></p><p>注意复制出来的文件名必须为 atlassian-extras-2.4.jar，因为破解工具中指定了此文件名；<br>1.2.3 运行工具，(提前安装好win版jdk  然后进入jar所在目前 执行java -jar confluence_keygen.jar)如图:</p><p><img "" class="lazyload placeholder" data-original="/images/pasted-23.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="java -jar confluence_keygen.jar"><br><img "" class="lazyload placeholder" data-original="/images/pasted-24.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="弹出如图"></p><p><img "" class="lazyload placeholder" data-original="/images/pasted-25.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="回到wikiweb界面"></p><p><img "" class="lazyload placeholder" data-original="/images/pasted-26.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="下一步"><br><img "" class="lazyload placeholder" data-original="/images/pasted-27.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="复制id"><br><img "" class="lazyload placeholder" data-original="/images/pasted-28.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/images/pasted-29.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/images/pasted-30.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/images/pasted-31.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"><br><img "" class="lazyload placeholder" data-original="/images/pasted-32.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>成功后，会在原目录下出现atlassian-extras-2.4.back 备份文件，并生成了一个新的破解后的 atlassian-extras-2.4.jar<br>1.2.4 复制破解后的jar包回容器中<br>docker cp   ./atlassian-extras-2.4.jar       confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar<br>#重启<br>docker restart confluence    </p><p>1.2.5 剩下的按照页面提示一步一步设置即可<br>注意：mysql连接时，需要设置事务隔离级别 READ-COMMITTED</p><p>参考链接：<a href="https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html">https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html</a></p><p>#mysql 5<br>jdbc:mysql://192.168.1.172:3307/confluence?useSSL=false&amp;sessionVariables=tx_isolation=’READ-COMMITTED’</p><p><img "" class="lazyload placeholder" data-original="/images/pasted-33.png" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif"></p><p>解决慢时长gc的问题<br> 　　默认java配置为1G内存使用一段时间后回经常gc造成卡顿，单击“系统信息”可以看到jvm使用情况</p><p>　进入docker容器</p><p>docker exec -it confluence /bin/bash # 进入docker容器 confluence<br>　　修改java配置</p><p>vi /opt/atlassian/confluence/bin/catalina.sh<br>　　在 “cygwin=false” 上面添加如下内容，最大内存为2G</p><p>CATALINA_OPTS=”-Xms256m -Xmx2048m -XX:PermSize=128m -XX:MaxPermSize=512m”<br>　　重启 wiki confluence</p><p>二、数据备份与迁移<br>2.1 参考链接：<br><a href="https://www.cwiki.us/display/CONF6EN/Migrating+Confluence+Between+Servers#space-menu-link-content">https://www.cwiki.us/display/CONF6EN/Migrating+Confluence+Between+Servers#space-menu-link-content</a></p><p><a href="https://confluence.atlassian.com/conf615/migrating-confluence-between-servers-967338806.html">https://confluence.atlassian.com/conf615/migrating-confluence-between-servers-967338806.html</a></p><p>#我的迁移过程<br>1、备份mysql数据库；<br>2、备份mysql驱动；<br>3、备份主目录（本文档安装的挂载目录 “- ./data:/var/atlassian/application-data/confluence”）<br>4、备份server.xml（容器目录： /opt/atlassian/confluence/conf/server.xml）<br>5、在新机器上准备好安装过程需要的东西，以及备份的东西拿过去准备覆盖；<br>6、如果需要迁移数据库，可以直接修改配置文件：&lt;confluence.home&gt;/confluence.cfg.xml </p><p>迁移后，日志显示启动成功，但页面任然无法访问，此过程大概需要几分钟左右<br>2.2 关闭confluence自带每日备份任务</p><p>2.3 手动备份脚本 + crontab定时任务<br>备份数据库，主目录挂载出来即可；</p><p>三、导出PDF<br>注意：confluence导出PDF仅支持一种字体，且需要自己手动上传安装；（可以从系统目录C:\Windows\Fonts 中复制出来）</p><p>四、配置邮件服务器<br>参考链接：<a href="https://qinjiangbo.com/mail-server-configuration-of-confluence.html">https://qinjiangbo.com/mail-server-configuration-of-confluence.html</a></p><p>说明：25、465端口不行，再试试587端口也是可以的</p><p>五、版本升级<br>Confluence7 + Mysql8：<br>CREATE DATABASE xxxxxxConfluence CHARACTER SET utf8mb4 COLLATE utf8mb4_bin;</p><p>#隔离级别的设置， mysql 8 的区别：<br>sessionVariables=transaction_isolation=’READ-COMMITTED’</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL查看数据库表容量大小</title>
      <link href="/2021/09/26/mysql-cha-kan-shu-ju-ku-biao-rong-liang-da-xiao/"/>
      <url>/2021/09/26/mysql-cha-kan-shu-ju-ku-biao-rong-liang-da-xiao/</url>
      
        <content type="html"><![CDATA[<p>1.查看所有数据库容量大小</p><p>select<br>table_schema as ‘数据库’,<br>sum(table_rows) as ‘记录数’,<br>sum(truncate(data_length/1024/1024, 2)) as ‘数据容量(MB)’,<br>sum(truncate(index_length/1024/1024, 2)) as ‘索引容量(MB)’<br>from information_schema.tables<br>group by table_schema<br>order by sum(data_length) desc, sum(index_length) desc;</p><p>2.查看所有数据库各表容量大小</p><p>select<br>table_schema as ‘数据库’,<br>table_name as ‘表名’,<br>table_rows as ‘记录数’,<br>truncate(data_length/1024/1024, 2) as ‘数据容量(MB)’,<br>truncate(index_length/1024/1024, 2) as ‘索引容量(MB)’<br>from information_schema.tables<br>order by data_length desc, index_length desc;</p><p>3.查看指定数据库容量大小<br>例：查看mysql库容量大小</p><p>select<br>table_schema as ‘数据库’,<br>sum(table_rows) as ‘记录数’,<br>sum(truncate(data_length/1024/1024, 2)) as ‘数据容量(MB)’,<br>sum(truncate(index_length/1024/1024, 2)) as ‘索引容量(MB)’<br>from information_schema.tables<br>where table_schema=’mysql’;</p><p>4.查看指定数据库各表容量大小<br>例：查看mysql库各表容量大小</p><p>select<br>table_schema as ‘数据库’,<br>table_name as ‘表名’,<br>table_rows as ‘记录数’,<br>truncate(data_length/1024/1024, 2) as ‘数据容量(MB)’,<br>truncate(index_length/1024/1024, 2) as ‘索引容量(MB)’<br>from information_schema.tables<br>where table_schema=’mysql’<br>order by data_length desc, index_length desc;</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Let’s Encrypt 泛域名配置证书</title>
      <link href="/2021/09/26/let-s-encrypt-fan-yu-ming-pei-zhi-zheng-shu/"/>
      <url>/2021/09/26/let-s-encrypt-fan-yu-ming-pei-zhi-zheng-shu/</url>
      
        <content type="html"><![CDATA[<p>安装acme.sh</p><p>curl <a href="https://get.acme.sh/">https://get.acme.sh</a> | sh</p><ol><li>Failed connect to raw.githubusercontent.com:443;</li><li>Please refer to <a href="https://curl.haxx.se/libcurl/c/libcurl-errors.html">https://curl.haxx.se/libcurl/c/libcurl-errors.html</a> for error code: 7<br>#通过修改host解析</li></ol><p>sudo vim /etc/hosts</p><p>添加如下内容</p><p>140.82.114.4     github.com</p><p> 185.199.108.153    github.github.io</p><p> 199.232.69.194   github.global.ssl.fastly.net</p><p> 199.232.28.133 raw.githubusercontent.com</p><p> 通过修改之后，上述可以成功</p><p>不行的就拿下面这个地址</p><p>wget -O -  <a href="https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh">https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh</a> | INSTALLONLINE=1  sh</p><p>获取阿里云Accesskey<br>阿里云dns<br>阿里云<br>申请地址：<a href="https://ak-console.aliyun.com/#/accesskey">https://ak-console.aliyun.com/#/accesskey</a></p><p>export Ali_Key=”对应Access Key ID”<br>export Ali_Secret=”对应Access Key Secret”</p><p>./acme.sh –issue –dns dns_ali - d *.hhui.top</p><p>接下来将我们的证书安装到 nginx（当然也可以是 tomcat），下面的脚本除了安装之外，也添加了一个自动更新的任务（一般来说，60 天以后会自动更新，并会强制重启 nginx 使新的证书生效，可以通过 crontab -e看到对应的定时任务</p><p>./acme.sh  –installcert -d *.hhui.top –key-file /etc/nginx/ssl/key.pem  –fullchain-file /etc/nginx/ssl/cert.pem –reloadcmd     “service nginx force-reload”</p><p>然后就是配置 nginx，支持 https</p><p>ACME 手动续期命令    </p><p>acme.sh –cron –force –debug 2</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何清除没用的 docker 镜像 (image) 文件</title>
      <link href="/2021/09/26/ru-he-qing-chu-mei-yong-de-docker-jing-xiang-image-wen-jian/"/>
      <url>/2021/09/26/ru-he-qing-chu-mei-yong-de-docker-jing-xiang-image-wen-jian/</url>
      
        <content type="html"><![CDATA[<p>当我们每次构建一次 docker 镜像就会替换掉原来的镜像文件。那些文件很占地方。那么如何清除这些文件呢？</p><p>我们可以使用下面的命令：</p><p>docker system prune</p><p>运行以后可以看到以下提示，输入“y”就可以清理无用的 docker 文件了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>grep和sed配合替换文件中的字串</title>
      <link href="/2021/09/26/grep-he-sed-pei-he-ti-huan-wen-jian-zhong-de-zi-chuan/"/>
      <url>/2021/09/26/grep-he-sed-pei-he-ti-huan-wen-jian-zhong-de-zi-chuan/</url>
      
        <content type="html"><![CDATA[<p>grep和sed配合替换文件中的字串</p><h2 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h2><p>sed -i s/yyyy/xxxx/g grep -rl yyyy –include=”*.txt” ./<br>作用：将当前目录(包括子目录)中所有txt文件中的yyyy字符串替换为xxxx字符串</p><h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释:"></a>参数解释:</h2><p>sed:<br>-i 表示操作的是文件，``括起来的grep命令，表示将grep命令的结果作为操作文件<br>s/yyyy/xxxx/表示查找yyyy并替换为xxxx，后面跟g表示一行中有多个yyyy的时候，都替换，而不是仅替换第一个</p><h3 id="grep"><a href="#grep" class="headerlink" title="grep:"></a>grep:</h3><p>-r表示查找所有子目录<br>-l表示仅列出符合条件的文件名，用来传给sed命令做操作<br>–include=”*.txt” 表示仅查找txt文件<br>./ 表示要查找的根目录为当前目录</p><p>注：如果不需要查找子目录，仅需要在当前目录替换，用sed命令就行了，命令如下：</p><p>sed -i s/xxxx/yyyy/g ./*.txt</p><p>例如：1. nl /etc/passwd | grep ‘test’ | sed -e ‘3,$d’ -e ‘s/bash/blueshell/‘</p><p>/sbin/ifconfig eth0 | grep ‘inet addr’ | sed ‘s/^.addr://g’ | sed ‘s/Bcast.$//g’<br>192.168.1.100</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker镜像批量打包</title>
      <link href="/2021/09/26/docker-jing-xiang-pi-liang-da-bao/"/>
      <url>/2021/09/26/docker-jing-xiang-pi-liang-da-bao/</url>
      
        <content type="html"><![CDATA[<p>批量打包镜像:</p><pre><code># docker save $(docker images | grep -v REPOSITORY | awk &#39;BEGIN&#123;OFS=&quot;:&quot;;ORS=&quot; &quot;&#125;&#123;print $1,$2&#125;&#39;) -o demo.tar</code></pre><p>将机器上的所有镜像打包到demo.tar文件里面。</p><p>导入镜像：</p><pre><code># docker load -i demo.tar</code></pre><p>然后docker images就可以看到拷贝过来的镜像了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker部署openvpn-web</title>
      <link href="/2021/09/26/docker-bu-shu-openvpn-web/"/>
      <url>/2021/09/26/docker-bu-shu-openvpn-web/</url>
      
        <content type="html"><![CDATA[<p>系统环境：ubuntu20.04</p><p>一. ###换国内源</p><p>1.备份原来的源，将以前的源备份一下，以防以后可以用的。</p><p> cp /etc/apt/sources.list /etc/apt/sources.list.bak</p><p>2.打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。</p><pre><code>deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse# </code></pre><p>    ####阿里源####<br>    deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted universe multiverse<br>    deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal main restricted universe multiverse<br>    deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted universe multiverse<br>    deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-security main restricted universe multiverse<br>    deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted universe multiverse<br>    deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-updates main restricted universe multiverse<br>    deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-proposed main restricted universe multiverse<br>    deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-proposed main restricted universe multiverse<br>    deb <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-backports main restricted universe multiverse<br>    deb-src <a href="http://mirrors.aliyun.com/ubuntu/">http://mirrors.aliyun.com/ubuntu/</a> focal-backports main restricted universe multiverse<br>3.执行apt-get update 更新源</p><p>二.<strong>使用 APT 安装docker</strong></p><p>1.###添加dcoker源的 GPG 密钥。</p><p> curl -fsSL <a href="https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg">https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg</a> | sudo apt-key add -</p><p>2.###向 source.list 中添加 Docker 软件源</p><p>add-apt-repository “deb [arch=amd64] <a href="https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu">https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu</a> $(lsb_release -cs) stable”<br>3.###安装 Docker CE</p><p>apt-get update &amp;&amp; apt-get install docker-ce</p><p>4.###安装docker-compose:</p><p>sudo curl -L ”<a href="https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$">https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$</a>(uname -s)-$(uname -m)“ -o /usr/local/bin/docker-compose</p><p>chmod +x /usr/local/bin/docker-compose</p><p>5.###编写docker-compoes文件并启动</p><p>cd /opt   (路径任意本文以/opt举例)</p><p>vim docker-compose.yml</p><pre><code>version: &#39;2&#39;services:</code></pre><p>    openvpn:<br>    cap_add:<br>     - NET_ADMIN<br>    image: zhangcun1113/openvpn:latest<br>    container_name: openvpn<br>    ports:<br>     - “1194:1194/udp”<br>    restart: always<br>    depends_on:<br>      - “gui”<br>    volumes:<br>     - ./openvpn-data/conf:/etc/openvpn<br>     - “/etc/localtime:/etc/localtime:ro”<br>     - “/etc/timezone:/etc/timezone:ro”<br>    gui:<br>    image: zhangcun1113/openvpn-web:latest<br>    container_name: openvpn-web<br>    ports:<br>     - “8080:8080/tcp”<br>    restart: always<br>    volumes:<br>     - “/etc/localtime:/etc/localtime:ro”<br>     - “/etc/timezone:/etc/timezone:ro”<br>     - ./openvpn-data/conf:/etc/openvpn<br>     - ./openvpn-data/db:/opt/openvpn-gui/db </p><p>docker-compose up -d</p><p>打开<a href="http://ip:8080即可进入后台管理界面">http://ip:8080即可进入后台管理界面</a></p><p>默认用户密码<br>username: admin<br>password: b3secure</p><p>6.###将ip改为服务器的外网ip</p><p>创建用户证书</p><p>点击证书下载并conf改为ovpn  </p><p>去官网下载客户端连接 </p><p>附加删除用户证书办法</p><p>vim  del.sh</p><pre><code>#!/bin/bashread -t 7 -p &quot;请输入你要删除的用户证书......&quot; userdocker exec openvpn-web bash -c &quot;cd /usr/share/easy-rsa/ &amp;&amp; source ./vars &amp;&amp; ./revoke-full $user&quot;;addText=&quot;crl-verify /etc/openvpn/keys/crl.pem&quot;if [ `grep -c &quot;$addText&quot; /opt/openvpn-data/conf/server.conf`  -eq &#39;0&#39; ]; then</code></pre><p>           echo “input file”<br>           echo “$addText”‘’ &gt;&gt; /opt/openvpn-data/conf/server.conf<br>                 else<br>                            echo “not input file”<br>        fi<br>    cd /opt/openvpn/ &amp;&amp; docker-compose down &amp;&amp; docker-compose up -d</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker删除所有容器/镜像</title>
      <link href="/2021/09/26/docker-shan-chu-suo-you-rong-qi-jing-xiang/"/>
      <url>/2021/09/26/docker-shan-chu-suo-you-rong-qi-jing-xiang/</url>
      
        <content type="html"><![CDATA[<p>1.想要删除容器，则要先停止所有容器（当然，也可以加-f强制删除，但是不推荐）：</p><p>docker stop $(docker ps -a -q)</p><p>2.删除所有容器</p><p>docker  rm $(docker ps -a -q)<br>docker rm <code>docker ps -a -q</code></p><p>3.删除所有镜像（慎重）</p><p> docker rmi $(docker images -q)<br> docker rmi <code>docker images -q</code></p><p>4.删除所有没有tag的镜像<br>docker rmi <code>docker images|grep none|awk &#39;&#123;print $3 &#125;&#39;|xargs</code></p><p>5.删除指定的镜像</p><p>docker rmi –force <code>docker images |grep pt-* |awk &#39;/0108/ &#123;print $3&#125;&#39;</code></p><p>docker rmi -f <code>docker images | grep pt-*| awk &#39;&#123;print $3&#125;&#39;</code></p><p>6.删除状态为created的容器</p><p>docker rm $(docker ps -f status=created|awk ‘{print $1}’)</p><p>7.删除状态为exited的容器</p><p>docker rm $(docker ps -q -f status=exited)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>解决任意域名都能访问nginx443端口的问题</title>
      <link href="/2021/09/26/jie-jue-ren-yi-yu-ming-du-neng-fang-wen-nginx443-duan-kou-de-wen-ti/"/>
      <url>/2021/09/26/jie-jue-ren-yi-yu-ming-du-neng-fang-wen-nginx443-duan-kou-de-wen-ti/</url>
      
        <content type="html"><![CDATA[<p>今天调试时发现，使用b.nbxg.com，c.errb.com等域名也可以访问 a.2kb.com下载目录，这对搜索引擎抓包时应该会产生比较严重的影响，导致搜索引擎误判。</p><p>例如</p><p><a href="https://www.nbxg.com/index.html">https://www.nbxg.com/index.html</a></p><p>同样也可以访问</p><p><a href="https://www.2kb.com/index.html">https://www.2kb.com/index.html</a></p><pre><code>server &#123;listen 443 ssl;server_name a.2kb.com;root html;index index.html index.htm;ssl_certificate  cert/a.crt;ssl_certificate_key  cert/a.key;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;ssl_dhparam cert/a.pem;location / &#123;     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;    proxy_set_header Host $http_host;    proxy_set_header X-Forwarded-Proto https;    proxy_redirect off;    proxy_connect_timeout      240;    proxy_send_timeout         240;    proxy_read_timeout         240;    client_max_body_size 1000m;    proxy_pass http://localhost/;&#125;&#125;</code></pre><p>经查找，采用以下解决方案</p><p>添加一个默认的ssl默置，Nginx找不到ssl server_name时，将转向默认的配置，但必须指定一下证书，随意证书即可</p><pre><code>server &#123; listen 443 default_server; server_name _ ; ssl on; ssl_certificate     cert/a.crt;                     ssl_certificate_key cert/a.key;  #return 404;  location  / &#123;    root   /etc/nginx/error;    index index.html; &#125;&#125;</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim 给每行首加入#</title>
      <link href="/2021/09/26/vim-gei-mei-xing-shou-jia-ru/"/>
      <url>/2021/09/26/vim-gei-mei-xing-shou-jia-ru/</url>
      
        <content type="html"><![CDATA[<p>每行的行首都添加一个字符串：%s/^/要插入的字符串</p><p>每行的行尾都添加一个字符串：%s/$/要插入的字符串</p><p>解释：</p><p>% 代表针对被编辑文件的每一行进行后续操作</p><p>$ 代表一行的结尾处</p><p>^ 代表一行的开头处</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vim如何删除行首、行位空格、空格行</title>
      <link href="/2021/09/26/vim-ru-he-shan-chu-xing-shou-xing-wei-kong-ge-kong-ge-xing/"/>
      <url>/2021/09/26/vim-ru-he-shan-chu-xing-shou-xing-wei-kong-ge-kong-ge-xing/</url>
      
        <content type="html"><![CDATA[<p>删除空格行：</p><p>非编辑状态下输入:g/^$/d</p><p>删除行首空格：</p><p>非编辑状态下输入:%s/^\s*//g</p><p>删除行尾空格：</p><p>非编辑状态下输入:%s/\s*$//g</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用地址</title>
      <link href="/2021/09/26/chang-yong-di-zhi/"/>
      <url>/2021/09/26/chang-yong-di-zhi/</url>
      
        <content type="html"><![CDATA[<p><font face="黑体">阿里云</font></p><p>1.<a href="https://homenew.console.aliyun.com/home/dashboard/Operation#/main">https://homenew.console.aliyun.com/home/dashboard/Operation#/main</a><br><font face="黑体">油猴脚本</font></p><p>2.<a href="https://greasyfork.org/zh-CN/scripts/422814-%E7%99%BE%E5%BA%A6%E4%BA%91%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%80%8D%E9%80%9F-%E5%85%8Dvip%E8%A7%A3%E9%94%81%E5%80%8D%E9%80%9F-%E7%94%BB%E8%B4%A8-%E5%85%A8%E7%BD%91%E7%8B%AC%E5%AE%B6">https://greasyfork.org/zh-CN/scripts/422814-%E7%99%BE%E5%BA%A6%E4%BA%91%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%80%8D%E9%80%9F-%E5%85%8Dvip%E8%A7%A3%E9%94%81%E5%80%8D%E9%80%9F-%E7%94%BB%E8%B4%A8-%E5%85%A8%E7%BD%91%E7%8B%AC%E5%AE%B6</a></p><p><font face="黑体">佛跳墙</font></p><p>3.<a href="https://www.qingfengwuhan.com/cn/?a=gi9cp">https://www.qingfengwuhan.com/cn/?a=gi9cp</a></p><p><font face="黑体">腾讯企业邮箱</font></p><p>4.<a href="https://exmail.qq.com/cgi-bin/frame_html?sid=s9mygrvxv209cl8_,2&amp;sign_type=&amp;r=9a3e649d7110b94b98d7d3f3dc1b091a">https://exmail.qq.com/cgi-bin/frame_html?sid=s9mygrvxv209cl8_,2&amp;sign_type=&amp;r=9a3e649d7110b94b98d7d3f3dc1b091a</a></p><p><font face="黑体">阿里企业邮箱</font></p><p>5.<a href="https://qiye.aliyun.com/alimail/auth/login?reurl=/alimail/%23h=WyJmbV8yIixbIjIiLCIiLHsiZklkIjoiMSIsInNlbElkIjoiMV8wOkR6enp6eVN4akpKJC0tLS5LdWs0WExuMCIsIm9mZnNldCI6MCwicmciOltbIm1haWxfc2Vzc2lvbl92aWV3Iix7ImlkIjoibSExXzA6RHp6enp5U3hqSkokLS0tLkt1azRYTG4wIiwic2YiOjAsImNvbnRhaW5lcldpZHRoIjozNjB9XV19LHsibGFiZWwiOiLpgq7ku7YifV1d">https://qiye.aliyun.com/alimail/auth/login?reurl=%2Falimail%2F%23h%3DWyJmbV8yIixbIjIiLCIiLHsiZklkIjoiMSIsInNlbElkIjoiMV8wOkR6enp6eVN4akpKJC0tLS5LdWs0WExuMCIsIm9mZnNldCI6MCwicmciOltbIm1haWxfc2Vzc2lvbl92aWV3Iix7ImlkIjoibSExXzA6RHp6enp5U3hqSkokLS0tLkt1azRYTG4wIiwic2YiOjAsImNvbnRhaW5lcldpZHRoIjozNjB9XV19LHsibGFiZWwiOiLpgq7ku7YifV1d</a></p><p><font face="黑体">公积金查询</font><br>6.<a href="https://grwsyw.gjj.beijing.gov.cn/ish/flow/menu/PPLGRZH0102?_r=0.4468948447490928">https://grwsyw.gjj.beijing.gov.cn/ish/flow/menu/PPLGRZH0102?_r=0.4468948447490928</a></p><p><font face="黑体">谷歌翻译</font><br>7.<a href="https://translate.google.com/">https://translate.google.com/</a><br><font face="黑体">vmware</font><br>8.<a href="https://customerconnect.vmware.com/en/downloads/details?downloadGroup=ESXI60U3A&amp;productId=491&amp;rPId=74596">https://customerconnect.vmware.com/en/downloads/details?downloadGroup=ESXI60U3A&amp;productId=491&amp;rPId=74596</a></p><p><font face="黑体">Chrome插件扩展下载网</font><br>9.<a href="https://www.extfans.com/search/extensions/%25E8%25BA%25AB%25E4%25BB%25BD/">https://www.extfans.com/search/extensions/%25E8%25BA%25AB%25E4%25BB%25BD/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>testimg</title>
      <link href="/2021/09/26/testimg/"/>
      <url>/2021/09/26/testimg/</url>
      
        <content type="html"><![CDATA[<p><kbd>ctrl</kbd> + <kbd>R<kbd></kbd></kbd></p><p><font face="黑体">我是黑体字</font><br><font face="微软雅黑">我是微软雅黑</font><br><font face="STCAIYUN">我是华文彩云</font><br><font color="#0099ff" size="3" face="黑体">color=#0099ff size=3 face=”黑体”</font><br><font color="#00ffff" size="4">color=#00ffff size=4</font><br><font color="gray" size="5">color=gray size=5</font></p><p><code>我是高亮</code></p><pre><code>`文本高亮`</code></pre><blockquote><p>这里的内容显示在内容块中</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这是<label style="color:red">红色</label>字体<br> 这是<label style="color:green">绿色</label>字体<br> 这是<label style="color:yellow">黄色</label>字体<br> 这是<label style="color:blue">蓝色</label>字体</p><pre><code>&gt; 这里的内容显示在内容块中</code></pre><p><img "" class="lazyload placeholder" data-original="/images/pasted-1.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="Image text"></p><p><img "" class="lazyload placeholder" data-original="/images/pasted-2.jpg" src="https://img10.360buyimg.com/ddimg/jfs/t1/157667/29/9156/134350/603c6445Ebbc9cabe/41219c5d36d45072.gif" alt="Image 22222"></p><p>asda</p><p>– haha –</p><p>我是一段文字</p><pre><code>asa</code></pre><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><ol><li>第一项：<ul><li>第一项嵌套的第一个元素</li><li>第一项嵌套的第二个元素</li></ul></li><li>第二项：<ul><li>第二项嵌套的第一个元素</li><li>第二项嵌套的第二个元素</li></ul></li></ol><ul><li>第一项</li><li>第二项</li><li>第三项</li></ul><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>这是加粗的文字</strong></p><p><em>这是倾斜的文字</em>`</p><p><em><strong>这是斜体加粗的文字</strong></em></p><p><del>这是加删除线的文字</del></p><blockquote><p>这是引用的内容</p><blockquote><p>这是引用的内容</p><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><blockquote><p>这是引用的内容</p></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote></blockquote><hr><hr><hr><hr><pre><code>1.![Image text](/images/pasted-1.jpg)</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>中秋快乐</title>
      <link href="/2021/09/20/zhongqiu/"/>
      <url>/2021/09/20/zhongqiu/</url>
      
        <content type="html"><![CDATA[<p>中秋将至，提前祝您：<br>身体“月”来“月”棒，笑容“月”来“月”甜，钞票“月”来“月”多，生活“月”来“月”顺！<br>   提前祝大家中秋快乐，祝愿你们幸福安康，万事如意！    </p><div class="video"><video controls preload><source src="https://v.youku.com/v_show/id_XNTgwNzc0OTIyOA==" type="video/mp4">Your browser does not support the video tag.</video></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>这是我的不归路，因为我要胜天半子</title>
      <link href="/2021/09/16/zhe-shi-wo-de-bu-gui-lu-yin-wei-wo-yao-sheng-tian-ban-zi/"/>
      <url>/2021/09/16/zhe-shi-wo-de-bu-gui-lu-yin-wei-wo-yao-sheng-tian-ban-zi/</url>
      
        <content type="html"><![CDATA[<p>我是祁同伟，人生如戏，今天我写下这篇文章，我的人生即将谢幕在孤鹰岭——那片我曾经的福地。我如果十多年前死在这片土地上，我就是一个英雄，一个为了人民的利益不惧流血牺牲的英雄。</p><p>而现在，我死以后会遭到唾弃，起码是以人民名义的唾弃。</p><p> 我是一个不被上天眷顾的人</p><p>所以我只能选择人定胜天。记得在那次饭桌上想杀侯亮平，虽未能如愿，但如果时光倒流，我依旧会坚持选择，这是我的不归路，因为我要胜天半子。</p><p>十年寒窗卧薪尝胆，为的是事业；以身试险血战孤鹰岭，为的是爱情。</p><p>我有我爱的人，我爱的人是陈阳，是这个女孩让我一度觉得老天爷也曾关注过我。</p><p>我是一个农民的儿子</p><p>一路走来贫困潦倒但我渴望功成名就，渴望出人头地，用自己十二万分的努力学习奋斗去报答我的父母，报答曾经有恩于我的故人。</p><p>有人说我与高小琴之间不是爱情是赵瑞龙设计的套，其实我更愿意将我和小琴的相遇描述成邂逅。至于赵瑞龙，在他的棋局上我是他的棋子，但在我下的棋局中他何尝不是。</p><p>初识高小琴，我们相见恨晚。哪怕之前我们有再多的差异，但有一处相同就够了——那就是我们都是穷人的孩子。我和小琴就有了我们的孩子，在梁璐那里失去的和得不到的，小琴全部给予我了。</p><p>我只是一只蝼蚁</p><p>我第一次去到那个司法所见到那位司法所所长的时候，他满脸沟壑纵横，神情呆滞。他是三十年前政法大学的毕业生，在这个岗位一干就是30年。</p><p>我终于明白了，在赵立春、梁璐父亲面前，我只是一只蝼蚁。后来我常和别人说，当年在汉东大学操场下向梁璐下跪的那一刻我的心伴随着我的尊严一起死了。</p><p>其实，那天在司法所见到老所长的那个瞬间，我的心就已经死了。</p><p>我不是心性不坚定</p><p>陈海坚持原则，他也为自己的坚持付出了惨痛的代价，即使我不杀他，汉东官场中巴不得他死的人比比皆是。李达康坚持所谓的原则，</p><p>深受沙瑞金赏识结果怎么样呢，还不是妻离子散；易学习坚持原则，可差一点不就像当年茅台山区那个终年不见天日的老所长。我可以去哭坟，我可以去刨地，这不是我的创举。</p><p>我知道侯亮平一定会把所有的原因归结于我心性不坚定。但当初，如果他是我，他也一样。如果我是他，也不会有后来的祁同伟。</p><p>我希望我可以是侯亮平</p><p>思绪千回百转间，我也心甘情愿，其实我知道这盘棋我的对手根本就不是神仙。作为一个男人，我追求事业成功、爱情美满，何错之有？</p><p>为人进出的门紧锁着。人生至此，我不遗憾。我会被世人以人民的名义唾弃，但过不了多久这片土地就会抹去我所有的痕迹。</p><p>所以我不担心遗臭万年，他们也不可能流芳百世，他只不过会比我多活几十年。如果来生我还是祁同伟，还在当年模样的汉东，我依旧坚持这样选择。</p><p>只是如果有来生，我希望我可以是侯亮平…</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客   </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
