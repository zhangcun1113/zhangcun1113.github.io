{"meta":{"title":"张不胖","subtitle":"","description":"","author":"张存","url":"https://blog.zhangcun.store","root":"/"},"pages":[{"title":"about","date":"2021-09-16T07:16:04.000Z","updated":"2021-09-16T07:16:41.032Z","comments":true,"path":"about/index.html","permalink":"https://blog.zhangcun.store/about/index.html","excerpt":"","text":""},{"title":"壁纸","date":"2021-09-16T07:40:46.000Z","updated":"2021-09-16T07:41:36.342Z","comments":true,"path":"bizhi/index.html","permalink":"https://blog.zhangcun.store/bizhi/index.html","excerpt":"","text":""},{"title":"categories","date":"2021-09-16T07:13:35.000Z","updated":"2021-09-16T07:14:38.692Z","comments":true,"path":"categories/index.html","permalink":"https://blog.zhangcun.store/categories/index.html","excerpt":"","text":""},{"title":"friends","date":"2021-09-16T07:22:58.000Z","updated":"2021-09-16T07:25:04.985Z","comments":true,"path":"friends/index.html","permalink":"https://blog.zhangcun.store/friends/index.html","excerpt":"","text":""},{"title":"图库","date":"2021-09-16T07:38:49.000Z","updated":"2021-09-16T07:40:02.040Z","comments":true,"path":"gallery/index.html","permalink":"https://blog.zhangcun.store/gallery/index.html","excerpt":"","text":"壁纸 收藏的一些壁纸 古典图片 中国古典图片 风景 风景图片"},{"title":"tags","date":"2021-09-16T07:15:02.000Z","updated":"2021-09-16T07:15:33.467Z","comments":true,"path":"tags/index.html","permalink":"https://blog.zhangcun.store/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"shell 脚本监控公司外网ip 并实现邮件报警","slug":"shell-脚本监控公司外网ip-并实现邮件报警","date":"2021-11-09T09:02:33.000Z","updated":"2021-11-09T09:09:05.592Z","comments":true,"path":"2021/11/09/shell-jiao-ben-jian-kong-gong-si-wai-wang-ip-bing-shi-xian-you-jian-bao-jing/","link":"","permalink":"https://blog.zhangcun.store/2021/11/09/shell-jiao-ben-jian-kong-gong-si-wai-wang-ip-bing-shi-xian-you-jian-bao-jing/","excerpt":"","text":"#!/bin/bash new_ip=`curl ifconfig.me` #获取新公网ip old_ip=`cat /root/ip` #查看旧ip mail_sender=1776803208@qq.com #发件邮件邮箱 mail_user=xxxxx #接收收邮件邮箱 mail_subject=IP_CHANGED #邮件主题 if [ ! $new_ip == $old_ip ] then echo $new_ip &gt; /root/ip echo &quot;ip has changed, the new ip is $new_ip !!! &quot;|mail -s &quot;$mail_subject&quot; -S from=$mail_sender &quot;$mail_user&quot; fi 注：需要安装mailx 按脚本新建对应得ip文件 –&gt; /root/ip配置定时任务：*/5 * * * * /root/ip.sh &gt;/dev/null 2&gt;&amp;1 其他获取新公网ip方法：curl icanhazip.comcurl ifconfig.mecurl ident.mecurl http://ip.3322.netcurl whatismyip.akamai.comcurl http://members.3322.org/dyndns/getip","categories":[],"tags":[],"author":"张存"},{"title":"ubuntu 安装发送邮件 heirloom-mailx","slug":"ubuntu-安装发送邮件-heirloom-mailx","date":"2021-11-09T08:47:37.000Z","updated":"2021-11-09T08:57:07.829Z","comments":true,"path":"2021/11/09/ubuntu-an-zhuang-fa-song-you-jian-heirloom-mailx/","link":"","permalink":"https://blog.zhangcun.store/2021/11/09/ubuntu-an-zhuang-fa-song-you-jian-heirloom-mailx/","excerpt":"","text":"前言ubuntu使用heirloom-mailx命令发送邮件。遇到一些坑，记录一下安装和配置的过程。 安装安装命令： sudo apt install heirloom-mailx我给俩服务器装这个，一个报错：Package has no installation candidate，一个不报错。最后发现报错的服务器的apt-get使用的是163源，不报错的使用的是阿里云源。163的源里面没有包含这个软件包。所以添加这个软件包所在源： sudo vim /etc/apt/sources.list在文件末端加入： deb http://cz.archive.ubuntu.com/ubuntu xenial main universe 更新软件包列表： apt-get update重新insatll： sudo apt install heirloom-mailx安装成功。 配置网易个人邮箱配置个人邮箱需要在客户端开启smtp功能，允许smtp登录。我这里是网易邮箱，只写了网易邮箱的方法。其它非网易邮箱的smtp如何开启可以自己查一下。 126邮箱为例，登录后在上方设置处选择POP3/SMTP/IMAP这个选项 进去之后把这个SMTP服务开启来，我这里已经开启了。这两个开哪个都行，因为反正我需要的是SMTP，这两个都包含。 会让你发个短信，扫码，然后开完之后给你一个密码 记下这个密码，这个密码可以用于通过SMTP服务登录邮箱 回到服务器上，要在公网发送邮件，需要在安装成功后修改配置文件： sudo vi /etc/s-nail.rc在文件末端加入： set from=”&#x78;&#120;&#120;&#120;&#x40;&#49;&#50;&#54;&#46;&#99;&#111;&#x6d;“set smtp=”smtp.126.com”set smtp-auth-user=”&#x78;&#x78;&#120;&#120;&#64;&#49;&#x32;&#54;&#46;&#x63;&#x6f;&#109;“set smtp-auth-password=”xxxxx”set smtp-auth=login smtp-auth-user是你的邮箱地址，smtp-auth-password是在网页上开启SMTP服务后获得的那个密码配置完成，保存退出，发邮件测试：echo ‘hello world’ | heirloom-mailx -s “邮件标题” -t &#x78;&#120;&#x78;&#x78;&#64;&#49;&#x32;&#54;&#46;&#x63;&#111;&#x6d;","categories":[],"tags":[],"author":"张存"},{"title":"详解几种Linux 查询外网出口IP命令的方法","slug":"详解几种Linux-查询外网出口IP命令的方法","date":"2021-11-09T08:20:27.000Z","updated":"2021-11-09T08:24:12.106Z","comments":true,"path":"2021/11/09/xiang-jie-ji-chong-linux-cha-xun-wai-wang-chu-kou-ip-ming-ling-de-fang-fa/","link":"","permalink":"https://blog.zhangcun.store/2021/11/09/xiang-jie-ji-chong-linux-cha-xun-wai-wang-chu-kou-ip-ming-ling-de-fang-fa/","excerpt":"","text":"Curl 纯文本格式输出:curl icanhazip.comcurl ifconfig.mecurl curlmyip.comcurl ip.appspot.comcurl ipinfo.io/ipcurl ipecho.net/plaincurl www.trackip.net/i curl JSON格式输出:curl ipinfo.io/jsoncurl ifconfig.me/all.jsoncurl www.trackip.net/ip?json curl XML格式输出:curl ifconfig.me/all.xmlcurl 得到所有IP细节 （挖掘机）curl ifconfig.me/all 使用 DYDNS （当你使用 DYDNS 服务时有用）curl -s ‘http://checkip.dyndns.org&#39; | sed ‘s/.*Current IP Address: ([0-9.])./\\1/g’curl -s http://checkip.dyndns.org/ | grep -o “[[:digit:].]+“ 使用 Wget 代替 Curlwget http://ipecho.net/plain -O - -q ; echowget http://observebox.com/ip -O - -q ; echo 使用 host 和 dig 命令如果有的话，你也可以直接使用 host 和 dig 命令。host -t a dartsclink.com | sed ‘s/.*has address //‘dig +short myip.opendns.com @resolver1.opendns.com bash 脚本示例:#!/bin/bash PUBLIC_IP=`wget http://ipecho.net/plain -O - -q ; echo` echo $PUBLIC_IP","categories":[],"tags":[],"author":"张存"},{"title":"内网穿透无需公网IP的工具Holer","slug":"内网穿透无需公网IP的工具Holer","date":"2021-11-09T08:16:23.000Z","updated":"2021-11-09T08:19:17.659Z","comments":true,"path":"2021/11/09/nei-wang-chuan-tou-wu-xu-gong-wang-ip-de-gong-ju-holer/","link":"","permalink":"https://blog.zhangcun.store/2021/11/09/nei-wang-chuan-tou-wu-xu-gong-wang-ip-de-gong-ju-holer/","excerpt":"","text":"Holer是一个免费开源的内网穿透工具，它可以将局域网服务器代理到公网的内网穿透工具，支持转发基于TCP协议的报文。 Holer地址：https://github.com/Wisdom-Projects/holer 1.下载软件包并解压：软件包地址：https://github.com/Wisdom-Projects/holer/tree/master/Binary 解压软件包 holer-client.zip 2.修改配置文件holer-client/conf/holer.conf 公网和内网的地址映射关系 Holer Access Key Internet Address Local AddressHOLER_CLIENT-2F8D8B78B3C2A0AE holer.org:65530 127.0.0.1:8080HOLER_CLIENT-3C07CDFD1BF99BF2 holer.org:65531 127.0.0.1:8088HOLER_CLIENT-2A623FCB6E2A7D1D holer.org:65532 127.0.0.1:80本地的Tomcat端口是8080，选择第一条记录里的Holer Access Key配置到holer-client/conf/holer.conf文件里 HOLER_ACCESS_KEY=HOLER_CLIENT-2F8D8B78B3C2A0AE如果您的Tomcat端口是8088或者80请选择对应的记录进行修改，如果您的Tomcat端口均不在上述列表里，建议将本地的Tomcat端口修改为上述列表里的端口8080或者8088或者80，否则无法访问映射后的公网地址。 3.启动Holer服务cd holer-client/binWindows: 执行命令：startup.bat或者双击startup.bat Linux: 执行命令： sh startup.sh 4.访问映射后的公网地址启动本地的Tomcat，浏览器里输入URL: http://holer.org:65530启动成功就可在公网上也能访问到了本地的Tomcat Web应用了","categories":[],"tags":[],"author":"张存"},{"title":"【shell】shell脚本实现监控端口，端口不存在自动重启","slug":"【shell】shell脚本实现监控端口，端口不存在自动重启","date":"2021-11-09T08:11:00.000Z","updated":"2021-11-09T08:12:49.734Z","comments":true,"path":"2021/11/09/shell-shell-jiao-ben-shi-xian-jian-kong-duan-kou-duan-kou-bu-cun-zai-zi-dong-chong-qi/","link":"","permalink":"https://blog.zhangcun.store/2021/11/09/shell-shell-jiao-ben-shi-xian-jian-kong-duan-kou-duan-kou-bu-cun-zai-zi-dong-chong-qi/","excerpt":"","text":"服务总是自动挂掉，为解决运维人员不能及时重启，所以写个定时脚本，一分钟监控一次端口是否占用，不占用说明服务挂了，自动重启服务。 脚本，以8080端口为例 #vim /usr/local/taskStartTomcat.sh #!/bin/sh tomcat=`netstat -an | grep &quot;:8080&quot; | awk &#39;$1 == &quot;tcp&quot; &amp;&amp; $NF == &quot;LISTEN&quot; &#123;print $0&#125;&#39; | wc -l` if [ $tomcat -eq 0 ];then #如果端口没有占用的话要怎么怎么样 /usr/local/apache-tomcat-jenkins/bin/startup.sh else #如果端口被占用的话要怎么怎么样 echo &quot;运行正常!&quot; fi 创建定时任务 #crontab -e */1 * * * * sh /usr/local/taskStartTomcat.sh","categories":[],"tags":[],"author":"张存"},{"title":"Dockerfile命令详解","slug":"Dockerfile命令详解","date":"2021-11-05T08:15:42.000Z","updated":"2021-11-05T08:16:00.281Z","comments":true,"path":"2021/11/05/dockerfile-ming-ling-xiang-jie/","link":"","permalink":"https://blog.zhangcun.store/2021/11/05/dockerfile-ming-ling-xiang-jie/","excerpt":"","text":"使用docker就会避免不了的要做各种镜像，就会用到dockerfile，记录一下dockerfile的主要命令 1、主要组成部分 dockerfile执行build命令时，是从上倒下依次执行的，dockerfile的基本组成部分如下。 主要部分 代表性命令 基础镜像信息 FROM 维护者信息 MAINTAINER 镜像操作指令 RUN、COPY、ADD、EXPOSE、WORKDIR、ONBUILD、USER、VOLUME、ENV等 容器启动时执行指令 CMD、ENTRYPOINT 2、各命令详解 FROM：指定基础镜像，必须为dockerfile中的第一个命令 格式： FROM FROM : FROM @示例： FROM mysql:5.6注： tag或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像 MAINTAINER: 维护者信息 格式： MAINTAINER 示例： MAINTAINER Jack MAINTAINER &#x6a;&#97;&#x63;&#x6b;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109; MAINTAINER Jack &#106;&#97;&#x63;&#107;&#64;&#x31;&#x36;&#x33;&#46;&#x63;&#x6f;&#x6d; RUN：构建镜像时执行的命令，一个文件中可以包含多个RUN命令 RUN用于在镜像容器中执行命令，有以下两种命令执行方式：shell执行，即/bin/sh格式： RUN exec执行格式： RUN [“executable”, “param1”, “param2”] 要注意的是，executable是命令，后面的param是参数示例： RUN yum install -y nginx RUN [“yum”, “install”, “-y”, “nginx”]注： RUN指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定–no-cache参数，如：docker build –no-cache 由于RUN命令会生成一个镜像层，所以RUN并不是越多越好，需要合理使用，如果一个RUN中执行多个命令，可以使用 &amp;&amp; 连接，如果命令过长，可以使用 \\ 换行，例如 RUN apt-get update &amp;&amp; apt-get install -y \\ bzr \\ cvs \\ git \\ mercurial \\ subversion 并且这样写还有个优点，apt-get update 和 apt-get install 被放在一个 RUN 指令中执行，这样能够保证每次安装的是最新的包。如果 apt-get install 在单独的 RUN 中执行，则会使用 apt-get update 创建的镜像层，而这一层可能是很久以前缓存的 ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget 如果目的位置不存在，Docker会自动创建所需要的目录结 格式： ADD … ADD [““,… ““] 用于支持包含空格的路径示例： ADD hom* /mydir/ # 添加所有以”hom”开头的文件 ADD hom?.txt /mydir/ # ? 替代一个单字符,例如：”home.txt” ADD test relativeDir/ # 添加 “test” 到 WORKDIR/relativeDir/ ADD test /absoluteDir/ # 添加 “test” 到 /absoluteDir/ 注意： 需要复制的本地文件一定要放在Dockerfile文件的同级目录下 原因： 因为构建环境将会先上传到Docker守护进程，而复制是在Docker守护进程中进行的。任何位于构建环境之外的东西都是不可用的。ADD指令的目的的位置则必须是容器内部的一个绝对路径。 COPY：功能类似ADD，但是是不会自动解压文件，也不能访问网络资源 就是不能解压，其他限制条件跟ADD一样 WORKDIR：指定工作目录，类似于cd命令，之后的命令都是基于此工作目录 格式： WORKDIR /path/to/workdir示例： WORKDIR /a (这时工作目录为/a) WORKDIR b (这时工作目录为/a/b) WORKDIR c (这时工作目录为/a/b/c)注： 通过WORKDIR设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。 LABEL：用于为镜像添加元数据 格式： LABEL = = = …示例： LABEL version=”1.0” description=”这是一测试工程”注： 使用LABEL指定元数据时，一条LABEL指定可以指定一或多条元数据，指定多条元数据时不同元数据之间通过空格分隔。推荐将所有的元数据通过一条LABEL指令指定，以免生成过多的中间镜像。 ENV：设置环境变量 格式： ENV #之后的所有内容均会被视为其的组成部分，因此，一次只能设置一个变量 ENV = … #可以设置多个变量，每个变量为一个”=“的键值对，如果中包含空格，可以使用\\来进行转义，也可以通过””来进行标示；另外，反斜线也可以用于续行示例： ENV myName John Doe ENV myDog Rex The Dog ENV myCat=fluffy EXPOSE：指定暴露镜像的端口供主机做映射 格式： EXPOSE […]示例： EXPOSE 80 443 EXPOSE 8080 EXPOSE 11211/tcp 11211/udp注： EXPOSE并不会让容器的端口访问到主机。要使其可访问，需要在docker run运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口 VOLUME：添加卷，用于指定持久化目录 格式： VOLUME [“/path/to/dir”]示例： VOLUME [“/data”] VOLUME [“/var/www”, “/var/log/apache2”, “/etc/apache2”]注： 一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：1 卷可以容器间共享和重用2 容器并不一定要和其它容器共享卷3 修改卷后会立即生效4 对卷的修改不会对镜像产生影响5 卷会一直存在，直到没有任何容器在使用它 USER:指定运行容器时的用户名或 UID，后续的操作都会使用指定用户。使用USER指定用户时，可以使用用户名、UID或GID，或是两者的组合。当服务不需要管理员权限时，可以通过该命令指定运行用户。并且可以在之前创建所需要的用户 格式: USER user USER user:group USER uid USER uid:gid USER user:gid USER uid:group 示例： USER www 注： 使用USER指定用户后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT都将使用该用户。镜像构建完成后，通过docker run运行容器时，可以通过-u参数来覆盖所指定的用户。 ARG：用于指定传递给构建运行时的变量 格式： ARG [=]示例： ARG site ARG build_user=www ONBUILD：用于设置镜像触发器 格式： ONBUILD [INSTRUCTION]示例： ONBUILD ADD . /app/src ONBUILD RUN /usr/local/bin/python-build –dir /app/src注： 当所构建的镜像被用做其它镜像的基础镜像时（比如用户的镜像需要从某为准备好的位置添加源代码，或者用户需要执行特定于构建镜像的环境的构建脚本），该镜像中的触发器将会被钥触发 例如创建镜像image-A FROM ubuntu … ONBUILD ADD . /var/www … 然后创建镜像image-B，指定image-A为基础镜像，如 FROM image-A … 然后在构建image-B的时候，日志上显示如下: Step 0 : FROM image-A Execting 1 build triggers Step onbuild-0 : ADD . /var/www … CMD：构建容器后调用，也就是在容器启动时才进行调用，存在多个CMD时只有最后一个生效，也支持exec语法。 格式： CMD [“executable”,”param1”,”param2”] (执行可执行文件，优先) CMD [“param1”,”param2”] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数) CMD command param1 param2 (执行shell内部命令)示例： CMD echo “This is a test.” | wc - CMD [“/usr/bin/wc”,”–help”]注： CMD不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。 ENTRYPOINT：配置容器，使其可执行化。配合CMD可省去”application”，只使用参数。 格式： ENTRYPOINT [“executable”, “param1”, “param2”] (可执行文件, 优先) ENTRYPOINT command param1 param2 (shell内部命令)示例： FROM ubuntu ENTRYPOINT [“top”, “-b”] CMD [“-c”]注： ENTRYPOINT与CMD非常类似，不同的是通过docker run执行的命令不会覆盖ENTRYPOINT，而docker run命令中指定的任何参数，都会被当做参数再次传递给ENTRYPOINT。Dockerfile中只允许有一个ENTRYPOINT命令，多指定时会覆盖前面的设置，而只执行最后的ENTRYPOINT指令。 注意！！！！ CMD和ENTRYPOINT的区别 CMD和ENTRYPOINT同样作为容器启动时执行的命令，区别有以下几点： CMD的命令会被 docker run 的命令覆盖而ENTRYPOINT不会 如使用CMD [&quot;/bin/bash&quot;]或ENTRYPOINT [&quot;/bin/bash&quot;]后，再使用docker run -ti image启动容器，它会自动进入容器内部的交互终端，如同使用docker run -ti image /bin/bash。 但是如果启动镜像的命令为docker run -ti image /bin/ps，使用CMD后面的命令就会被覆盖转而执行bin/ps命令，而ENTRYPOINT的则不会，而是会把docker run 后面的命令当做ENTRYPOINT执行命令的参数。 放个例子 Dockerfile中为ENTRYPOINT [“/user/sbin/nginx”] 然后通过启动build之后的容器docker run -ti image -g “daemon off” 此时-g “daemon off”会被当成参数传递给ENTRYPOINT，最终的命令变成了/user/sbin/nginx -g “daemon off” 如果Dockerfile中定义的是CMD，则会被覆盖 CMD和ENTRYPOINT都存在时，CMD的指令就变成了ENTRYPOINT的参数，并且此CMD提供的参数也会被 docker run 后面的命令覆盖 Dockerfile中指令..ENTRYPOINT [“echo”,”hello”,”i am”]CMD [“docker”] 之后启动构建之后的容器 使用docker run -ti image输出“hello i am docker” 使用docker run -ti image world输出“hello i am world” 最后说一下docker build命令，Dockerfile写完后要生产镜像，就需要docker build docker build 命令用于使用 Dockerfile 创建镜像，语法 docker build [OPTIONS] PATH | URL |-参数说明： –build-arg=[] :设置镜像创建时的变量； –cpu-shares :设置 cpu 使用权重； –cpu-period :限制 CPU CFS周期； –cpu-quota :限制 CPU CFS配额； –cpuset-cpus :指定使用的CPU id； –cpuset-mems :指定使用的内存 id； –disable-content-trust :忽略校验，默认开启； -f :指定要使用的Dockerfile路径； –force-rm :设置镜像过程中删除中间容器； –isolation :使用容器隔离技术； –label=[] :设置镜像使用的元数据； -m :设置内存最大值； –memory-swap :设置Swap的最大值为内存+swap，”-1”表示不限swap； –no-cache :创建镜像的过程不使用缓存； –pull :尝试去更新镜像的新版本； –quiet, -q :安静模式，成功后只输出镜像 ID； –rm :设置镜像成功后删除中间容器； –shm-size :设置/dev/shm的大小，默认值是64M； –ulimit :Ulimit配置。 –tag, -t: 镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。 –network: 默认 default。在构建期间设置RUN指令的网络模式 示例 使用当前目录的 Dockerfile 创建镜像，标签为 runoob/ubuntu:v1。docker build -t runoob/ubuntu:v1 . 使用URL github.com/creack/docker-firefox 的 Dockerfile 创建镜像。docker build github.com/creack/docker-firefox 也可以通过 -f Dockerfile 文件的位置：$ docker build -f /path/to/a/Dockerfile . 在 Docker 守护进程执行 Dockerfile 中的指令前，首先会对 Dockerfile 进行语法检查，有语法错误时会返回：$ docker build -t test/myapp .Sending build context to Docker daemon 2.048 kBError response from daemon: Unknown instruction: RUNCMD","categories":[],"tags":[],"author":"张存"},{"title":"你只是他们其中的一个","slug":"你是他们其中的一个","date":"2021-11-05T07:20:39.000Z","updated":"2021-11-05T07:41:38.002Z","comments":true,"path":"2021/11/05/ni-shi-ta-men-qi-zhong-de-yi-ge/","link":"","permalink":"https://blog.zhangcun.store/2021/11/05/ni-shi-ta-men-qi-zhong-de-yi-ge/","excerpt":"","text":"条件太好的男生和漂亮的女生 很多都是没有空窗期的 听明白了吗 有多少人和想和他们谈恋爱 他们谈过多少 你只是他们其中的一个 你在那自作多情什么呢","categories":[],"tags":[],"author":"张存"},{"title":"redis设置密码","slug":"redis设置密码","date":"2021-11-04T03:29:45.000Z","updated":"2021-11-04T03:31:00.997Z","comments":true,"path":"2021/11/04/redis-she-zhi-mi-ma/","link":"","permalink":"https://blog.zhangcun.store/2021/11/04/redis-she-zhi-mi-ma/","excerpt":"","text":"redis安装过程 $ wget http://download.redis.io/releases/redis-5.0.3.tar.gz$ tar xzf redis-5.0.3.tar.gz$ cd redis-5.0.3$ make 启动服务 $ src/redis-server # 启动redis服务，使用的是默认配置，无密码$ src/redis-cli # 用client端链接本地redis服务redis&gt; set foo barOKredis&gt; get foo“bar” 设置密码等 vim redis.conf/requirepass # 找到设置密码的字段requirepass 123456 # 密码设置为 123456daemonize yes # 设置后台运行port 6379bind 192.168.1.100 10.0.0.1 # 绑定外网可以访问的本机「网卡」地址，可以绑定多个ip，只要本机有这个网卡的iplogfile “/export/logs/redis.log” # 设置日志的存放位置pidfile /var/run/redis_6379.pid # 设置pid文件的存放位置databases 16 # 设置数据库的个数，默认是16个（从0到15） 登录和使用 src/redis-server /export/redis-5.0.3/redis.conf # 启动指定配置文件的redis服务[root@JXQ-97-7-98 redis-5.0.3]# src/redis-server /export/redis-5.0.3/redis.conf520:C 24 Jan 2019 21:40:22.943 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo520:C 24 Jan 2019 21:40:22.943 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=520, just started520:C 24 Jan 2019 21:40:22.943 # Configuration loaded[root@JXQ-97-7-98 redis-5.0.3]#[root@JXQ-97-7-77 redis-3.2.1]# src/redis-cli -h ‘100.97.7.98’ -p ‘6379’ -a ‘123456’ # 客户端连接服务100.97.7.98:6379&gt; set f 3OK100.97.7.98:6379&gt; get f“3” 这里要说一下为什么要设置密码？因为只有本地访问redis是无法满足我们的需求的，我们需要远程访问，这个时候就需要设置密码了，我们需要认证，不是谁都可以访问的。 还有一个问题就是bind，默认是绑的本机网卡ip 127.0.0.1，但这个只能本机访问，所以我们要绑定到本机的网卡上，这样远程就可以根据ip来访问了，注意，服务器有可能会有多块网卡，绑哪个要根据网络情况来定，可以绑定多个ip，如下： ifconfigeth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt; mtu 1500 inet 100.97.7.98 netmask 255.255.252.0 broadcast 100.97.7.255 inet6 fe80::f200:64ff:feb1:7c6 prefixlen 64 scopeid 0x20 ether f0:00:64:61:07:c6 txqueuelen 1000 (Ethernet) RX packets 928533 bytes 193136262 (184.1 MiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 789011 bytes 110711946 (105.5 MiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt; mtu 65536 inet 127.0.0.1 netmask 255.0.0.0 inet6 ::1 prefixlen 128 scopeid 0x10 loop txqueuelen 1 (Local Loopback) RX packets 22553 bytes 922439 (900.8 KiB) RX errors 0 dropped 0 overruns 0 frame 0 TX packets 22553 bytes 922439 (900.8 KiB) TX errors 0 dropped 0 overruns 0 carrier 0 collisions 0 可以看到，本机有两个ip，分别是 100.97.7.98 和127.0.0.1，所以 redis.conf 中的可以设置为 bind 100.97.7.98 127.0.0.1，也可以设置1个，但是不能设置本机网卡中不存在的ip，那样会无法启动redis服务的","categories":[],"tags":[],"author":"张存"},{"title":"Nginx负载均衡中4层代理和7层代理对比","slug":"Nginx负载均衡中4层代理和7层代理对比","date":"2021-11-04T03:27:11.000Z","updated":"2021-11-04T03:27:31.537Z","comments":true,"path":"2021/11/04/nginx-fu-zai-jun-heng-zhong-4-ceng-dai-li-he-7-ceng-dai-li-dui-bi/","link":"","permalink":"https://blog.zhangcun.store/2021/11/04/nginx-fu-zai-jun-heng-zhong-4-ceng-dai-li-he-7-ceng-dai-li-dui-bi/","excerpt":"","text":"1.4层代理和7层代理什么意思？ 这里的层是OSI 7层网络模型，OSI 模型是从上往下的，越底层越接近硬件，越往上越接近软件，这七层模型分别是物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。 4层是指传输层的 tcp / udp 。 7层是指应用层，通常是http 。 2.代理原理： 4层用的是NAT技术。NAT英文全称是“Network Address Translation”，中文意思是“网络地址转换”，请求进来的时候，nginx修改数据包里面的目标和源IP和端口，然后把数据包发向目标服务器，服务器处理完成后，nginx再做一次修改，返回给请求的客户端。 7层代理：需要读取并解析http请求内容，然后根据具体内容(url,参数，cookie,请求头)然后转发到相应的服务器，转发的过程是：建立和目标机器的连接，然后转发请求，收到响应数据在转发给请求客户端。 3.优缺点对比： 性能： 理论上4层要比7层快，因为7层代理需要解析数据包的具体内容，需要消耗额外的cpu。但nginx具体强大的网络并发处理能力， 对于一些慢连接，nginx可以先将网络请求数据缓冲完了一次性转发给上游server,这样对于上游网络并发处理能力弱的服务器(比如tomcat)，这样对tomcat来说就是慢连接变成快连接(nginx到tomcat基本上都是可靠内网),从而节省网络数据缓冲时间，提供并发性能。 灵活性： 由于4层代理用的是NAT，所以nginx不知道请求的具体内容，所以nginx啥也干不了。 用7层代理，可以根据请求内容(url,参数，cookie,请求头)做很多事情，比如： a:动态代理：不同的url转发到不同服务器。 b.风控：屏蔽外网IP请求某些敏感url；根据参数屏蔽某些刷单用户。 c.审计：在nginx层记录请求日志。 …. 4.结论： 由于现在机器cpu性能都很好，4层代理并没有明显的性能优势，而7层代理在业务层面优势明显，所以一般直接选择7层代理就OK了。","categories":[],"tags":[],"author":"张存"},{"title":"nginx四层、七层负载均衡配置示例","slug":"nginx四层、七层负载均衡配置示例","date":"2021-11-04T03:21:04.000Z","updated":"2021-11-04T03:24:43.475Z","comments":true,"path":"2021/11/04/nginx-si-ceng-qi-ceng-fu-zai-jun-heng-pei-zhi-shi-li/","link":"","permalink":"https://blog.zhangcun.store/2021/11/04/nginx-si-ceng-qi-ceng-fu-zai-jun-heng-pei-zhi-shi-li/","excerpt":"","text":"所谓四层就是基于IP+端口的负载均衡，通过虚拟IP+端口接收请求，然后再分配到真实的服务器；七层通过虚拟的URL或主机名接收请求，然后再分配到真实的服务器七层就是基于URL等应用层信息的负载均衡。 七层负载#定义 upstream phpserver &#123; server192.168.2.3; server192.168.2.4; &#125; upstream htmlserver &#123; server192.168.2.1; server192.168.2.2; &#125; #引用 location / &#123; root /usr/share/nginx/html; index index.html index.htm; if ($request_uri ~*\\.html$)&#123; proxy_pass http://htmlserver; &#125; if ($request_uri~* \\.php$)&#123; proxy_pass http://phpserver; &#125; }四层负载 stream &#123; log_format proxy &#39;$remote_addr $remote_port - [$time_local] $status $protocol &#39; &#39;&quot;$upstream_addr&quot; &quot;$upstream_bytes_sent&quot; &quot;$upstream_connect_time&quot;&#39; ; access_log /var/log/nginx/proxy.log proxy; upstream lb &#123; server 172.16.1.5:80 weight=5 max_fails=3 fail_timeout=30s; server 172.16.1.6:80 weight=5 max_fails=3 fail_timeout=30s; &#125; server &#123; listen 80; proxy_connect_timeout 3s; proxy_timeout 3s; proxy_pass lb; &#125; &#125;","categories":[],"tags":[],"author":"张存"},{"title":"Ubuntu20.04开机运行自定义脚本","slug":"Ubuntu20-04开机运行自定义脚本","date":"2021-11-04T03:08:10.000Z","updated":"2021-11-04T03:11:13.839Z","comments":true,"path":"2021/11/04/ubuntu20-04-kai-ji-yun-xing-zi-ding-yi-jiao-ben/","link":"","permalink":"https://blog.zhangcun.store/2021/11/04/ubuntu20-04-kai-ji-yun-xing-zi-ding-yi-jiao-ben/","excerpt":"","text":"1.简介基于 Debian 的 Linux 系统默认支持 rc-local.service 服务，这个服务主要用来在系统启动时运行用户自定义的脚本命令等。 2.配置要想使用 rc-local.service 服务在系统启动时运行用户自定义的脚本命令，首先需要在 /etc 目录下创建 rc.local 文件（若已创建则跳过创建）并修改可执行权限，然后设置该服务开机自启： sudo touch /etc/rc.localsudo chmod 755 /etc/rc.localsudo systemctl start rc-local.servicesudo systemctl enable rc-local.service3.添加开机自启脚本打开 /etc/rc.local 文件，往其中添加运行自定义脚本的命令即可。添加下列内容： #!/bin/sh echo &quot;看到这行字，说明添加自启动脚本成功。&quot; &gt; /usr/local/test.log #中间这一段就是脚本的内容，例如：sudo ssr start exit 0 【注】/etc/rc.local 以及自定义脚本中都不能使用系统变量（比如 $HOME，原因在于其执行自定义脚本时并没有继承系统变量）。 4.查看脚本执行结果 systemctl status rc-local.service","categories":[],"tags":[],"author":"张存"},{"title":"从ifconfig输出中提取MAC地址","slug":"从ifconfig输出中提取MAC地址","date":"2021-11-03T08:55:23.000Z","updated":"2021-11-03T08:56:27.855Z","comments":true,"path":"2021/11/03/cong-ifconfig-shu-chu-zhong-ti-qu-mac-di-zhi/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/cong-ifconfig-shu-chu-zhong-ti-qu-mac-di-zhi/","excerpt":"","text":"环境 Ubuntu 20.04 ifconfig eth0 | grep -o -E ‘([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}’ -o将导致grep只打印与表达式匹配的行部分。[[:xdigit:]]{1,2}将匹配1或2个十六进制数字(Solaris不输出前导零)。","categories":[],"tags":[],"author":"张存"},{"title":"linux命令行显示主机名和当前目录","slug":"linux命令行显示主机名和当前目录","date":"2021-11-03T07:11:15.000Z","updated":"2021-11-03T07:12:46.822Z","comments":true,"path":"2021/11/03/linux-ming-ling-xing-xian-shi-zhu-ji-ming-he-dang-qian-mu-lu/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/linux-ming-ling-xing-xian-shi-zhu-ji-ming-he-dang-qian-mu-lu/","excerpt":"","text":"在开发中linux server中，如果登录后命令行一直显示（在已经有权限登录的情况下）：bash-3.2$ 如何让其显示主机名和文件路径（并根据不同的颜色显示）： [cvadev@swcvaap3d:/home/cvadev] 我这里server登录方式为：pbrun cvadev。 所以默认路径为/home/cvadev查看改路径下的隐藏文件: ls -a 如果存在.bashrc文件，则直接进行修改，如果不存在就新建改文件。然后添加如下内容： alias ll=&#39;ls -l&#39; alias ls=&#39;ls&#39; alias tl=&#39;tail -500&#39; alias tff=&#39;tail -600f&#39; PS1=`echo &#39;[\\033[1;35m$LOGNAME\\033[0m&#39;&quot;@&quot;&#39;\\033[0;31m$HOSTNAME\\033[0m&#39;&#39;\\033[0;32m:$PWD\\033[0m]&#39;``echo &quot;\\n&gt; &quot;` set -o vi 前面四行为命令的别名，可以根据自己情况设置，也可以不用。后面两行即为修改linux命令行提示信息，颜色可以根据自己的喜好进行修改设置","categories":[],"tags":[],"author":"张存"},{"title":"以指定用户启动和进入docker容器","slug":"以指定用户启动和进入docker容器","date":"2021-11-03T06:26:00.000Z","updated":"2021-11-03T06:27:33.328Z","comments":true,"path":"2021/11/03/yi-zhi-ding-yong-hu-qi-dong-he-jin-ru-docker-rong-qi/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/yi-zhi-ding-yong-hu-qi-dong-he-jin-ru-docker-rong-qi/","excerpt":"","text":"第一次用run创建并启动容器，运行命令 docker run -it -u user_name –name container_name -d image_name /bin/bash 之后可以用exec进入容器，运行命令 docker exec -it -u user_name container_name /bin/bash 还可以指定主机名 –hostname user_hostname 指定网络 –network=user_network 指定ip –ip 172.18.0.3","categories":[],"tags":[],"author":"张存"},{"title":"linux安装库时报错error: command ‘x86_64-linux-gnu-gcc‘ failed with exit status 1","slug":"linux安装库时报错error-command-‘x86-64-linux-gnu-gcc‘-failed-with-exit-status-1","date":"2021-11-03T02:52:15.000Z","updated":"2021-11-03T02:53:36.181Z","comments":true,"path":"2021/11/03/linux-an-zhuang-ku-shi-bao-cuo-error-command-x86-64-linux-gnu-gcc-failed-with-exit-status-1/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/linux-an-zhuang-ku-shi-bao-cuo-error-command-x86-64-linux-gnu-gcc-failed-with-exit-status-1/","excerpt":"","text":"在Ubuntu18.04上安装nameko时报错： error: command ‘x86_64-linux-gnu-gcc’ failed with exit status 1 解决办法： 安装依赖库 python2： sudo apt-get install build-essential python-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev python3： sudo apt-get install build-essential python3-dev libssl-dev libffi-dev libxml2 libxml2-dev libxslt1-dev zlib1g-dev 安装nameko时推荐使用python3，使用python2可能会有导包错误： 在使用nameko命令启动时报错：no module named zipp 解决办法： pip install zipp==1.2.0 安装nameko成功后所有安装库，不然可能会有no module named xxx之类的导入错误：","categories":[],"tags":[],"author":"张存"},{"title":"etcd 下载链接","slug":"etcd-下载链接","date":"2021-11-03T02:47:40.000Z","updated":"2021-11-03T02:47:41.425Z","comments":true,"path":"2021/11/03/etcd-xia-zai-lian-jie/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/etcd-xia-zai-lian-jie/","excerpt":"","text":"https://mirrors.huaweicloud.com/etcd/v3.3.20/","categories":[],"tags":[],"author":"张存"},{"title":"[tcp] WEB服务,Linux下的内核参数调优","slug":"[tcp] WEB服务,Linux下的内核参数调优","date":"2021-11-03T02:41:52.000Z","updated":"2021-11-03T02:45:23.989Z","comments":true,"path":"2021/11/03/tcp-web-fu-wu-linux-xia-de-nei-he-can-shu-diao-you/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/tcp-web-fu-wu-linux-xia-de-nei-he-can-shu-diao-you/","excerpt":"","text":"前言:web类应用一般会部署像nginx、tomcat、php等应用程序，使用默认的内核参数设置满足大部分场景，如果优化内核参数，也可以释放不少服务器性能，尤其是在高并发下 一.SYN状态的内核参数调优大量SYN_SENT这种是主动连接服务端，而未得到响应，也就是SYN超时，一般是服务端根本不存在或者无法访问如，我随便telnet一个位置的IP和端口 telnet 172.18.11.110:90[root@test bbs]# ss -an|grep SYNSYN-SENT 0 1 172.16.196.145:55052 172.18.11.110:90除了以上，还有种就是你的服务出现异常，比如mysql服务器宕机了，web服务去访问mysql数据库的时候就连不上，也会出现SYN_SENT状态，但无论哪种，都是主动发起连接导致的，因此业务上解决更好 net.ipv4.tcp_syn_retries = 2新建连接如果无响应，内核要发送多少次SYN连接才放弃，默认值为5 在Linux下，默认重试次数为5次，该值不能大于255，重试的间隔时间从1s开始每次都翻倍(因为隔一秒重试后还会等待响应，因此实际上是从3秒开始)，5次的重试时间间隔为3s, 7s, 15s, 31s, 63s，总共63s，TCP才会把断开这个连接。统计成公式2^(n+1) - 1，因此设置越大，翻倍越多，对应内网环境，这个值修改为2比较合适 大量SYN_RECV大量的SYN出现有两种情况，可能是攻击，也可能是正常的业务请求，无论哪种，都大量的占用了服务器资源 net.ipv4.tcp_synack_retries = 2跟参数net.ipv4.tcp_syn_retries一样，只是这个内核参数是控制回应SYN失败的重试次数，默认值也是5，和上面一样修改为2 其他内核参数调整net.ipv4.tcp_syncookies = 1开启SYN cookies，当出现SYN等待队列溢出时，启动cookies来处理 什么是SYN cookies?我们知道SYN攻击是一系列伪造IP源地址的SYN包，IP地址是随意选择且不提供攻击者任何的线索，SYN攻击持续直到服务的SYN队列被用满。如果启用该参数，此时SYN cookies会将TCP请求的SYN缓存起来，当服务器正常的时候，再处理，但是如果攻击并发很高很大，其实用处不大，因此只能少量防范 net.ipv4.tcp_max_syn_backlog = 65535指定所能接受SYN同步包的最大客户端数量，即半连接上限，默认值为128，对于web服务，频繁大量的SYN同步包，应该放大这个值 注:这个值应该&gt;=net.core.somaxconn，net.core.somaxconn后面会提到 二.FIN_WAIT_2状态的内核参数调优FIN_WAIT_2是主动关闭端等待对端关闭连接的状态，如果被动关闭不发送FIN关闭连接，那么这个状态就会一直存在，当然Linux有针对该状态的超时时间，默认为60秒 net.ipv4.tcp_fin_timeout = 10 三.TIME_WAIT状态的内核参数调优TIME_WAIT是主动关闭端的状态，也称为2MSL等待状态，也就是2倍的MSL时间。在RFC 793[Postel 1981c]指出MSL为2分钟，然而现实中的常用值是30秒，1分钟或者2分钟(Linux设置为30秒)，Linux也没有提供能够修改TIME_WAIT状态时间的接口，除非重新编译系统内核 MSL的理解MSL是英文Maximum Segment Lifetime的缩写，翻译为”最长报文段寿命”，每个具体TCP实现必须选择一个报文段最大生存时间(Maximum Segment Lifetime)，而这个最大生存时间是任何报文段被丢弃前在网络内的最长时间 MSL的时间是有限的，因为TCP报文段以IP数据报在网络内传输，而IP数据报则有限制其生存时间的TTL(time to live)字段，TTL可译为生存时间，IP数据报每经过一个路由器，它的值就减1，当这个值为0时，数据报则被丢弃 为什么等待2MSL1.确保有足够的时间让服务端收到ACK，如没有收到，则会响应对方新的FIN+ACK封包。比如主动关闭端(客户端)发送了最后一个ACK报文段给被动关闭端(服务端)，但这个ACK报文段有可能丢失，如果服务端没有收到这个ACK，那么处于LAST_ACK的服务端在超时后回重发FIN+ACK报文段，这样客户端就能在2MSL时间内收到这个重发的FIN+ACK报文段。如果客户端发送了最后的ACK报文不进入TIME_WAIT而是立即释放连接，那么就无法收到客户端重发的FIN+ACK报文段。因此等待2MSL是为了更安全的断开连接 2.有足够的时间让处于TIME_WAIT状态的连接不会跟后面的连接混在一起。比如一些延迟的包发过来，但是如果没有TIME_WAIT，那么就发到了新连接上，这样就混为一团，而如果是TIME_WAIT，则会丢弃这些延迟的包 等待2MSL的缺点TCP连接在2MSL等待期间，这个处于TIME_WAIT状态的连接(客户端的IP地址和端口编号，服务器的IP地址和端口号)不能再被使用，它只能在2MSL结束后才能再被使用，而这些TIME_WAIT状态占用大量服务资源，对于web服务来说是不合理的 修改内核参数防止因为2MSL导致TIME_WAIT过多对于web服务器，由于我们需要经常去连接mysql、redis或者一些RPC调用等，会有大量的主动关闭状态(TIME_WAIT)，因此可以修改内核参数限制TIME_WAIT的数量 net.ipv4.tcp_max_tw_buckets = 20000限制timewait 的数量，防止大量timewait导致系统负载升高，一旦达到限定值，则强制清理TIME_WAIT状态的连接并在打印系统日志(time wait bucket table overflow)，该参数官方文档说明主要用来对抗DDos攻击 net.ipv4.tcp_tw_recycle= 1启用timewait快速回收 net.ipv4.tcp_timestamps = 0时间戳，0关闭，1开启。不能和net.ipv4.tcp_tw_recycle参数同时开启，因为一旦开启net.ipv4.tcp_tw_recycle，服务器就会检查包的时间戳，如果对方发来的包的时间戳是乱跳或者说时间戳是滞后的，这样服务器就不会回复，服务器会把带了”倒退”的时间戳包当作是”recycle”的tw连接的重传数据，不是新的请求，于是丢掉不回包，就容易出现syn不响应 net.ipv4.tcp_tw_reuse = 1开启重用，允许将TIME-WAIT sockets 重新用于新的TCP 连接 TIME_WAIT总结其实TIME_WAIT是主动断开连接，所以如果让对方主动断开连接的话，那么这个TIME_WAIT问题就对方的了。所以如果这个问题出现过多，多从业务着手，比如HTTP服务，NGINX设置keepalive参数(浏览器会重用一个TCP连接来处理多个HTTP请求)，然后让客户端断开连接，当然这个要设置好keepalive_timeout的超时时间，因为有些浏览器可能不会主动断开连接 而如果是主动连接mysql、redis等后端调用，可以考虑使用长连接来避免TIME_WAIT过多的问题 四.长连接(keepalive)的内核参数调整Linux下，keepalive不是默认开启，也无内核参数控制，它需要在TCP的socket中单独开启，Linux内核影响keepalive的参数目的仅仅是探测TCP连接是否存活，然后处理异常连接 net.ipv4.tcp_keepalive_time = 120 单位秒，表示TCP连接在多少秒没有数据报文传输时启动探测报文，探测连接是否正常net.ipv4.tcp_keepalive_intvl = 5 单位秒，前后探测报文之间的时间间隔net.ipv4.tcp_keepalive_probes = 3 探测次数，超过设置后丢弃 五.TCP/UDP内存参数调整(1)TCP内存使用设置针对TCP socket buffernet.ipv4.tcp_mem = 94500000 915000000 927000000指定TCP内存的整体使用状况，单位为页。这3个值为TCP整体内存【低、压力、高】，在web服务中，放大这个值即可第一个值tcp_mem[0]：当TCP全局分配的页数低于此数时，TCP不调整其内存分配第二个值tcp_mem[1]：当TCP分配的内存量超过这个页数，进入内存压力模式，TCP调节内存消耗第三个值tcp_mem[2]：TCP全局使用的最大页数分配，这个会值覆盖任何其他限制，如超过，所有的新的TCP的buffer(缓冲区)内存分配都会失败 其实我们可以设置这个值较大，只要不限制系统分配内存，然后以监控来应对内存问题，一般来说，根据业务所选配置，很难将内存耗尽，否则优化的就不仅仅是这个参数了 net.ipv4.tcp_rmem = 4096 87380 6291456net.ipv4.tcp_wmem = 4096 16384 4194304上面两组参数表示单个TCP连接上的读写buffer(缓冲)内存上限，单位字节，这三个值分别为最小值、默认值(会覆盖rmem_default、wmem_default配置)、最大值 最小值:TCP socket的发送缓冲区(tcp_rmem)/接收缓冲区(tcp_wmem)的内存，默认1页(4K) 默认值:TCP socket使用的发送缓冲区(tcp_rmem)/接收缓冲区(tcp_wmem)初始大小，这个值会覆盖(net.core.wmem_default/net.core.rmem_default)，一般设置要低于(net.core.wmem_default/net.core.rmem_default)这个值，默认值为16K 最大值:TCP socket使用的发送缓冲区(tcp_rmem)/接收缓冲区(tcp_wmem)的最大大小，这个值不会覆盖(net.core.wmem_max/net.core.rmem_max)，默认为4M 这两个内核参数的设置主要是针对每一个TCP连接来说的，使用默认设置就差不多了，如果设置太大，单个TCP连接占用过多内存也是有问题的 什么是TCP读写buffer(缓冲)？实际上，TCP连接所用内存的多少是由读写buffer大小决定，对读buffer来讲，当收到对端连接的TCP报文时，会导致读buffer内存增加，如果这个报文加上当前读buffer内存超过tcp_rmem[3]上限，那么该报文将被丢弃。只有当调用read、recv这样的方法读取TCP流时，读buffer内存就会减少，因此读buffer内存是一个动态变化的，用多少就分配多少buffer，如果这个连接空闲时，而用户进程已经把连接上收到的数据都消费了，那么读buffer使用的内存就为0了 对于写buffer也是一样的，在socket编程中，当调用send或者write时，就会造成写buffer增大，那么什么时候减少？就是当接收到对端TCP连接发来的ACK确认了报文成功发送时，写buffer就会减少，类似于我给你发一个文件，我先拷贝出来发给你，我确认你收到了，我就把这个源文件删除，以免占用空间，如果确认没收到，那么我会重发 所以读写buffer是一直不停变化的，那么怎样的场景会导致读写buffer达到上限呢？就读buffer而言，比如接收TCP对端报文，对端发了很多很多报文，我读取后无法及时读取(read和recv)，导致读buffer堆积越来越多，最终达到上限，最后丢弃报文，写buffer也一样，send或者write大量的报文时，如果TCP对端不能及时read和recv就会导致写buffer堆积。 针对系统的读写buffer参数调整net.core.rmem_default = 4194304 默认读buffer大小，单位字节net.core.wmem_default = 4194304 默认写buffer大小，单位字节net.core.rmem_max = 4194304 最大读buffer大小，单位字节net.core.wmem_max = 4194304 最大写buffer大小，单位字节看到其定义，是不是觉得跟net.ipv4.tcp_mem、net.ipv4.tcp_rmem、net.ipv4.tcp_wmem含义很重合呢？ 其实(net.ipv4.tcp_mem、net.ipv4.tcp_rmem、net.ipv4.tcp_wmem)这几个参数只控制TCP socket的内存大小，而且如果遇到TCP socket申请内存，(net.core.rmem_default、net.core.wmem_default)会被(net.ipv4.tcp_rmem、net.ipv4.tcp_wmem)覆盖 所以(net.core.rmem_default、net.core.wmem_default、net.core.rmem_max、net.core.wmem_max)控制系统所有协议的读写buffer大小 (2)UDP协议内存使用设置net.ipv4.udp_mem = 752832 1003776 1505664net.ipv4.udp_rmem_min = 4096net.ipv4.udp_wmem_min = 4096这几个参数针对UDP协议，则跟上面TCP的含义一致 六.其他内核参数net.ipv4.ip_local_port_range = 1024 65000表示用于向外连接的临时端口范围。缺省情况下很小：32768到61000，因为主动连接需要用到很多临时端口(如连接mysql、redis)，而临时端口最大值为(2^16-1)65535，1000之前一般为系统保留端口，所以建议设置为1024到65000的较大范围 net.core.somaxconn = 65535net.core.somaxconn表示socket监听(listen)的backlog上限，backlog是socket的监听队列，也就是服务端所能accept(socket编程中accpet()函数为建立TCP连接接受连接状态)即处理数据的最大客户端数量队列，默认值为128，如果队列满了的时候新来一条建立连接，该连接会被拒绝 该值应当小于等于net.ipv4.tcp_max_syn_backlog，因为net.ipv4.tcp_max_syn_backlog参数控制的SYN队列客户端的数量，还在建立连接之前，因此设置为65535一样比较合适 fs.file-max = 6553600设置系统所有进程一共可以打开多少个文件句柄，这是一个系统级的设置，管控的是所有进程总共可以同时打开多少文件句柄，如果多个进程打开了较多文件就会导致文件句柄不足，因此设置较大值，不过要注意程序打开的文件越多，就占用更多的内存，因此要根据业务和服务器配置起来设置 如果想单独对某个进程设置可以打开多少文件句柄，那么可以使用ulimit -n命令设置，但该命令只对当前session生效，默认值为1024ulimit -n 655350 也可以写入文件永久生效，对每个进程的打开文件数量限制vim /etc/security/limits.conf soft nofile 655350 hard nofile 655350 总结现在多数线上业务，服务器很少暴露在外网了，前端一般有负载均衡、防火墙等代理。甚至服务器已经变成VPC(虚拟内网)环境，将这些服务器隔离在外网环境之外，这样就减少了像DDOS等攻击，这些攻击一般都让外部代理承受了。 对于服务器的一些内核性能参数范围，如果网络环境及架构设计好，一些范围参数可以设置的偏大，性能偏极限一些，这样能最大释放服务器的性能，其他的就用系统默认的参数配置即可。对于WEB服务的优化，是多方面的，内核参数仅仅是释放了服务器本该有的性能，而更高的承载能力，需要从服务器配置、网络、架构、数据库及缓存和实际业务应用等多方面着手，不同的调整满足不同的需求","categories":[],"tags":[],"author":"张存"},{"title":"如何进入docker 使用root用户的方式","slug":"如何进入docker-使用root用户的方式","date":"2021-11-03T02:34:06.000Z","updated":"2021-11-03T02:34:08.824Z","comments":true,"path":"2021/11/03/ru-he-jin-ru-docker-shi-yong-root-yong-hu-de-fang-shi/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/ru-he-jin-ru-docker-shi-yong-root-yong-hu-de-fang-shi/","excerpt":"","text":"docker exec -it –user root /bin/bash","categories":[],"tags":[],"author":"张存"},{"title":"dockerfile文件中给debian设置中文支持","slug":"dockerfile文件中给debian设置中文支持","date":"2021-11-03T02:30:23.000Z","updated":"2021-11-03T02:30:30.230Z","comments":true,"path":"2021/11/03/dockerfile-wen-jian-zhong-gei-debian-she-zhi-zhong-wen-zhi-chi/","link":"","permalink":"https://blog.zhangcun.store/2021/11/03/dockerfile-wen-jian-zhong-gei-debian-she-zhi-zhong-wen-zhi-chi/","excerpt":"","text":"#设置字体库RUN apt-get clean &amp;&amp; apt-get update RUN apt-get install -y locales RUN localedef -c -f UTF-8 -i zh_CN zh_CN.utf8 ENV LANG zh_CN.utf8","categories":[],"tags":[],"author":"张存"},{"title":"通过Dockerfile 文件为linux images 添加新用户","slug":"通过Dockerfile-文件为linux-images-添加新用户","date":"2021-11-02T09:49:41.000Z","updated":"2021-11-02T09:50:39.999Z","comments":true,"path":"2021/11/02/tong-guo-dockerfile-wen-jian-wei-linux-images-tian-jia-xin-yong-hu/","link":"","permalink":"https://blog.zhangcun.store/2021/11/02/tong-guo-dockerfile-wen-jian-wei-linux-images-tian-jia-xin-yong-hu/","excerpt":"","text":"要求：（１）增加一个新用户，名为mynewuser（２）让这个用户有root权限（３）设置其密码为mynewpassword（４）container启动后以mynewuser登录,并且直接到mynewuser的home目录下 将下面代码片段放到Dockerfile里面。 RUN useradd –create-home –no-log-init –shell /bin/bash mynewuserRUN adduser mynewuser sudoRUN echo ‘mynewuser:mynewpassword’ chpasswdUSER mynewuserWORKDIR /home/mynewuser","categories":[],"tags":[],"author":"张存"},{"title":"使用docker-compose搭建SkyWalking环境","slug":"使用docker-compose搭建SkyWalking环境","date":"2021-11-02T07:19:21.000Z","updated":"2021-11-02T07:39:04.207Z","comments":true,"path":"2021/11/02/shi-yong-docker-compose-da-jian-skywalking-huan-jing/","link":"","permalink":"https://blog.zhangcun.store/2021/11/02/shi-yong-docker-compose-da-jian-skywalking-huan-jing/","excerpt":"","text":"一、环境说明Linux Centos7ElasticSearch 7.13.1SkyWalking 8.0.1 二、环境搭建1.编写docker-compose.yml文件 version: &#39;3.3&#39; services: elasticsearch: #image: elasticsearch:7.8.0 image: elasticsearch:7.13.1 container_name: elasticsearch restart: always ports: - 9200:9200 environment: discovery.type: single-node TZ: Asia/Shanghai #volumes: # - ./elasticsearch/logs:/usr/share/elasticsearch/logs # - ./elasticsearch/data:/usr/share/elasticsearch/data # - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml ulimits: memlock: soft: -1 hard: -1 oap: image: apache/skywalking-oap-server:8.0.1-es7 container_name: oap depends_on: - elasticsearch links: - elasticsearch restart: always ports: - 11800:11800 - 12800:12800 environment: SW_STORAGE: elasticsearch7 # 指定ES版本 SW_STORAGE_ES_CLUSTER_NODES: elasticsearch:9200 TZ: Asia/Shanghai # volumes: # - ./config/alarm-settings.yml:/skywalking/config/alarm-settings.yml ui: image: apache/skywalking-ui:8.0.1 container_name: ui depends_on: - oap links: - oap restart: always ports: - 8083:8080 environment: SW_OAP_ADDRESS: oap:12800 TZ: Asia/Shanghai elastichd: image: containerize/elastichd:latest container_name: elasticsearch-hd restart: always #networks: #- net-es ports: - &quot;9800:9800&quot; depends_on: - &quot;elasticsearch&quot; links: - &quot;elasticsearch:demo&quot; elasticsearch-head: image: mobz/elasticsearch-head:5 container_name: elasticsearch-head ports: - &quot;9100:9100&quot; networks: net-es: external: false 三.启动docker启动容器：docker-compose up -d 查看容器：docker-compose ps 删除容器：docker-compose rm 四.验证浏览器中输入：http://localhost:8080","categories":[],"tags":[],"author":"张存"},{"title":"Linux/CentOS设置全局代理（http）","slug":"Linux-CentOS设置全局代理（http）","date":"2021-11-02T02:24:00.000Z","updated":"2021-11-02T02:24:55.920Z","comments":true,"path":"2021/11/02/linux-centos-she-zhi-quan-ju-dai-li-http/","link":"","permalink":"https://blog.zhangcun.store/2021/11/02/linux-centos-she-zhi-quan-ju-dai-li-http/","excerpt":"","text":"说明：为什么说是http代理，其实这个还不能说是全称走代理，罪名写的区别就是ICMP协议这个设置就无效，只能说是90%的应用都可以使用这个设置来实现代理访问，只有个别不行，比如一些软件根本不走http协议的，那么此种方法绝对不行；下面是讲解http的代理配置，以后会讲解全局级别的代理实现，其实也就是网关，配置网关绝对能100%，这里不做讲解。全局代理配置主要在于环境变量的设置。 还有网上很多都说http配置代理不支持socks协议，其实是不对的。我测试的结果已经支持了。 个人理解：我谈一下这个http_proxy的设置，首先，设置了这个变量不是说只会走http协议，上面我说的应该是普通认为会这样说的说法，我后面觉得上面已经是错误了，比如curl，git这些软件默认使用http_proxy这个环境变量来设置代理服务器，所以在linux下只要设置了这个环境变量就能被这些软件识别，而对于代理服务器用什么协议都行，比如使用http协议或者socks协议等。 那么对于一些比如chrome和yum这些针对http_proxy可能不会生效，比如chrome用的是server_proxy这个变量，而且是在启动时设置才生效。 下面是代理变量的配置： 环境变量 描述 值示例http_proxy 为http变量设置代理；默认不填开头以http协议传输 10.0.0.51:8080user:&#112;&#x61;&#x73;&#115;&#64;&#49;&#x30;&#x2e;&#x30;&#x2e;&#x30;&#46;&#49;&#x30;:8080socks4://10.0.0.51:1080socks5://192.168.1.1:1080https_proxy 为https变量设置代理； 同上ftp_proxy 为ftp变量设置代理； 同上all_proxy 全部变量设置代理，设置了这个时候上面的不用设置 同上no_proxy 无需代理的主机或域名；可以使用通配符；多个时使用“,”号分隔； .aiezu.com,10...,192.168..,*.local,localhost,127.0.0.1针对上面变量的设置方法： 1、在/etc/profile文件 2、在~/.bashrc 3、在~/.zshrc 4、在/etc/profile.d/文件夹下新建一个文件xxx.sh 写入如下配置： export proxy=”http://192.168.5.14:8118&quot;export http_proxy=$proxyexport https_proxy=$proxyexport ftp_proxy=$proxyexport no_proxy=”localhost, 127.0.0.1, ::1”而对于要取消设置可以使用如下命令，其实也就是取消环境变量的设置： unset http_proxyunset https_proxyunset ftp_proxyunset no_proxy针对yum配置走代理： 经过测试其实只要设置上面的变量之后已经可以走代理了，但如果要单独设置，可以设置如下文件的变量： echo “proxy=http://127.0.0.1:8080/&quot; &gt;&gt; /etc/yum.conf","categories":[],"tags":[],"author":"张存"},{"title":"docker 安装ElasticSearch head","slug":"docker-安装ElasticSearch-head","date":"2021-11-01T10:43:34.000Z","updated":"2021-11-01T10:43:58.934Z","comments":true,"path":"2021/11/01/docker-an-zhuang-elasticsearch-head/","link":"","permalink":"https://blog.zhangcun.store/2021/11/01/docker-an-zhuang-elasticsearch-head/","excerpt":"","text":"github官网地址 https://github.com/mobz/elasticsearch-head 拉取镜像 docker pull mobz/elasticsearch-head:5创建容器 docker create –name elasticsearch-head -p 9100:9100 mobz/elasticsearch-head:5启动容器 docker start elasticsearch-head浏览器打开: http://IP:9100 尝试连接elaseticsearch会发现无法连接上，由于是前后端分离开发，所以会存在跨域问题，需要在服务端做CORS的配置，如下 修改docker中elasticsearch的elasticsearch.yml文件 docker exec -it elasticsearch /bin/bashvi config/elasticsearch.yml在最下面添加2行 http.cors.enabled: truehttp.cors.allow-origin: “*” 退出并重启服务 exitdocker restart elasticsearch 测试连接","categories":[],"tags":[],"author":"张存"},{"title":"elasticsearch 7.13.1在线安装ik分词，亲测有效","slug":"elasticsearch-7-13-1在线安装ik分词，亲测有效","date":"2021-11-01T10:29:48.000Z","updated":"2021-11-02T03:37:34.673Z","comments":true,"path":"2021/11/01/elasticsearch-7-13-1-zai-xian-an-zhuang-ik-fen-ci-qin-ce-you-xiao/","link":"","permalink":"https://blog.zhangcun.store/2021/11/01/elasticsearch-7-13-1-zai-xian-an-zhuang-ik-fen-ci-qin-ce-you-xiao/","excerpt":"","text":"进入容器 docker exec -it elasticsearch /bin/bash 执行安装命令 bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.13.1/elasticsearch-analysis-ik-7.13.1.zip验证bin/elasticsearch-plugin list 容器重启docker restart elasticsearchik分词器链接地址😊✔https://github.com/medcl/elasticsearch-analysis-ik/tags 持久化docker commit xxxxxxxx es/ik","categories":[],"tags":[],"author":"张存"},{"title":"删除^M","slug":"删除-M","date":"2021-11-01T07:52:27.000Z","updated":"2021-11-01T07:52:50.324Z","comments":true,"path":"2021/11/01/shan-chu-m/","link":"","permalink":"https://blog.zhangcun.store/2021/11/01/shan-chu-m/","excerpt":"","text":"linux下vim编辑文件出现^M是因为不同平台对于回车符的定义差异造成的：windows：0D0A ‘/r/n’unix\\linux: 0A ‘/n’MAC: 0D ‘/r’ 当linux的文件在windows下编辑过，就容易出现^M符号，就是因为多了’/r’解决办法：1、dos2unix fileName 这个最简单，但是有些系统没有安装dosunix工具 2、sed -i ‘s/\\r//g’ fileName 这个非常好使","categories":[],"tags":[],"author":"张存"},{"title":"Centos7 Apache站点 强制https访问","slug":"Centos7-Apache站点-强制https访问","date":"2021-11-01T06:02:49.000Z","updated":"2021-11-01T06:08:04.313Z","comments":true,"path":"2021/11/01/centos7-apache-zhan-dian-qiang-zhi-https-fang-wen/","link":"","permalink":"https://blog.zhangcun.store/2021/11/01/centos7-apache-zhan-dian-qiang-zhi-https-fang-wen/","excerpt":"","text":"Apache版本2.4 安装mod_ssl yum install mod_ssl -y apache配置/etc/httpd/conf.d/ssl.conf我把这下面的内容复制到另外一个文件中配置的 &lt;VirtualHost _default_:443&gt; ..... &lt;/VirtualHost&gt;需要修改的几项 DocumentRoot “/var/www/example.com/public_html” ServerName www.example.com:443 SSLCertificateFile /etc/httpd/ssl/apache.crtSSLCertificateKeyFile /etc/httpd/ssl/apache.key重启apache systemctl restart httpd.service 实现强制HTTPS访问 vim /etc/httpd/conf/httpd.conf 添加如下内容: RewriteEngine OnRewriteRule ^(.*)$ https://%{HTTP_HOST}$1 [R,L] 重启apache systemctl restart httpd.service","categories":[],"tags":[],"author":"张存"},{"title":"招行每日答题赢积分【题库】","slug":"招行每日答题赢积分【题库】","date":"2021-11-01T03:59:54.000Z","updated":"2021-11-01T04:03:31.956Z","comments":true,"path":"2021/11/01/zhao-xing-mei-ri-da-ti-ying-ji-fen-ti-ku/","link":"","permalink":"https://blog.zhangcun.store/2021/11/01/zhao-xing-mei-ri-da-ti-ying-ji-fen-ti-ku/","excerpt":"","text":"招行APP每日答题活动，答题不限时，有的说难，索性收集了一些题目，给广大飞友参考，不定期更新。若答案有疑问，请回复告知，欢迎大家分享题目~回复采纳，花花送上每天答对5题可得10积分，每周六日另有瓜分场次。【活动路径】招行APP–我的–积分–答题赢积分有的题目描述容易【混淆】，请看清楚再作答。 Q1：外国人查询到的信用报告为本国语言A：错误Q2：什么理论可以用来描述”小钱也有大用处”A：拿铁理论Q3：良性负债有利于财富的增长，能带来积极的回报，因此应该合理加以利用A：正确Q4：处于同一生命周期的个人，风险承受能力不同，其投资组合各大类资产配置比例也是不同的A：正确Q5：当您的固定额度不能满足消费需求时，可以向我行申请临时额度，关于临时额度，下列说法正确的一项是A：申请和使用不会收取手续费用Q6：使用招行信用卡在电商平台进行支付的时候，都是使用查询密码A：错误Q7：股票应该做集中投资才能赚大钱A：错误Q8：下列哪项不属于信用信息的来源A：居委会走访调查Q9：以下哪个是资产配置实际运用的有效案例A：耶鲁大学捐赠基金Q10：填写贷款/信用卡申请表时，为保护隐私，关键信息可以不填A：错误Q11：任何人、任何机构与任何组织无权知道您的银行卡取款密码、支付密码或短信验证码，您可拒绝任何企图索取您银行卡密码的要求A：正确Q12：您收到一条抽奖链接，中奖后需要您输入个人信息、卡片信息及密码，这种情况属于网络诈骗A：正确Q13：银行理财产品，是由商业银行自行设计并发行的产品，将募集到的资金投入金融市场，获取投资收益后，根据合同约定分配给投资人的一类理财产品，一般具有收益高且流动性也高的特色A：错误Q14：教育金规划需要：提前安排、专款专用、定期投入、安全第一A：正确Q15：我的常住地在上海并且在上海工作时申请了一张招行信用卡，如去往浙江，是需要区分”本地”和”异地”的,因为异地刷卡消费或网上支付，都会有手续费用A：错误Q16：资产配置就是做好资产的’荤素搭配’，家庭紧急预备金可以放在流动性强的资产中，教育金和养老金提前筹划，适当参与资本市场战胜通胀A：正确Q17：小鱼上网聊QQ,这时有人发来一条信息’轻松兼职,每天工作2小时,日入300元’，经了解对方说每单给5元钱手续费,会同购买商品钱一同打回到小鱼卡上。小鱼应该A：不信,是骗子Q18：为了保障网上购物的用卡安全，以下哪项措施可能存在风险隐患A：使用生日作为密码Q19：国家最权威的征信机构是?A：中国人民银行征信中心Q20：影响市场大盘走势的最基本因素A：宏观经济与政策Q21：掌握好负债比例至关重要，当资产的负债率低于3/4、负债比例低于收入的1/2时，家庭的财务是比较安全的。A：错误Q22：根据美国退休金十年期长期绩效的实证调查，91.5%投资报酬来源于A：资产分配Q23：当我们接触到一个新客户时，客户提交的基础材料应该与个人信息交叉验证A：正确Q24：对于大部分国内退休人群，其主要，也最稳定的收入来源是A：政府退休金收入Q25：资产配置中，权益类资产的作用是A：获取高收益Q26：初入社会小资族，工资薪水较低，已积累一定资金，理财收入为主，工资性收入为辅A：错误Q27：以下哪一项不属于现金流入A：购房买车Q28：银行信用卡能提供一定期限的免息时间，可以利用，如果用银行免息期需要有计划、不怕麻烦、执行力强，珍惜征信记录A：正确Q29：小明的招行信用卡是25号的账单日，那么他收到的5月账单中，一般不会包含下列哪一笔交易A：5月26号ATM取现Q30：被法院列入失信被执行人黑名单属于不良信息A：正确Q31：资产配置中，固收类资产的作用是A：构建组合安全垫Q32：本人信用卡可以借给自己的亲朋好友使用A：错误Q33：发现信用报告有错，申请异议时，应当携带本人有效身份证件。A：正确Q34：中国经济未来虽不能保持高速增长，但依然能够维持一定增速，因此仍能保证金融产品的刚性兑付A：错误Q35：在我国，存款产品最突出的特点是A：安全性Q36：按照七二法则，如果10年后要买房，需要手头上的资金翻倍，投资平均年化收益6%的产品则可实现翻倍。A：错误Q37：如果现在要给小孩规划教育金，但是目前的资金有缺口，以下哪些方面调整不可以帮助教育金的规划目标实现A：买彩票Q38：“征信”一词来仅指个人信用调查A：错误Q39：信用报告只有网上查询和现场查询两种途径A：错误Q40：阿基米德曾说’如果给我一个支点我能撬起地球’，所以说金融杠杆越高越好。A：错误Q41：下列哪项属于信用报告中最核心的信息A：信贷信息Q42：贝壳研究院报告显示，2018年首次置业购房者贷款成交占比90%，对贷款的依赖性更强A：正确Q43：房租收入大于房贷额度的负债属于资产性良性负债A：正确Q44：维护良好的信用记录应当认真履约，量入为出A：正确Q45：小赵收到一条短信，说他的手机号被快乐大本营节目组抽中，获得苹果笔记本电脑一台，需给栏目组汇1000元手续费及税款，小李没有理会，直接删除短信A：正确Q46：按七二法则，100万的本金，平均年化收益率为8%，多少年100万的本金能变成200万A：9年Q47：客户可以向法院申请强制执行金融机构修改数据A：正确Q48：一般来说股票PE在21-28之间说明可能被A：高估Q49：根据招行与尼尔森调研公司合作的《中产阶级白皮书》，中产阶级的子女教育水平超出总体平均水平多少A：41万元Q50：小东是某高校在校生，考英语四级前夕收到一条购买考试答案的信息，称一套答案1000元，小东马上联系了对方，并汇款1000元。A：错误Q51：只要客户有需要，征信中心都要免费为客户查询征信报告A：错误Q52:对于初入社会小资族，医疗险和意外险建议配置门槛为3%A:错误Q53:80年-17年，黄金拿过3年当年收益最佳冠军A:错误Q54:发现数据错误，在改/删之前，本人不能给错的信息加标注说明情况A:错误 (265楼Challenge)Q55:统计招商银行管理4万亿中高端客户资产结构，我们发现储蓄存款和单一理财产品占比达到76.7%，这种形态的资产配置，过去10年扣除通胀后的年化收益率仅为1.94A:正确Q56:给出入社会小资族配置建议中，短期理财的建议门槛是A:20%Q57:如果现在大学四年的总开销为150万，每年的学费涨幅为5%，20年大学四年的总开销为多少？A:398Q58:合理的房价收入比的取值范围为__倍，若高于这一范围，则认为其房价偏高A:4-6Q59:在线回答私密问题时，没有时间限制A:错误Q60:国内市场首批向公众发行的公募基金是封闭式基金吗A:正确Q61:2018年购房者人均居住面积为27.8平，其中24.3%的购房者人均居住面积不到20平方米，相当于三口之家住房不到60平方米A:正确Q62:根据招行与尼尔森调研公司合作的《中产阶级白皮书》显示，高资产量的中产阶级平均为子女规划153万元教育准备金，为中资产量与低资产量人群比例的两倍以上。A:正确Q63:所有银行都接受数字证书和银行卡进行身份验证。A:错误Q64:初入社会小资族来说，承担家庭责任较少，有更长的时间来弥补风险损失，因此承担风险承受能力较强A:正确 （感谢@Fatiger 更正）Q65:小久妹刚刚毕业参加工作，目前是“月光族”，对于小久妹来说，目前理财最重要的是下列哪项？A:存钱Q66:每张招行信用卡（外币单标卡除外）都可以设置是否需要在刷卡时验证交易密码，如设为需验证密码，称作开通“刷卡验密功能”，持卡人可以依据个人使用习惯，选择在刷卡时是否验证密码。答案：正确Q67:客户信用有变，应当立即通知银行。答案：正确Q68:企业如果破产，资产变卖后在全面偿还优先股股东后才由普通股股东分享答案：正确Q69:相较于股票，债券收益率波动较小，但收益向上空间较为有限。答案：正确Q70:下面哪项属于长期规划目标?A:子女教育Q71:哪一项风险可以自留A:蚊虫叮咬Q72:网上查询信用报告时，如果已经通过了身份验证，还是可以重新注册A:错误Q73:马克维兹理论中，多少百分比的报酬来源于理想的资产配置？A:91.5%Q74:针对每年保费支出，通常建议大概占比年收入的20%A:正确Q75:如果某先生小孩出国留学需要530万，当前家庭总资产130万，如果按他目前理财的平均年化收益4%来算，10年后总资产约能够增值到180万，可是距离儿子出国留学的总费用仍然有350万左右的差距，所以他的儿子无法出国留学了。A:错误Q76:怎样才是好的现金流管理？A:收入-存下=支出Q77:每月发薪日的第二天适合小白客户定投，答案是正确还是错误？A:正确Q78:下列哪项不属于“创富”守则？(易和Q143混淆)A:改变用钱观念Q79:下列哪项属于征信机构的特征A:不从事放贷业务Q80:恐惧是应激反应，是保护自己，但是不合理的恐惧需要科学的克服A:正确Q81：如果您认为征信报告有错误，提出异议，对异议处理结果不满意，只能选择诉讼解决A：错误Q82：早晨李阿姨的儿子上班后，李阿姨接到一个外地座机电话打来，对方操着外地口音说她儿子出了车祸正在X医院抢救，需给医院账户汇5000元抢救费，李阿姨正确的做法是A：联系儿子核实Q83：征信基础产品是什么A：信用报告Q84：首次申请招行信用卡，可以不提供身份证明，使用财力资料替代也是可以的。A：错误Q85：对于已经退休的投资者来说，考虑的主要是养老以及财富传承的问题，通过终身寿险的指定分配功能起到定向传承作用，避免家庭纠纷，并搭配年金保险稳定增值特性获得养老补充，是较为合理的。A：正确Q86：针对现金类资产，我们通常建议至少留足()的生活支出。A：6个月Q87：债券相比于股票，波动性更大A：错误Q88：接到快递员电话，要求提供手机动态验证码进行身份确认，这种情况属于不正常。A：正确Q89：存钱的开始步骤是A：记账Q90：以下哪个不是金融杠杆A：全款买车Q91：某同学一日收到一号码尾号为95555的手机短信，提醒自己网银到期，请点击附加网站进行更新，他便按照提示进行操作，这样的做法对不对？A：错误Q92：国务院在（）印发了《关于进一步深化城镇住房制度改革加快住房建设的通知》A：1998年Q93：财务规划目标分为长期目标和短期目标A：正确Q94：张小姐加入一个海外代购的群，张小姐让群主代为购买价值4万元的皮包一个，但是在汇款后却迟迟没有收到货物，群主也将张小姐踢出了微信群，此时张小姐应该如何做？A：立刻报警Q95：4008205555是招商银行信用卡的客户服务热线号码。A：正确Q96：租房住容易出现各种不良经历，从而在满足个人居住需要的质量上要低于自有住房，这是抬高个人购房意愿的主要原因之一A：正确Q97：黄金VS股票， 两者常常呈现正向关系，主要原因是黄金具有避险属性，股票的下跌激发黄金的避险需求，带动金价上涨。两者搭配，可对冲股票系统性风险。A：错误Q98：教育金的规划不仅要看当前的学费水平，还要考虑学费的增长率；不仅要关注当前的生活费水平，还要考虑通过膨胀率。A：正确Q99：过去十年，常见的投资工具没有一类收益率能年年冠军，即使是冠军次数最多的黄金，也曾在2013年大跌接近多少？A：30%Q100：意外保障型保险主要功能是为了获取高额的分红收益。A：错误Q101：每月还贷占月收入比例超过（），就会陷家庭于飘摇境地A：50%Q102：放贷机构查询、报送客户的信用信息可以不经过客户同意A：错误Q103：子女教育费用需要考虑的问题不包含A：子女婚假金Q104：耶鲁大学通过资产配置的方式管理其名下的捐赠基金，过去30年年化收益高达A：13%Q105：资产配置之前需要综合考虑流动性、收益性、风险性之间的关联A：正确Q106：使用招行信用卡支付后退货，如果退款已经处理完成并入账，则一定可以冲抵本期应还账单。A：错误Q107：不超过自身风险承受能力，不投资不懂的产品，不过度借钱投资，不盲从跟风投资，能够有效的避免投资风险。A：正确 （271楼肉测正确，249楼Challenge，仅供参考）Q108:下列哪项关于理财工具的说法不正确A：现金类就像船的风帆Q109：发现错误数据，在改/删之前，征信中心会给错的信息加标注说明情况。A：正确Q110：贪婪是不对的，所以我们要完全避免贪婪A：错误Q111：《征信业管理条例》规定只要违约就算不良，哪怕只有一天A：正确Q112:征信中心从第三次查询时开始收取费用，一次费用为多少钱？A：10元（已经更正）Q113：发现信用报告有错，必须本人亲自申请异议A：错误Q114：如果您要在公共场合下查看银行卡账户（如图书馆或咖啡厅），请注意安全并建议在结束查看后在安全的网络环境下更改密码。A：正确Q115：信用报告，是征信机构提供的关于企业或个人信用记录的文件。A：正确Q116:对以小久妹为代表的初入社会小资族，建议留存–时间生活费作为备用金？A：3-6个月Q117:自身或亲友遭遇了诈骗，欠款已汇出，应与多长时间内报案追回被骗钱财几率更大？A：24小时Q118:如果法院判决要求报送数据的金融机构修改数据，金融机构可以不履行判决。A：错误Q119:以下不属于定期型存款的是？A：智能通知存款Q120:根据贝恩咨询的《中国私人财富报告》，国内企业家们的哪一项收入近年来呈现下降趋势？A：企业经营收入Q121:以下哪项不是纪律投资的表现？A：按时定投Q122:教育金规划不需要考虑日常生活开支，要把所有的费用全部考虑规则起来。A：错误Q123:小陈通过微信摇一摇添加了一位头像靓丽的姑娘，两人聊天十分投缘，某天姑娘突然对小陈说，家人得了重病，向他借2万元给家人治病，小李此时应该？A：直接拒绝Q124:信用报告中信贷信息部分能够体现客户3年内的逾期及违约行为。答案：错误Q125:流动性常常被投资者忽视，一般除了需要预留6个月的生活开支外，还需要一部分的应急资金，所以需要做好短期、中期、长期的期限搭配。答案：正确Q126:中国人民银行征信中心为国家最权威的征信机构。答案：正确Q127:投资三要素是安全性、风险性和收益性答案：错误Q128:征信中心有权（可以）修改金融机构的数据A：错误Q129:客户对征信报告提出异议，如果经查贷款记录与征信报告相符，也需要帮助客户修改数据A：错误Q130:哪项原则是征信机构最基本的职业道德，也是征信立法的主要内容之一A:隐私商业秘密保护原则Q131:重复Q132:2006年左右，居民理财渠道较为单一，都在（）上A：存款、国债Q133:以下哪种是追涨杀跌的表现A：指数越高越疯狂Q134:如果客户已经打款，即使钱还没到账户，也算还款A：错误Q135:某城的一套房子1000万，首付30%就能搞定，相当于是用300万撬动了这1000万的房产A:正确Q136:信用卡消费签名前，需要仔细核对卡号，消费金额，币种是否正确。A:正确Q137:对于三明治族的资产配置要点，以下哪些说明不正确？答案：降低风险偏好，投资稳定资产Q138:哪些属于负面信息？答案：未按合同约定还款Q139:目前不良信息在征信报告的存续时间为多久A：5年Q140:贝壳研究院研究发现，影响换房需求有三大核心要素，哪一项不是核心要素？A：价格更优惠Q141:（重复）Q142:信用财富在信用报告中保留5年A:错Q143:下列哪项不属于“享富”守则？(易和Q78混淆)A:为资产做好的多元配置和科学规划Q144:70后三大件 手表 自行车 缝纫机Q145:e租宝涉及90万…A：错Q146:哪些不属于信用报告记录的信息A:金融负债信息Q147:下列哪项不属于征信的原则A:有效性Q148:如果信用报告出现错误，客户提出异议，对异议结果不满意，以下哪项不属于救济方式答案:上访Q149:2018年4月27日，我国发布了《关于规范金融机构资产管理业务的指导意见》（即资管新规），旨在规范金融机构资产管理业务，以下不属于资管新规发布后对银行理财产品的影响是？A:将出现更多3个月以内短期理财Q150：哪些属于不良信息(易和Q263混淆)A：严重违约Q151：在投资理财中，由于存款产品收益都非常低，所以完全无需在投资组合中选择存款产品。A：错误Q152：征信报告中可以查询到我有几次“恶意欠款”。A：错误Q153：发现数据错误，金融机构不改，可以向法院起诉。A：正确Q154：已经步入退休的银发老年族(60岁以上),最主要的理财工具是A：银行理财、存款Q155：发现征信报告有错，可以携带个人护照申请异议。A：正确Q156：大多数人选择的还贷收入比为？A：0-30%Q157：在部分境外商户通过国际组织线路进行消费时，刷卡消费一般不需要输入交易密码。A：正确Q158：黄金和股票通常呈现反向关系A：正确Q159：换手率是指风险和收益的性价比，反映了单位风险基金净值增值率超过无风险收益率的程度A：错误Q160：在餐厅结账时,卡片可以交给服务员拿到收银处自行刷卡结算。A：错误Q161：债券相较于股票，收益向上空间较为有限,但收益率波动也较小,适合风险相对较低客户。A：正确Q162：问题验证是指在线回答”私密性问题”的方式验证您的身份。A：正确Q163：定投越早进场越好A：正确Q164：负债比例低于收入的__时，家庭的财务是比较安全的A:1/3Q165：股票型基金：将__以上的资金投向股票的基金A：80%Q166：不属于人性特征A：人云亦云Q167：法院和政府部门查询信用报告也会体现在信用报告中。A：错误Q168：周某为一家公司的会计…最近刚学会网银购物,他开通哪种网银最合适A：专门办理一张银行卡Q169：基于征信工作的哪项原则,征信机构应该给予被征信人一定的知情权和申诉权答：真实性Q170:信用报告出错无法修改A：错误Q171:三明治族资产配置主要原则：长短搭配，专款专用，多元化配置A：正确Q172:影响大盘走势的最基本因素A：宏观经济与政策Q173:不是影响评估风险承受能力的因素A：持有另类资产的比例Q174:教育支出为刚性A：正确Q175:对于职场新人，由于所积累的财富较少，应采取保守型投资更为妥当。A：错误Q176:征信中心目前支持与中国金融认证中心（CFCA)合作的银行发放的数字证书答案：正确Q177:下列哪项不属于常见投资雷区A：不敢进场Q178:根据住房公积金和养老保险记录，我们可以确定客户当前的工作单位，结合缴费比例，可以测算出客户的收入情况。A：正确Q179:请选出我行网址A：www.cmbchina.comQ180:在子女教育方面，增加保障类配置，确保专款专用的现金流，以备不时之需。A：正确Q181:基金类的强制储蓄小工具是什么A：基金定投Q182:通过征信中心官方网站查询个人信用报告，不需要本人实名注册A：错误Q183:不属于客户的征信权利A：诉讼权Q184:法院冻结个人账户后，应以__方式通知答：法院文书Q185:货币实际需求大于货币供给会导致货币贬值A：错误Q186:如果客户信用记录很差，征信中心可以拒绝为客户查询信用报告。A：错误Q187:健康保障型保险可以在一定程度上解决无钱医病及因病致贫的问题。A：正确Q188:债券VS股票，相较于股票，债券收益率波动较小，但收益线上空间较为优先，两者组合配置，可降低组合波动，提升组合收益空间。A：正确Q189:健康保障型保险可以在一定程度上解决无钱医病及因病致贫的问题。A：正确Q190:72法则指通过固定收益投资是本金翻倍的时间=72/投资回报率A：正确Q191:逾期发生，客户应该立即还款，实在有困难，可以与银行协商。A：正确Q192：灵活性原则指征信机构在采集信息时要尽量实现实时跟踪，能够使用被征信人最新的信用记录，反映其最新的信用状况。A：错误Q193：教育金规划三步走不包含哪一步？A：多不多Q194：征信报告应充分披露任何能够体现被征信人信用状况的信息，这反应了征信机构再生成信用报告时应当遵循哪项原则A:全面性原则Q195:配置组合建立后，如果入场时机不好，正收益概率就会小A:错误Q196:一般情况下，黄金与股票呈现的关系是怎样的？A:反向关系Q197:任何一张银行卡都能验证A:错误Q198:网上查询信用报告时，如果没有通过身份验证，可以重新注册 (Q72相似)A：正确Q199:以下哪一种信用卡信息是可以告诉其他人的A:以上都不可以Q200:三个月前，汪某向朋友洪某借钱。。。A:错误Q201:正面信息是指您拥有贷款或信用卡且正常还款的信息A:正确Q202:配置建立后，任一天进场，持有越久，收益更高A:正确Q203:信用报告最好经常查询A:错误Q204:为保障您的权益，请您在银行卡背面签名条签上本人姓名A:正确Q205:小明为了方便妈妈网上购物 。。。。 留给了妈妈A:错误Q206：对客户自己提供的信息，放贷机构要从其他渠道核实真伪，信用报告只是放贷机构信贷决策的参考因素之一。A：正确Q207:《征信业管理条例》规定的异议处理时间为20天A：正确Q208:对于三口之家，支出压力大，应采取进取型投资获取更多收益。A：错误Q209:财富传承可以通过年金保险、金葵花信托、权益类基金A：正确（已经更正）Q210：如选择对招行信用卡的美元账单进行购汇还款，则当期购汇金额不能超过当期美元账单金额，购汇汇率为还款当日10点公布的招商银行美元卖出价。A：正确Q211:使用指定范围外的银行卡也可以查信用报告A：错误Q212：2001年公募基金行业迎来了首只开放式基金A：华安创新基金Q213：商业银行柜台无法查询征信报告A：错误Q214：征信中心整合数据都会是自动操作，不会产生错误。A：错误Q215：基金过去的绩效也代表未来的绩效。A：错误Q216：信用报告有错误是指客户认为信用报告与其记忆不同，但不一定真错。A：正确Q217:某客户信用报告借贷信息数字显示为7，说明该客户A：逾期Q218:根据帆船理论，保障类资产代表A：救生圈Q219:按照财富小船理论，船体的哪个部位代表的保障类需求？A：救生圈Q220:地铁上有人让你扫她的二维码 。。。A：错误Q221:采集、加工、分析和对外提供信用信息服务的相关制度和措施的总称是A：征信体系Q222:某位好友跟你说她的一个投资理财项目赚了钱，建议你也去试试，这是你应该保持警惕A：正确Q223:下列不属于贝壳研究院对2018年购房结论的是？A：年龄越小月供负担越小Q224:下列哪项不属于维护良好信用记录的方法A：经常查询信用报告Q225:当客户在没有POS机或不能联网的情况下（如国际航班），可以使用手工压单的操作进行信用卡交易，这也是信用卡的一种付款方式。A：正确Q226:储蓄型保险可以实现哪些功能A：以上都对Q227:按照2018年10月公布的通货膨胀率2.5%来计算，在20年后，100万等于现在多少钱的购买力？A：60.27万Q228:信用报告出错，客户委托代理人申请异议时，委托代理人需要带上授权委托书复印件。A：错误Q229:下列哪项属于信用报告出错的原因A：以上全选Q230：过去二十年，人们主要考虑的是如何富起来，未来二十年，考虑更多的则是如何富下去。A：正确Q231：信用卡消费后想怎么还款就怎么还款，无时间规定。A：错误Q232：优先获得股息，预先定好股息收益率，不受公司经营状况影响。A：正确Q233：收入-储蓄=支出是应该改进的存钱方案A：正确Q234:中国的股票认购最早由财政部A：错误Q235:适当利用杠杆投资是可以的A：正确Q236:搞清楚自己理财目标比怎么去配置重要A：正确Q237:信用卡支付过程中密码应妥善保管。。。A：正确Q238:以下哪一项服务不属于银行投融资业务的服务范围A：现金存取款业务Q239：不良信贷信息是指没有按时足额还款的信息。A：正确Q240：2018年全国购房者中80后占比达47.8％，近年来虽然90后逐渐深入市场，不过80后仍旧占据半壁江山A：正确Q241:征信报告出错,办理异议的地点为中国人民银行总部。A：错误Q242:坚持下列哪项原则，是征信工作最重要的条件A：真实性Q243：客户的历史信用记录仅包含负面信息。A：错误Q244：2018年购房者平均年龄为A：29.5Q245:给初入社会小资族配置建议中，基金定投的建议门槛是？A：60%Q246:每年免费查询几次征信报告 or 征信中心有义务每年为您提供几次免费查询服务A：2次Q247:在交易的乙方承诺未来偿还的前提下，另一方为其提供商品或服务的行为是哪一概念的定义A:信用Q248:将资金分为三部分:要花的钱,保障的钱,生钱的钱A:正确Q249:招行信用卡在pos机上刷卡消费没有手续费A:正确Q250:初入社会小资族资产配置主要原则为：简单组合配置、纪律投资？A:正确Q251:网上通过问题验证查信用报告时，需要在线回答几个私密问题A:5个Q252:所有的衣食住行的开支都属于现金流出。A:正确Q253:客户经理录入客户信息有误时，只能通过诉讼途径对客户经理提出诉讼解决。A:错误Q254:网上查信用报告，进行问题验证时答案不需要与信用报告中的信息一致A:错误Q255:适当赚钱可以设立为理财目标，只要收益率合理就可以。A:错误Q256:三次不良后，信用报告将会终身记录。A:错误Q257：信用报告出错，如果是因为自己填写信息有误，则不能修改A：错误Q258：海购时在支付界面中常见的VBV （Verified by VISA）的意思是指的“VISA验证”，指的是一项持卡人的身份识别的验证服务。A：正确Q259：上证指数6124点出现在哪一年？A：2007年Q260:财富传承的工具有年金保险、终身寿险、金葵花财富信托等。A:正确Q261:（重复）Q262:如果需要获得未来持续稳定的回报，那么投资周期应该更（）A:长Q263:下列哪项不属于不良信息（易和Q150混淆）A:离婚信息Q264:疾病风险目前的患病率越来越高，治疗费用也很高，但是随着医疗技术的发展治愈率逐步越来越高。A:正确Q265:当亏损达到50%的时候，需要上涨 才能回本A:100%Q266：资产配置是指根据投资需求，将投资资金在不同资产类别之间，进行分配A：正确Q267：下列哪项关于投资三要素说法不正确？A：收益越高、风险越小Q268：发现信用报告出现问题，不提异议纠正也没有不良后果。A：错误Q269：基金投资越分散，这样可以使得投资者不会过度暴露于单一风险之中，但基金的获利能力可能因此有所减弱。A：正确Q270:在征信中心查询信用报告一周之后可以获得结果A:错误Q271:金融机构在修改错误数据时都能够做到及时不滞后。A:错误Q272:发现信用报告有错误，申请异议，异议处理最少30天。A:错误Q273:信用报告出错，如果是印尼为自己填写信息有误，则不能修改。A:错误Q274:学费年年涨价，规划时不需要考虑增值速度。A:错误Q275:因遭受意外伤害造成去了、残疾、支出医疗费或暂时丧失劳动能力的风险指的是什么风险？A:意外风险Q276: 投资风险属于A：广义的风险Q277:商业柜台无法查询信用报告A:错误Q278:风险的特征不包含哪项？A:确定存在Q279：尼尔森调研对于中产阶级的教育费用调研显示：A：中产阶级需要更好的子女教育规划Q280:负面信息是指未按合同约定还款的信息A:正确Q281:外国人不能在征信中心查询信用报告A:错误Q282:不良报告 10年后消除。A:错误Q283：黄金和股票组合，可以对冲股票的非系统性风险A：错误Q284:下列哪项不属于长期规划A:买车规划Q285:合理消费带来的信用卡负债属于消费性良性负债A:正确Q286:征信机构是指依法设立，以盈利为目的的放贷机构。A:错误Q287:按照信用卡的结算货币方式不同，可以分为磁条卡和芯片卡。A:错误Q288:普通股股息不受公司经营状况影响答：错误Q289：净值型理财产品没有明确的预期收益率，产品收益以净值（资产组合的单价）的形式公布，因此能更为准确、真实、及时地反映所投资资产的价值。A：正确Q290：资产配置中，另类资产的作用是A:分散风险Q291:修改/删除数据，必须由金融中心操作。A:正确Q292:通过征信中心官方网站可以查询他人的信用报告吗？A：错误Q293：恶性负债就是一种财务“黑洞”，会使借款人背上沉重的财务负担，受到财务压力，甚至陷入财务困境。A：正确Q294：对比全球各地，中国人的买房平均年龄更为年轻化。A：正确Q295：现代社会中，黄金虽然不再作为直接进行流通的货币，但仍然具有独一无二的保值增值功能。A：正确Q296:发现信用报告有错误，可以向贷款机构或征信分中心提出异议并要求更正。A：正确Q297：征信系统只有责任清晰才能保证正新数据的准确性、客观性A：正确Q298:还贷收入比60%是危险线，仅适用于而且仅适用于工作稳定、没有孩子、个人年龄较小、升值潜力较大的人群A:错误Q299:自查信用报告是《征信业管理条例》赋予客户的什么权利？A:知情权Q300:发现信用报告有错误，申请异议，如果个人信用报告与贷款合同还款记录真实情况相符，也要按照客户要求修改报告。A:错误Q301：国内高净值人群对于股权投资更感兴趣，而对于资产安全性要求不高。A：错误Q302：社会信用体系的最终目标是形成良好的社会信用环境。A：正确Q303：下列关于负债规划说法不正确的是？A：借款先借低的，还款先还低的Q304;如果发现数据错误，金融机构要派人去征信中心修改数据。A:错误Q305我的户口在广东深圳，是可以在北京查询到自己的信用报告。A:正确Q306招行发行的银联IC芯片信用卡，符合中国金融集成电路卡规范标准，可在带有银联和QuickPass闪付标识的机具上使用，使用地区也包括境外区域A:正确Q307:股票认购证 财政部 90年代初 新股A:错误Q308：IAC公司，号称首创“蚂蚁传播”模式。用户花钱购买“种子”后，种子按会员等级以1%-2.8%的速度生长，收割后可以回收本利，年化收益365%-1022%，请问IAC公司性质是？A：网络传销Q309以下哪项不是基金定投的特点A：获得超高收益Q310:申请招商银行信用卡可以通过代办公司进行办理A:错误Q311:对于35岁中年白领来讲，哪一项不属于当前主要的支出费用A:自己养老Q312-风险的特征不包含哪项？A:确定存在Q313：最低还款额是指您每月最低需偿还的金额，显示在当月账单上。当月可在到期还款日期前，按时还足最低需要偿还的金额，不会影响您的个人信用记录，但不再享受免息待遇。A：正确Q314目前不良记录在征信报告上存续时间为结清不良记录后几年A：5年Q315：每月工资进来，先存钱、再花钱，才能扎实的存下钱A：正确Q316：有效性原则，指征信工作要做到资料全面，内容明晰A：错误Q317:信用卡的卡号、有效期都是不重要信息，可以随便发给陌生人知道。A:错误Q318:以下哪项不应作为选购银行理财产品时的主要参考因素？A:赠送礼品Q319:在公共网吧、使用公共WIFI查询、保存信用报告A:错误Q320:随着货币发行量的增长，黄金价格不断上涨，因此黄金能够在一定程度上抵御通货膨胀A:正确Q321:2014年1月2日，唐某买了辆东风日产汽车。8日，唐某接到电话，对方称是东风日产汽车…告诉唐某可以享受汽车节能退税的优惠。唐某于是持工行银行卡，来到自动柜员机上，按照对方的提示进行操作。这样的做法对不对？A:错误Q322:法院和政府部门查询信用报告会记录在查询记录里A:错误Q323:通胀会使我们所持有的现金的购买力不断降低A:正确Q324:每月工资进来，先存钱、再花钱，才能扎实的存下钱A:正确Q325:预备成家的资深上班族(30岁左右),面对的理财现状是A:结婚、买房开支大Q326:教育支出为刚性支出，为避免突发情况影响孩子教育，应设立专款专用的储备金A:正确Q327:融资融券是指提供担保物，借入资金买入证券（融资）或借入证券并卖出（融券）的行为。A:正确Q328:对外担保不是债，不需要承担偿还义务A:错误Q329:资产配置不是一体成型，而是量体裁衣，风险承受力不同，各大类资产投资比例也不同。A:正确Q330:征信报告查询的越多越好A:错误Q331:还款有难处可以联系银行，免除还款A:错误Q332:网上查信用报告时,无需提供手机号码A:错误Q333:以下哪个渠道不可以参与招行信用卡积分抽奖？A:滴滴出行Q334:现在招行信用卡公众号底部菜单栏有几个选项?A:3Q335:中国的股票认购证最早是90年代初由财政部提出发行的用以认购新股的凭证。A:错误Q336:使用问题验证但无法通过验证可能是因为本人当前真实信息与征信系统中的信息不一致A:正确Q337:不良记录在不良行为终止后，在信用报告中保存10年后删除A:错误Q338:对于印有个人信息的快递单等纸张应如何处理？A:将重要信息掩盖撕毁Q339:在酒店入住或租车时，商家一般会使用招行信用卡预扣一定金额作为押金，并在消费完成后再次刷卡实际结算，此类交易通常被称为“预授权交易”，这也是信用卡使用过程中的一种常见的交易形式？A:正确Q340:预借现金是招商银行信用卡的基本功能之一，该功能为持卡人提供小额现金借款，无需预先存款，持卡人即可通过提取现金或透支转账的方式获取资金，同时预借现金可以享受免息还款待遇，只要在账单出来后及时还清，就不需要额外支付手续费或利息？A:错误Q341:理财只是工具，美好生活才是目的？A:正确Q342:下列哪项不属于信用报告记录的内容A:金融负债信息Q343:信用评分是在信息主体信息的基础上,运用统计方法,对消费者或中小企业未来信用风险的一种综合评价A:正确Q344:2001年9月，我国诞生了第一只开放式基金( )，使我国基金业发展实现了从封闭式基金到开放式基金的历史性跨越A:华安创新基金Q345:投资理财产品时，只要选择收益高的就行了，无需关注产品风险、流动性。A:错误Q346:小额免密免签是银联和发卡银行共同为信用卡持卡人提供的一种小额快速支付服务。当持卡人使用具有“闪付”功能的金融IC卡，在指定商户进行一定金额以下的交易时，只需将卡片或移动设备靠近POS机等受理终端的“闪付”感应区，即可完成支付。支付过程中，持卡人不会被要求输入密码，也无需签名A:正确Q347:70年代，年轻人筹备婚礼需要的三大件是A:手表、自行车、缝纫机Q348:不良征信记录不会影响客户办理信用卡A:错误Q349:一只基金可以有多个基金经理管理吗？A:可以Q350:证券投资基金在世界各国的称谓是否相同？A:不相同Q351:储蓄黄金可以抵御通货膨胀吗？A:可以","categories":[],"tags":[],"author":"张存"},{"title":"yum安装epel源","slug":"yum安装epel源","date":"2021-10-28T09:12:14.000Z","updated":"2021-10-28T09:12:24.840Z","comments":true,"path":"2021/10/28/yum-an-zhuang-epel-yuan/","link":"","permalink":"https://blog.zhangcun.store/2021/10/28/yum-an-zhuang-epel-yuan/","excerpt":"","text":"国内yum源的安装(163，阿里云，epel) —-阿里云镜像源 1、备份 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 2、下载新的CentOS-Base.repo 到/etc/yum.repos.d/ CentOS 5 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-5.repo CentOS 6 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-6.repo CentOS 7 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 或者 curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo 3、之后运行 yum clean all，yum makecache 生成缓存 —-163镜像源 第一步：备份你的原镜像文件，以免出错后可以恢复。 mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup 第二步：下载新的CentOS-Base.repo 到/etc/yum.repos.d/ CentOS 5 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS5-Base-163.repo CentOS 6 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS6-Base-163.repo CentOS 7 wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo 3、之后运行 yum clean all，yum makecache 生成缓存 —-EPEL源 EPEL（Extra Packages for Enterprise Linux）是由 Fedora 社区打造，为 RHEL 及衍生发行版如 CentOS等提供高质量软件包的项目。装上了 EPEL，就像在 Fedora 上一样，可以通过 yum install 软件包名，即可安装很多以前需要编译安装的软件、常用的软件或一些比较流行的软件，比如现在流行的nginx、htop、ncdu、vnstat等等，都可以使用EPEL很方便的安装更新。 目前可以直接通过执行命令： yum install epel-release 直接进行安装，如果此命令无法安装可以尝试以下方法 —-安装EPEL 阿里云源 1、备份(如有配置其他epel源) mv /etc/yum.repos.d/epel.repo /etc/yum.repos.d/epel.repo.backup mv /etc/yum.repos.d/epel-testing.repo /etc/yum.repos.d/epel-testing.repo.backup 2、下载新repo 到/etc/yum.repos.d/ epel(RHEL 7) wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo epel(RHEL 6) wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo epel(RHEL 5) wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-5.repo —-官方源直接安装 CentOS/RHEL 5 ： rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-5.noarch.rpm CentOS/RHEL 6 ： rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm CentOS/RHEL 7 ： rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm","categories":[],"tags":[],"author":"张存"},{"title":"nginx通过域名访问项目（不接项目名称），cookie丢失问题详解","slug":"nginx通过域名访问项目（不接项目名称），cookie丢失问题详解","date":"2021-10-28T08:50:26.000Z","updated":"2021-10-28T08:54:40.635Z","comments":true,"path":"2021/10/28/nginx-tong-guo-yu-ming-fang-wen-xiang-mu-bu-jie-xiang-mu-ming-cheng-cookie-diu-shi-wen-ti-xiang-jie/","link":"","permalink":"https://blog.zhangcun.store/2021/10/28/nginx-tong-guo-yu-ming-fang-wen-xiang-mu-bu-jie-xiang-mu-ming-cheng-cookie-diu-shi-wen-ti-xiang-jie/","excerpt":"","text":"最近搞了个域名，想用它直接去访问Tomcat上部署的项目，开始一直必须加上项目名称，经过短暂配置，成功了。 访问一次，到达登陆页面，结果死活登录不进去，一直在登陆界面，原来是由于cookie丢失，现配置如下，完美解决问题： server &#123; listen 80; #listen somename:8080; server_name www.XXX.cn; location / &#123; proxy_pass http://IP:8080/projectName/; proxy_cookie_path /projectName/ /; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; #root html; #index index.html index.htm; &#125; location /projectName/ &#123; proxy_pass http://IP:8080/projectName/; proxy_cookie_path /projectName/ /; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; &#125; &#125; proxy_cookie_path /projectName/ /; 用于改变cookie路径，解决cookie丢失问题的 在配置域名访问应用时，常出现cookie丢失问题，原因是普通的配置cookie的路径为（没有经过代理的地址）： http://IP:8080/projectName cookie_path：/project 但是为了不添加项目名就能访问应用，我们把location的代理地址设置为/ ，所以要改变cookie的路径，语法： proxy_cookie_path path replacement; path就是你需要替换的路径，replacement就是你需要替换的值 proxy_set_header Host $host; host变量的值按照如下优先级获得： 请求行中的host. 请求头中的Host头部. 与一条请求匹配的server name. 很清楚，有三点，取优先级最高的那个。仅从字面意思上来理解，这个选择的过程为：如果请求行中有host信息，则以请求行中的host作为host变量的 值（host与host变量不是一个东西，很拗口）；如果请求行中没有host信息，则以请求头中的Host头的值作为host变量的值；如果前面两者都没有，那 么host变量就是与该请求匹配所匹配的serve名。 proxy_set_header X-Real-IP $remote_addr; 用于获取用户真实IP的 详解如下： 经过反向代理后，由于在客户端和web服务器之间增加了中间层，因此web服务器无法直接拿到客户端的ip，通过$remote_addr变量拿到的将是Nginx的ip地址， 但是Nginx是可以获取用户的真实IP的，也就是说Nginx通过$remote_addr变量时获取的就是用户真实IP，那么想在web服务器获取用户真实IP，那咱们就需要赋 值一下，如上面的配置，Nginx将用户的真实IP赋值给X-Real-IP，然后在web端request.getAttribute(“X-real-ip”)获取IP proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 用于获取用户真实IP的 另附上获取IP的工具 import java.io.IOException; import javax.servlet.http.HttpServletRequest; /** * 常用获取客户端信息的工具 * */ public final class NetworkUtil &#123; /** * 获取请求主机IP地址,如果通过代理进来，则透过防火墙获取真实IP地址; * * @param request * @return * @throws IOException */ public final static String getIpAddress(HttpServletRequest request) throws IOException &#123; // 获取请求主机IP地址,如果通过代理进来，则透过防火墙获取真实IP地址 String ip = request.getHeader(&quot;X-Forwarded-For&quot;); if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getHeader(&quot;Proxy-Client-IP&quot;); &#125; if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getHeader(&quot;WL-Proxy-Client-IP&quot;); &#125; if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getHeader(&quot;HTTP_CLIENT_IP&quot;); &#125; if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getHeader(&quot;HTTP_X_FORWARDED_FOR&quot;); &#125; if (ip == null || ip.length() == 0 || &quot;unknown&quot;.equalsIgnoreCase(ip)) &#123; ip = request.getRemoteAddr(); &#125; &#125; else if (ip.length() &gt; 15) &#123; String[] ips = ip.split(&quot;,&quot;); for (int index = 0; index &lt; ips.length; index++) &#123; String strIp = (String) ips[index]; if (!(&quot;unknown&quot;.equalsIgnoreCase(strIp))) &#123; ip = strIp; break; &#125; &#125; &#125; return ip; &#125; &#125;","categories":[],"tags":[],"author":"张存"},{"title":"Ubuntu20.04 安装和卸载MySQL8","slug":"Ubuntu20-04-安装和卸载MySQL8","date":"2021-10-28T08:40:42.000Z","updated":"2021-10-28T08:41:38.900Z","comments":true,"path":"2021/10/28/ubuntu20-04-an-zhuang-he-xie-zai-mysql8/","link":"","permalink":"https://blog.zhangcun.store/2021/10/28/ubuntu20-04-an-zhuang-he-xie-zai-mysql8/","excerpt":"","text":"安装MySQL8安装mysql-server sudo apt install mysql-server 初始化配置信息 sudo mysql_secure_installation VALIDATE PASSWORD COMPONENT…..（使用密码强度校验组件） 输入： nNew Password:（设置新密码,并重复一遍)Remove anonymous users (删除匿名用户) nDisallow root login remotely(拒绝远程root账号登录） nRemove test database and access to it(移除test数据库） nReload privilege tables now (现在就重新载入权限表） y登入到数据库并配置远程访问 sudo mysql -uroot -p配置root用户外网也可以连接并登录use mysqlupdate user set Host=’%’ where User=’root’; # 这里插一句如果表中已经存在的话就会报错，请认真查看报错信息，已经设置的话就不需要再设置了GRANT ALL ON . TO ‘root‘@’%’;FLUSH PRIVILEGES; # 刷新权限解惑物理机链接不到虚拟机的MySQL（错误排查）首先查看IP是否可以互相ping通（LinuxL:ifconfig-a， Windows：ipconfig）使用sudo netstat -tupln 或者 sudo lsof -i:端口 查看端口状态使用sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf 将 bind-address = 127.0.0.1 注释 然后保存退出使用 sudo service mysql restart 重启MySQL服务 MySQL8 卸载查看MySQL依赖 ： dpkg –list|grep mysql 卸载： sudo apt-get remove mysql-common 卸载： sudo apt-get autoremove –purge mysql-server-8.0(这里版本对应即可) 清除残留数据: dpkg -l|grep ^rc|awk ‘{print$2}’|sudo xargs dpkg -P 再次查看MySQL的剩余依赖项: dpkg –list|grep mysql(这里一般就没有输出了，如果有执行下一步) 继续删除剩余依赖项，如：sudo apt-get autoremove –purge mysql-apt-config 【在执行过程中有的需要sudo】 【第6部执行完了就彻底删除了】","categories":[],"tags":[],"author":"张存"},{"title":"crontab每秒执行一次脚本","slug":"crontab每秒执行一次脚本","date":"2021-10-27T12:09:27.000Z","updated":"2021-10-27T12:11:02.621Z","comments":true,"path":"2021/10/27/crontab-mei-miao-zhi-xing-yi-ci-jiao-ben/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/crontab-mei-miao-zhi-xing-yi-ci-jiao-ben/","excerpt":"","text":"crontab的最小时间时间是一分钟，那么，如果想要更快的话，可以通过调用shell脚本，然后脚本中循环执行即可，代码如下 crontab中，每分钟调用一次sheel */1 * * * * bash /data/www/test.sh test.sh脚本如下 #!/bin/bash #循环29次 for((i=1; i&lt; 30; i++)); do /data/www/test/yii test/test #控制节奏，执行一次休息1秒 sleep 1; done 自己根据需要调整频率即可","categories":[],"tags":[],"author":"张存"},{"title":"服务器","slug":"服务器","date":"2021-10-27T11:40:42.000Z","updated":"2021-10-27T11:41:17.504Z","comments":true,"path":"2021/10/27/fu-wu-qi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/fu-wu-qi/","excerpt":"","text":"服务器 目录1 远程管理 31.1 常用软件 31.2 Telnet：23 31.3 VNC：5905（默认5905） 31.4 xrdp：tcp/2820、tcp/2821 31.5 SSH：tcp/22 42 rsyslog网络日志系统 53 rsync备份与文件同步 54 unison双向文件同步 55 NFS与autofs远程文件调用 66 samba文件共享协议 67 vsftpd 68 dns 69 dhcp 710 LAMP-web apache 711 nginx 712 LEMP编译安装 713 tomcat 814 openvpn 815 postfix邮件服务器 816 IP-SAN iscsi 817 rsnapshot备份服务器 918 keepalive高可用集群 919 iptables防火墙 920 SVN版本控制服务 9 1 远程管理1.1 常用软件服务器端：Telnet、tigervnc、openssh客户端：Telnet、xmanager、putty、xshell … …1.2 Telnet：23默认root不登陆，明文yum install telnet.x86_64 telnet-server.x86_64systemctl list-unit-files | grep telnetsystemctl start telnet.socketlsof -i:23mv /etc/securetty /etc/securetty.bak1.3 VNC：5905（默认5905）yum install tigervnc-server.x86_64 tigervnc.x86_64cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:5.servicevi /etc/systemd/system/vncserver@:5.servicevncservernetstat -apn | grep vnc1.4 xrdp：tcp/2820、tcp/2821服务器端：yum install xrdp.x86_64 xrdp-devel.x86_64 xorgxrdp.x86_64chcon -R -t bin_t /usr/sbin/xrdpchcon -R -t bin_t /usr/sbin/xrdp-sesmansystemctl restart xrdp.servicenetstat -antup | grep xrdp客户端：linux：vinagrewindows：mstsc1.5 SSH：tcp/22主要功能：加密远程管理，加密远程文件传输（scp、sftp）1、Putty:(和puttygen一起使用)mkdir /root/.ssh vi authorized_keys 复制public keysystemctl restart sshd2、远程连接ssh -X &#114;&#111;&#111;&#x74;&#x40;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#49;&#46;&#x31;&#56;&#50; #可以查看图形界面scp file &#x72;&#111;&#x6f;&#116;&#64;&#49;&#x39;&#x32;&#46;&#x31;&#54;&#56;&#46;&#49;&#x2e;&#x31;&#x38;&#50;:/opt/ #传输文件scp -rp /home/ &#x72;&#111;&#x6f;&#116;&#x40;&#49;&#x39;&#x32;&#46;&#49;&#54;&#x38;&#x2e;&#49;&#46;&#x31;&#x38;&#x32;:/opt/ #传输目录sftp &#x72;&#x6f;&#111;&#x74;&#x40;&#x31;&#x39;&#50;&#x2e;&#x31;&#x36;&#56;&#46;&#49;&#46;&#x31;&#x38;&#50;put a.txt #上传get b.txt #下载rename、rm3、秘钥级身份认证ssh-keygenssh-copy-id -i /root/.ssh/id_rsa.pub &#114;&#111;&#111;&#116;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#x38;&#x2e;&#49;&#46;&#49;&#x38;&#50;ssh 192.168.1.1824、ssh访问控制1）vi /etc/ssh/sshd_confAllowUsers 用户名/组名DenyUsers 用户名2）vi /etc/pam.d/sshd添加auth required /lib/security/pam_listfile.so item=user sense=denyfile=/etc/sshd_user_deny_list onerr=succeed所有/etc/sshd_user_deny_list里面的用户被拒绝ssh登录2 rsyslog网络日志管理系统 3 rsync备份与文件同步端口：tcp873远程文件同步，网站的备份，（不同系统）文件的同步，手动备份增量差异备份，单项文件同步rsync备份与文件同步.docx4 unison双向文件同步端口：使用ssh端口22双向同步操作，跨平台使用不仅支持本地对本地同步，也支持通过SSH、RSH和Socket等网络协议进行同步。unison双向文件同步.docx5 NFS与autofs远程文件调用端口：tcp2049Linux/unix，局域网，可以跨网段、RPC远程调用协议NFS与autofs服务.docx6 samba文件共享协议端口：tcp139、tcp445SMB文件共享协议（信息服务块）用于Linux与Windows，linux与linux的文件共享局域网文件共享、windows域控samba文件共享协议.docx7 vsftpd端口： tcp/20、tcp/21（被动方式下数据传输端口不固定）远程文件存取、不受平台限制、跨广域网vsftpd文件传输协议.docx8 dns端口：53域名解析服务器递归解析（本地名称服务器查）与迭代解析（客户端自己查）DNS.docx9 dhcpdhcp动态主机分配协议DHCP.docx10 LAMP-web apacheLAMP：linux-apache-mysql-phpapache端口：80mariadb端口：3306php-fpm端口：9000https加密端口：443LAMP-apache.docx11 nginx 12 LEMP编译安装LEMP：linux-nginx-mysql-php编译安装的方法wordpress、owncloud发布LEMP-nginx.docx13 tomcat 14 openvpn 15 postfix邮件服务器postfix邮件发送服务端口：25pop3邮件接收服务端口：110IMAP邮件访问协议端口：143加密–发送服务器smtp：995 –接受服务器pop3：25postfix邮件服务器.docx16 IP-SAN iscsi端口：3260IP-SAN.docx17 rsnapshot备份服务器备份服务器-rsnapshot.docx18 keepalive高可用集群一台web服务器出现故障，从服务器可以直接工作keepalived高可用集群.docx19 iptables防火墙 20 SVN版本控制服务SVN+http：80、8080","categories":[],"tags":[],"author":"张存"},{"title":"基本配置","slug":"基本配置","date":"2021-10-27T11:36:47.000Z","updated":"2021-10-27T11:53:55.409Z","comments":true,"path":"2021/10/27/ji-ben-pei-zhi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/ji-ben-pei-zhi/","excerpt":"","text":"一、查看系统1、lscpu2、free -m #查看内存swap虚拟内存（交换分区）swap分区在系统的物理内存不够用的时候，把硬盘空间中的一部分空间释放出来，以供当前运行的程序使用。那些被释放的空间可能来自一些很长时间没有什么操作的程序，这些被释放的空间被临时保存到swap分区中，等到那些程序要运行时，再从swap分区中恢复保存的数据到内存中。主要应用于数据库服务器与 web 优化服务器（面试可能会问到）3、lsblk #查看服务器磁盘分布状态4、df -h #显示分区5、lspci #用来显示系统中所有PCI总线设备或连接到该总线上 的所有设备的工具lspci | grep Ethernet #网卡 VGA #显卡 audio #声卡6、lsusb #显示服务器usb接口数量7、查看系统版本cat /etc/redhat-release # 查看系统发行版本CentOS Linux release 7.2.1511 (Core) uname -r # 显示内核版本3.10.0-327.el7.x86_64 #3主版本号 10次版本号 稳定版(偶数)uname -n # 显示主机名 二、基础配置1、更换源cd /etc/yum.repos.d/yum clean allyum makecacheyum repolist 本地源vi junxi.repo[junxi_repo]name=www.junxilinux.combaseurl=http://192.168.1.5/hadoop/enable=1gpgcheck=0epel源yum install epel-release.noarch 1、防火墙iptables -L #防火墙规则iptables -t nat -L #防火墙nat表规则 2、服务systemctl list-unti-files | grep fire #查找fire的服务target #单元组socket #接口systemctl start/stop/restart/status firewalld.servicesystemctl enable/disable/is-actives firewalld.servicesystemctl list-dependencise firewalld.service #树形查看相关服务 3、centos7运行级别systemctl isolate proweroff.target #启动单元组 init 0 proweroff.target.wants #启动单元组成员 reboot.target init 6 multi-user.target init 3 #命令行模式 graphical.target init 5 #图形界面 rescue.target init 1 #单用户模式systemctl get-defaultrunlevel #查看当前运行级别systemctl set-defauil multi-user.target #修改默认运行级别 /etc/systemd/system #启动单元组.wants，优先级高，/usr/lib/systemd/system #链接到/etc下 4、网络设备命名vi /etc/sysconfig/grubGRUB_CMDLINE_LINUX=”net.ifnames=0 biosdevname=0 rd.lvm.lv=JUNXI/root rd.lvm.lv=JUNXI/swap rhgb quiet”grub2-mkconfig -o /boot/grub2/grub.cfg#把修改的配置文件设置生成道/boot/grub2/grub.cfg（重新生成GRUB配置，并更新内核参数） 5、修改网卡配置文件cd /etc/sysconfig/networkmv ifcfg-eno16 ifcfg-eth0vi ifcfg-eth0DEVICE=”eth0”DNS1=”192.168.1.1”IPADDR=192.168.1.181GATEWAY=192.168.1.1systemctl network restart Linux主流的发行版本：debianubuntun red hat什么是shell：它接收用户命令，然后调用相应的应用程序。 cd /etc/yum.reposlsmv Cent-B Cen..-bak 备份原有源ls /optmv /opt/Cen .lsyum clean all 清除缓存yum makecache 建立本地缓存yum repolist 列出系统中以配置的源yum search epel 查找epel源yum install epel-release.noarchyum repolist yum remove 关闭防火墙iptables -L 查看防火墙规则iptables -t nat -L 查看防火墙nat表规则systemctl list-unit-files 列出所有服务system list-unit-files | grep fire 列出有关防火墙的服务systemctl is-active firewalld.service 查看防火墙状态systemctl stop firewalld.service 关闭防火墙sys disable firewalld.ser 永久关闭防火墙 删除虚拟网络接口virbr0virsh net-list 查看所有虚拟网络删除default网络virsh net-destroy default 重启libvirtd后恢复virsh net-undefine def 重启系统后不回复 网络设备命名ifconfig 查看 ip addr编辑vi /etc/sysconfig/grub 文件 （nano 编辑 gedit图形界面编辑）添加GRUB_CMDLINE_LINUX=”net.ifnames=0 biosdevname=0 rd.lvm…’cat /etc/sysconfig/grub 查看是否成功写入grub2-mkconfig -o /boot/grub2/grub.cfg 把修改的配置文件设置生成道/boot/grub2/grub.cfg（重新生成GRUB配置，并更新内核参数）修改网卡配置文件cd /etc/sysconfig/network 跳转目录mv ifcfg-eno ifcfg-eth0 更改配置文件名称编辑vi ifcfg-eth0文件 将里面的eno16 改为eth0reboot 重启poweroff 关闭系统","categories":[],"tags":[],"author":"张存"},{"title":"网络管理服务","slug":"网络管理服务","date":"2021-10-27T11:34:57.000Z","updated":"2021-10-27T11:35:24.158Z","comments":true,"path":"2021/10/27/wang-luo-guan-li-fu-wu/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/wang-luo-guan-li-fu-wu/","excerpt":"","text":"网络管理服务有两个：NetworkManager：修改连接名-连接名连接配置文件优势：支持wifi，不会发生漂移，network:直接修改设备配置文件nmtui修改时，设备连接名改为一致 vi /etc/sysconfig/grubGRUB_CMDLINE_LINUX=……rhgb quiet net.ifnames=0 biosdevname=0”grub2-mkconfig -o /boot/grub2/grub.cfgsystemctl stop NetworkManager.servicesystemctl disable NetworkManager.servicerebootmv ifcfg-eno16777736 ifcfg-eth0vi ifcfg-eth0NAME=”eth0”DEVICE=”eth0”mv ifcfg-ens37 ifcfg-eth1NAME=”eth1”DEVICE=”eth1”","categories":[],"tags":[],"author":"张存"},{"title":"压缩与解压缩","slug":"压缩与解压缩","date":"2021-10-27T11:30:20.000Z","updated":"2021-10-27T11:31:12.226Z","comments":true,"path":"2021/10/27/ya-suo-yu-jie-ya-suo/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/ya-suo-yu-jie-ya-suo/","excerpt":"","text":"1 常用压缩工具gzip：压缩与解压缩工具bzip2：块排序压缩工具tar：归档工具zip：打包压缩工具，支持正则，有自己的转义符2 gzipgzip：用于压缩一个或多个文件，并且原文件会被压缩文件取代gunzip：用于将压缩文件还原为原文件压缩文件是原文件的1、实例gzip aaa.doc #压缩文件du -sh aaa.doc.gzgunzip aaa.doc.gz #解压文件gzip -d aaa.doc.gz #解压文件du -sh aaa.doc2、查看压缩文件内容gunzip -c rsnapshot.conf.gzzcat rsnapshot.conf.gzzless rsnapshot.conf.gzzmore rsnapshot.conf.gz3 bzip2降低压缩速度，提高压缩质量bzip2 aaa.docbunzip2 aaa.doc.bz24 tartar：归档文件工具，没有压缩功能选项c：创建新的归档文件r：将某一文件或某些文件追加到已经存在的归档文件t：列出文档内容，查看已经备份了哪些文件u：更新文件x：释放归档文件辅选项-f：（必选）后面紧跟文件名-v：现实操作时的详细信息-z：调用gzip进行压缩-j：调用bzip2进行压缩-p：不改变文件原来的属性-k：不覆盖已经存在的同名的文件-N：只打包比DATE日期新的文件-C：指定解压目录实例mkdir -p /opt/dir/test{1..50}.txttar cvf dir.tar dir #归档dir目录tar xvf dir.tar #释放归档文件tar tvf dir.tar | more #查看归档文件内容tar zcvf dir.tar.gz dir #调用gzip归档并压缩tar zxvf dir.tar.gz dir #解压缩tar zxvf dir.tar.gz -C /mnt/ #指定解压目录tar rvf dir.tar test/ #将test目录归档追加到归档文件dir.tar中5 zip选项-r：递归处理-l：列出压缩文件内容-d：指定解压目录实例zip -r dir.zip dir/ #递归压缩unzip dir.zip #解压缩unzip -l dir.zip #列出压缩文件内容unzip dir.zip -d /mnt #指定解压目录","categories":[],"tags":[],"author":"张存"},{"title":"关闭selinux：","slug":"关闭selinux：","date":"2021-10-27T11:27:34.000Z","updated":"2021-10-27T11:33:42.533Z","comments":true,"path":"2021/10/27/guan-bi-selinux/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/guan-bi-selinux/","excerpt":"","text":"setenforce 0如果http为编译安装，selinux上下文策略与rpm安装不同，需要使用audit2allow，该工具读物审计日志并创建selinux允许审计失败的政策：yum install /usr/bin/audit2allow #进行安装或者yum install setroubleshoot #安装selinux排障工具过滤审计日志文件的失败写下上下文被拒绝日志audit.loggrep check.py /var/log/audit/audit.log在找到所有否认上下文我使用audit2allow创建允许政策ps -efZ |grep keepalived #确认Keepalived进程上下文为keepalived_tgrep keepalived_t /var/log/audit/audit.log | audit2allow -M keepalived_tsemodule -i keepalived_t.pp #独立创建新的Keepalived访问策略 SelinuxGentenforce 0 —- permissive //临时关闭 1 —–enforcingvi /etc/selinux/config chcon -R -t httpd_sys_content_t /web //修改目录的上下文ll -Z -d /web/ //查看上下文 semanage port -l | grep httpd //查看默认端口Getsebool -a //布尔值","categories":[],"tags":[],"author":"张存"},{"title":"vi编辑器","slug":"vi编辑器","date":"2021-10-27T11:23:33.000Z","updated":"2021-10-27T11:24:49.586Z","comments":true,"path":"2021/10/27/vi-bian-ji-qi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/vi-bian-ji-qi/","excerpt":"","text":"Vi是linux/unix系统内置的最高效的创建和编辑的文本工具。命令模式编辑模式末行模式i光标所在左侧输入正文a光标所在右侧输入正文s光标所在字符输入正文复制nyy1,5 co 10 将1到5行的所有内容，复制到第10行K（上） j（下）h（左）l（右）删除dG 删除至文件末尾d0：删除至行首d$: 删除至行尾：1，5 dx/X 向后 向前/char ?char /从上往下 ？从下往上n/N 继续查找替换r/R:1,10s /old/new 在第一行到第十行这个范围内替换，只替换每行的一个old：1,10s /old/new/g 在第一行到第十行这个范围内进行全部替换。：%s /old/new/g 进行全文替换：%s#old#new#g 进行全文替换。分隔符可以是/#:%s ,old,new,g 进行全文替换:%s /^/#/g:%s /$/#/g:%s #\\#/#g 将\\替换成/:%s /#/$/g:1,12w /root/filename 另存为：r ~/filename 读一个文件：r ！ls –l 将ls –l 命令查果，读到文件中。：19 r aa.txt 将aa.txt 文件，读到19行的下面。：！ ls –l 执行shell命令：e /etc/filename 打开/etc/filename文件：set nu 设置行号：set nonu 关闭行号vim -o FORWARD.sh FORWARD.sh.bc 同时打开两个文件Ctrl+shift++ #放大Ctrl+- #缩小Ctrl+w #跳转窗口","categories":[],"tags":[],"author":"张存"},{"title":"centos7通过yum安装JDK1.8","slug":"centos7通过yum安装JDK1-8","date":"2021-10-27T07:47:04.000Z","updated":"2021-10-27T07:47:15.180Z","comments":true,"path":"2021/10/27/centos7-tong-guo-yum-an-zhuang-jdk1-8/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/centos7-tong-guo-yum-an-zhuang-jdk1-8/","excerpt":"","text":"安装之前先检查一下系统有没有自带open-jdk 命令： rpm -qa |grep java rpm -qa |grep jdk rpm -qa |grep gcj 如果没有输入信息表示没有安装。 如果安装可以使用rpm -qa | grep java | xargs rpm -e –nodeps 批量卸载所有带有Java的文件 这句命令的关键字是java 首先检索包含java的列表 yum list java* 检索1.8的列表 yum list java-1.8* 安装1.8.0的所有文件 yum install java-1.8.0-openjdk* -y 使用命令检查是否安装成功 java -version 到此安装结束了。这样安装有一个好处就是不需要对path进行设置，自动就设置好了","categories":[],"tags":[],"author":"张存"},{"title":"linux下显示完整路径，linux下显示绝对路径","slug":"linux下显示完整路径，linux下显示绝对路径","date":"2021-10-27T07:44:28.000Z","updated":"2021-10-27T07:45:41.079Z","comments":true,"path":"2021/10/27/linux-xia-xian-shi-wan-zheng-lu-jing-linux-xia-xian-shi-jue-dui-lu-jing/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/linux-xia-xian-shi-wan-zheng-lu-jing-linux-xia-xian-shi-jue-dui-lu-jing/","excerpt":"","text":"linux下，命令行显示路径仅最后一个文件名，非常不方便，想显示完整路径。环境背景：linux，无root权限，可sudo(为了服务器安全，一般只给管理员root账号和密码，普通账号仅sudo权限) 回到顶部【1】修改环境变量PS1 （1）临时生效命令行提示符完全显示完整的工作目录名称：export PS1=’[\\u@\\h $PWD]$’ （2）永久生效vi编辑/etc/profile文件在最后加上export PS1=’[\\u@\\h $PWD]$’ 修改完成后，执行: source /etc/profile 使配置生效即可。 （3）其他方式相关命令行提示符只列出最后一个目录： export PS1=’[\\u@\\h \\W]$’ 命令行提示符显示完整工作目录，当前用户目录会以 ~代替： export PS1=’[\\u@\\h \\w]$’ 回到顶部 【2】命令释义复制代码\\u 显示当前用户账号\\h 显示当前主机名\\W 只显示当前路径最后一个目录\\w 显示当前绝对路径（当前用户目录会以 ~代替）$PWD 显示当前全路径$ 显示命令行’$’或者’#’符号复制代码然后问题来了，vi 退出时，’:wq!‘回车后提示：E45: ‘readonly’ option is set (add ! to override) 。原因是权限不够，非root权限。解决方法:q! 退出，然后命令行输入 sudo !!，再次vi编辑即可。sudo !! // 解释：sudo来执行上一条命令，’!!’ 表示上一条命令，linux中’!’的用法可以参见参考[3]参考：[1] Linux 修改命令提示符当前路径的显示方式[2] VIM提文件权限问题:…e45 readonly option is set (add!to override)[3] Linux命令行下”!”的十个神奇用法","categories":[],"tags":[],"author":"张存"},{"title":"k8s创建ubuntu容器时出现Back-off restarting failed container问题","slug":"k8s创建ubuntu容器时出现Back-off-restarting-failed-container问题","date":"2021-10-27T07:39:24.000Z","updated":"2021-10-27T07:40:52.612Z","comments":true,"path":"2021/10/27/k8s-chuang-jian-ubuntu-rong-qi-shi-chu-xian-back-off-restarting-failed-container-wen-ti/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/k8s-chuang-jian-ubuntu-rong-qi-shi-chu-xian-back-off-restarting-failed-container-wen-ti/","excerpt":"","text":"1、问题：k8s创建ubuntu容器时出现Back-off restarting failed container，容器一直进行重启。 2.原因：对于像ubuntu这样的系统级docker ，用k8s集群启动管理后，会自动关闭，解决方法就是 让其一直在运行，所以在yaml文件中增加command命令即可。3.解决：在yaml中添加如下参数：command: [ “/bin/bash”, “-c”, “–” ]args: [ “while true; do sleep 30; done;” ] ubuntu.yaml apiVersion: extensions/v1beta1kind: Deploymentmetadata: name: ubuntu-deployspec: replicas: 1 template: metadata: labels: name: ubuntu spec: containers: - name: ubuntu-tz command: [“/bin/bash”,”-c”,”–”] args: [“while true; do sleep 30; done;”] securityContext: privileged: true image: ubuntu:16.04 重新进行部署就可以了~~~","categories":[],"tags":[],"author":"张存"},{"title":"Linux开启ipv4转发","slug":"Linux开启ipv4转发","date":"2021-10-27T06:44:47.000Z","updated":"2021-10-27T06:46:27.162Z","comments":true,"path":"2021/10/27/linux-kai-qi-ipv4-zhuan-fa/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/linux-kai-qi-ipv4-zhuan-fa/","excerpt":"","text":"查看IP转发功能的状态，若net.ipv4.ip_forward为0，表示禁止进行ip转发。 sysctl net.ipv4.ip_forwardnet.ipv4.ip_forward = 0修改 /etc/sysctl.conf： net.ipv4.ip_forward = 1执行如下命令使修改生效： sysctl -p /etc/sysctl.conf","categories":[],"tags":[],"author":"张存"},{"title":"用Nginx快速搭建文件服务器","slug":"用Nginx快速搭建文件服务器","date":"2021-10-27T06:38:46.000Z","updated":"2021-10-27T06:42:25.995Z","comments":true,"path":"2021/10/27/yong-nginx-kuai-su-da-jian-wen-jian-fu-wu-qi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/yong-nginx-kuai-su-da-jian-wen-jian-fu-wu-qi/","excerpt":"","text":"使用Nginx在局域网内和同事共享文件的好方法。 1 安装nginx sudo apt-get install nginx2 创建conf文件 sudo gedit /etc/nginx/conf.d/file_server.conf修改conf文件如下： server &#123; listen 80; server_name 10.1.2.3; # 自己PC的ip或者服务器的域名 charset utf-8; # 避免中文乱码 root /home/xx/share; location / &#123; autoindex on; # 索引 autoindex_exact_size on; # 显示文件大小 autoindex_localtime on; # 显示文件时间 &#125; &#125; 3 使配置生效 sudo rm /etc/nginx/sites-enabled/defaultsudo service nginx reload4 访问 浏览器里直接输入 http://10.1.2.3","categories":[],"tags":[],"author":"张存"},{"title":"centos7使用yum安装MongoDB4.4","slug":"centos7使用yum安装MongoDB4-4","date":"2021-10-27T06:26:13.000Z","updated":"2021-10-27T06:27:39.982Z","comments":true,"path":"2021/10/27/centos7-shi-yong-yum-an-zhuang-mongodb4-4/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/centos7-shi-yong-yum-an-zhuang-mongodb4-4/","excerpt":"","text":"创建repovi /etc/yum.repos.d/mongodb-org-4.4.repo 写入repo[mongodb-org-4.4]name=MongoDB 4.4 Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/4.4/$basearch/gpgcheck=0enabled=1 yun 安装yum -y install mongodb-org 设置启动systemctl enable mongodsystemctl start mongod 本机命令行进入MongoDBmongo 至此安装完毕","categories":[],"tags":[],"author":"张存"},{"title":"Linux 硬盘分区生效命令partprobe","slug":"Linux-硬盘分区生效命令partprobe","date":"2021-10-27T06:22:19.000Z","updated":"2021-10-27T06:25:06.438Z","comments":true,"path":"2021/10/27/linux-ying-pan-fen-qu-sheng-xiao-ming-ling-partprobe/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/linux-ying-pan-fen-qu-sheng-xiao-ming-ling-partprobe/","excerpt":"","text":"在Linux中使用fdisk命令进行分区时，有时会遇到“WARNING: Re-reading the partition table failed with error 16: Device or resource busy.The kernel still uses the old table.The new table will be #used at the next reboot.”这种告警信息。如下所示 [root@localhost ~]# fdisk /dev/sde The number of cylinders for this disk is #set to 18928.There is nothing wrong with that, but this is larger than 1024,and could in certain setups cause problems with: software that runs at boot time (e.g., old versions of LILO) booting and partitioning software from other OSs(e.g., DOS FDISK, OS/2 FDISK) Command (m for help): p Disk /dev/sde: 155.6 GB, 155692564480 bytes255 heads, 63 sectors/track, 18928 cylindersUnits = cylinders of 16065 * 512 = 8225280 bytes Device Boot Start End Blocks Id System/dev/sde1 1 18275 146793906 5 Extended/dev/sde5 1 18275 146793874+ 83 Linux Command (m for help): nCommand action l logical (5 or over) p primary partition (1-4)pPartition number (1-4): 2First cylinder (18276-18928, default 18276):Using default value 18276Last cylinder or +size or +sizeM or +sizeK (18276-18928, default 18928):Using default value 18928 Command (m for help): wThe partition table has #been #altered! Calling ioctl() to re-read partition table. WARNING: Re-reading the partition table failed with error 16: Device or resource busy.The kernel still uses the old table.The new table will be #used at the next reboot.Syncing disks. 此时使用fdisk命令看不到新建的分区信息，可以使用partprobe命令解决这个问题而不用重启系统，因为partprobe可以使kernel重新读取分区信息，从而避免重启系统。 partprobe - inform the OS of partition table changes DESCRIPTION This manual page documents briefly the partprobe command. partprobe is a program that informs the operating system kernel of partition table changes, by requesting that the operating system re-read the partition table.","categories":[],"tags":[],"author":"张存"},{"title":"华为SSLVPN客户端","slug":"华为SSLVPN客户端","date":"2021-10-27T05:55:53.000Z","updated":"2021-10-27T06:03:33.606Z","comments":true,"path":"2021/10/27/hua-wei-sslvpn-ke-hu-duan/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/hua-wei-sslvpn-ke-hu-duan/","excerpt":"","text":"工具名称secoclient工具介绍 secoclient-android-7.0.2.26.apk //用于Aandroidhttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-android-7.0.2.26.apk secoclient-iOS-7.0.2.26.ipa//用于ioshttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-iOS-7.0.2.26.ipa secoclient-linux-32-7.0.2.26.run//用于linux 32bithttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-linux-32-7.0.2.26.run secoclient-linux-64-7.0.2.26.run//用于linux 64nethttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-linux-64-7.0.2.26.run secoclient-macosx-7.0.2.26.tar.gz用于macOShttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-macosx-7.0.2.26.tar.gz secoclient-win-32-7.0.2.26.exe//用于windows32bithttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-win-32-7.0.2.26.exe secoclient-win-64-7.0.2.26.exe//用于windows64bithttp://www.corem.com.cn/sites/default/files/tools/secoclient/secoclient-win-64-7.0.2.26.exe","categories":[],"tags":[],"author":"张存"},{"title":"vim删除空行和注释","slug":"vim删除空行和注释","date":"2021-10-27T05:48:08.000Z","updated":"2021-10-27T05:48:54.349Z","comments":true,"path":"2021/10/27/vim-shan-chu-kong-xing-he-zhu-shi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/vim-shan-chu-kong-xing-he-zhu-shi/","excerpt":"","text":"删除空行 :g/^$/d删除空行以及只有空格的行 :g/^\\s*$/d删除以 # 开头或 空格# 或 tab#开头的行 :g/^\\s*#/d对于 php.ini 配置文件，注释为 ; 开头 :g/^\\s*;/d使用正则表达式删除行 如果当前行包含 bbs ，则删除当前行 :/bbs/d删除从第二行到包含 bbs 的区间行 :2,/bbs/d删除从包含 bbs 的行到最后一行区间的行 :/bbs/,$d删除所有包含 bbs 的行 :g/bbs/d删除匹配 bbs 且前面只有一个字符的行 :g/.bbs/d删除匹配 bbs 且以它开头的行 :g/^bbs/d删除匹配 bbs 且以它结尾的行 :g/bbs$/d.ini 的注释是以 ; 开始的，如果注释不在行开头，那么删除 ; 及以后的字符 :%s/;.+//g删除 # 之后所有字符 %s/#.*//g","categories":[],"tags":[],"author":"张存"},{"title":"会计帮：“等我做会计发财了，就跟你离婚！”","slug":"会计帮：“等我做会计发财了，就跟你离婚！”","date":"2021-10-27T05:45:35.000Z","updated":"2021-10-27T05:45:47.939Z","comments":true,"path":"2021/10/27/hui-ji-bang-deng-wo-zuo-hui-ji-fa-cai-liao-jiu-gen-ni-chi-hun/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/hui-ji-bang-deng-wo-zuo-hui-ji-fa-cai-liao-jiu-gen-ni-chi-hun/","excerpt":"","text":"0 1 “等我做会计发财了，就和你离婚” 他淡淡地说 听完后，她心里暖暖的， 她想，没有比这更天长地久。 海枯石烂的承诺了。 （因为她深知，做会计的永远也不会发财） ——2018年度最佳微小说奖 0 2 “等我干财务发财了，我就买房和你结婚” 他暖暖地说， 听完后，她心里拔凉拔凉的！ 她想，这大概是最婉转的分手了。 （因为她深知，干财务的永远也不会发财） ——2018最佳微型小说提名奖 0 3 一位做会计的结婚不久，与几个朋友喝酒，醉倒后不省人事。被抬回家后，老婆试着用各种办法给他醒酒，都无济于事，于是打电话询问他的同事。同事说，我给他邮箱发一个报表，突然老公手机短信微信邮件同时响了，只见男人噌的一下从床上蹦起来，精神抖擞，大喊：“报表又出问题了？”老婆此时已泪流满面！原来老公养家真不容易！ ——致敬财会行业奉献青春、挥洒热血的兄弟姐妹 0 4 在财会这个行业，在行业内都称呼为“某经理”；李经理、陈经理、张经理，其实，就是一个“出报表的”，加班加通宵，吃饭更没规律，只因你要必须时刻保证每个数字都不能有错；连亲人和你见个面都要预约，不知道的人、不了解的人以为你早出晚归外面有娇娘，一年365天日夜没休息以为你是来自星星，赚着卖白菜的钱，操着卖白粉的心！做这行的没有一个会脑痴呆，因为每天大脑都在高速运转，回来了还要回忆一下整个部门的对照状况。 工作是高端大气上档次，工资是低调奢华接地气！这就是财会人的精神。 0 5 我问大师：“我是做会计的，压力大，吃不好，睡不好，工资少，别人有时间休假，而我却不行，感觉特别累且迷茫，心理堵的慌，大师，我该怎么办？” 禅师右手捂左胸，不语。 我追问大师：“您是说不要抱怨，要问心无愧，要对得起心中梦想，对吗？” 禅师摇了摇头说：“你离我远点，我出家以前就是做这行的！今天听你又说这些，心里堵得慌！ 0 6 有一天，在公园里····· 女：“有三室两厅吗？” 男：“没有！” 女：“有路虎，奥迪吗？” 男：“没有！” 女：“有7位数存款吗？” 男：“没有！” 女：“那你有啥？” 男：“我………” 女转身就要走··· 突然男的说：“我是做会计的” 女立刻回头拉住男的手，满脸崇拜的说道： “你不早说，工作量那么多，压力那么大，你还能活下来，一定是个潜力股，这就够了！够了！” ——这是2018年度最励志的段子！ 0 7 记者问一位大爷说：大爷，您保持年轻的秘诀是什么？ 大爷说：白天出报表，晚上忙加班，一天四包烟，天天吃泡面。 记者：啊？大爷您是做什么工作的？ 大爷：会计。 记者：那大爷您今年高寿？ 大爷：32 0 8 做会计的人吧，表面风光，内心彷徨；容颜未老，心已沧桑；小有成就，郁闷经常；比骡子累，比蚂蚁忙。 ——处理报表的时侯脑袋脱发面容憔悴，为的是多赚点钱回家孝敬父母，照顾妻儿。 如果你身边有做会计的朋友，请多给他一点帮助，因为如今财会这行不赚钱。 吃饭聚会就不要和他AA了，你请他吧； 有时间多陪陪他，约他吃饭，喝酒各种消费时你来买单吧，不要跟他提钱了； 工作压力已经很大，请理解她、包容他、打牌也故意输给他； 临走再塞个万儿八千的红包也行，让他感受到人间的温暖吧； 请紧密陪伴他，生活是相互扶持的！ 不说了，前边有人扔了个咸鸭蛋！！！ 看完以上的段子，你是不是感同身受，哭笑不得呢？ 虽然有一丢丢夸张搞笑的成分在，但是财会行业是真心不容易！每一个财会人都是可亲可敬的超级英雄！","categories":[],"tags":[],"author":"张存"},{"title":"jumpserver 重置用户密码、新建管理员账户以及重置mfa","slug":"jumpserver-重置用户密码以及新建管理员账户","date":"2021-10-27T03:49:37.000Z","updated":"2021-11-05T03:36:30.987Z","comments":true,"path":"2021/10/27/jumpserver-chong-zhi-yong-hu-mi-ma-yi-ji-xin-jian-guan-li-yuan-zhang-hu/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/jumpserver-chong-zhi-yong-hu-mi-ma-yi-ji-xin-jian-guan-li-yuan-zhang-hu/","excerpt":"","text":"进入容器：docker exec -it jms_core /bin/bash 重置密码命令：python manage.py changepassword xxxxpython manage.py changepassword 用户名 手动新建管理员账户： python manage.py createsuperuser –username=xxxxx –email=xxxxxxxxxxxxx jumpserver的mfa重置功能 ，解决jumpserver 某个用户得mfa得账户出现手机丢失，换手机得情况，我们就需要把这个人得mfa码给重置掉。docker exec -it jms_core /bin/bashcd appspython manage.py shell 设置需要修改的用户，xxxx, 修改后，第二次登录就需要重新绑定mfa了 from users.models import Useru = User.objects.get(username=’xxxx’)u.mfa_level=’0’u.otp_secret_key=’’u.save()","categories":[],"tags":[],"author":"张存"},{"title":"HTTP状态码","slug":"HTTP状态码","date":"2021-10-27T03:17:12.000Z","updated":"2021-10-27T03:19:08.559Z","comments":true,"path":"2021/10/27/http-zhuang-tai-ma/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/http-zhuang-tai-ma/","excerpt":"","text":"HTTP状态码当浏览者访问一个网页时，浏览者的浏览器会向网页所在服务器发出请求。当浏览器接收并显示网页前，此网页所在的服务器会返回一个包含HTTP状态码的信息头（server header）用以响应浏览器的请求。 HTTP状态码的英文为HTTP Status Code。 下面是常见的HTTP状态码： 200 - 请求成功301 - 资源（网页等）被永久转移到其它URL404 - 请求的资源（网页等）不存在500 - 内部服务器错误HTTP状态码分类HTTP状态码由三个十进制数字组成，第一个十进制数字定义了状态码的类型，后两个数字没有分类的作用。HTTP状态码共分为5种类型： HTTP状态码分类分类 分类描述1** 信息，服务器收到请求，需要请求者继续执行操作2** 成功，操作被成功接收并处理3** 重定向，需要进一步的操作以完成请求4** 客户端错误，请求包含语法错误或无法完成请求5** 服务器错误，服务器在处理请求的过程中发生了错误HTTP状态码列表: HTTP状态码列表状态码 状态码英文名称 中文描述100 Continue 继续。客户端应继续其请求101 Switching Protocols 切换协议。服务器根据客户端的请求切换协议。只能切换到更高级的协议，例如，切换到HTTP的新版本协议200 OK 请求成功。一般用于GET与POST请求201 Created 已创建。成功请求并创建了新的资源202 Accepted 已接受。已经接受请求，但未处理完成203 Non-Authoritative Information 非授权信息。请求成功。但返回的meta信息不在原始的服务器，而是一个副本204 No Content 无内容。服务器成功处理，但未返回内容。在未更新网页的情况下，可确保浏览器继续显示当前文档205 Reset Content 重置内容。服务器处理成功，用户终端（例如：浏览器）应重置文档视图。可通过此返回码清除浏览器的表单域206 Partial Content 部分内容。服务器成功处理了部分GET请求300 #Multiples# Choices 多种选择。请求的资源可包括多个位置，相应可返回一个资源特征与地址的列表用于用户终端（例如：浏览器）选择301 Moved Permanently 永久移动。请求的资源已被永久的移动到新URI，返回信息会包括新的URI，浏览器会自动定向到新URI。今后任何新的请求都应使用新的URI代替302 Found 临时移动。与301类似。但资源只是临时被移动。客户端应继续使用原有URI303 See Other 查看其它地址。与301类似。使用GET和POST请求查看304 Not Modified 未修改。所请求的资源未修改，服务器返回此状态码时，不会返回任何资源。客户端通常会缓存访问过的资源，通过提供一个头信息指出客户端希望只返回在指定日期之后修改的资源305 Use Proxy 使用代理。所请求的资源必须通过代理访问306 Unused 已经被废弃的HTTP状态码307 Temporary Redirect 临时重定向。与302类似。使用GET请求重定向400 Bad Request 客户端请求的语法错误，服务器无法理解401 Unauthorized 请求要求用户的身份认证402 Payment Required 保留，将来使用403 Forbidden 服务器理解请求客户端的请求，但是拒绝执行此请求404 Not Found 服务器无法根据客户端的请求找到资源（网页）。通过此代码，网站设计人员可设置”您所请求的资源无法找到”的个性页面405 Method Not Allowed 客户端请求中的方法被禁止406 Not Acceptable 服务器无法根据客户端请求的内容特性完成请求407 Proxy Authentication Required 请求要求代理的身份认证，与401类似，但请求者应当使用代理进行授权408 Request Time-out 服务器等待客户端发送的请求时间过长，超时409 Conflict 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突410 Gone 客户端请求的资源已经不存在。410不同于404，如果资源以前有现在被永久删除了可使用410代码，网站设计人员可通过301代码指定资源的新位置411 Length Required 服务器无法处理客户端发送的不带Content-Length的请求信息412 Precondition Failed 客户端请求信息的先决条件错误413 Request Entity Too Large 由于请求的实体过大，服务器无法处理，因此拒绝请求。为防止客户端的连续请求，服务器可能会关闭连接。如果只是服务器暂时无法处理，则会包含一个Retry-After的响应信息414 Request-URI Too Large 请求的URI过长（URI通常为网址），服务器无法处理415 Unsupported Media Type 服务器无法处理请求附带的媒体格式416 Requested range not satisfiable 客户端请求的范围无效417 Expectation Failed 服务器无法满足Expect的请求头信息500 Internal Server Error 服务器内部错误，无法完成请求501 Not Implemented 服务器不支持请求的功能，无法完成请求502 Bad Gateway 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应503 Service Unavailable 由于超载或系统维护，服务器暂时的无法处理客户端的请求。延时的长度可包含在服务器的Retry-After头信息中504 Gateway Time-out 充当网关或代理的服务器，未及时从远端服务器获取请求505 HTTP Version not supported 服务器不支持请求的HTTP协议的版本，无法完成处理| 排序方法 | 平均情况 | 最好情况 | 最坏情况 | 辅助空间 | 稳定性 ||:—–|:—–|:—–|:—–|:—–|:—–|| 冒泡排序 | O(n²) | O(nlogn) | O(n²) | O(1) | 稳定 || 简单选择 | O(n²) | O(n²) | O(n²) | O(1) | 稳定 || 直接插入 | O(n²) | O(n) | O(n²) | O(1) | 稳定 || 希尔排序 | O(nlogn)O(n²) | O(n^1.3) | O(n²) | O(1) | 不稳定 || 堆排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(1) | 不稳定 || 归并排序 | O(nlogn) | O(nlogn) | O(nlogn) | O(n) | 不稳定 || 快速排序 | O(nlogn) | O(nlogn) | O(n²) | O(nlogn)O(n) | 不稳定 |","categories":[],"tags":[],"author":"张存"},{"title":"Centos 更改MySQL5.7数据库目录位置","slug":"Centos-更改MySQL5-7数据库目录位置","date":"2021-10-27T03:14:09.000Z","updated":"2021-10-27T03:15:40.280Z","comments":true,"path":"2021/10/27/centos-geng-gai-mysql5-7-shu-ju-ku-mu-lu-wei-zhi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/centos-geng-gai-mysql5-7-shu-ju-ku-mu-lu-wei-zhi/","excerpt":"","text":"Centos 通过yum安装(RPM分发进行安装)MySQL的几个人默认目录如下： 目录 目录内容/usr/bin 客户端程序和脚本/usr/sbin mysqld服务器/var/lib/mysql 日志文件，数据库文件/usr/share/mysql 错误消息和字符集文件/etc/my.cnf 配置文件假如要把目录移到/home/data下需要进行下面几步： 1、home目录下建立data目录 1 mkdir -p /home/data &amp; cd /home/data/ 2、把MySQL服务进程停掉 1 [root@localhost data]# mysqladmin -u root -p shutdown2 Enter password: 3、把/var/lib/mysql整个目录移到/home/data 1 mv /var/lib/mysql /home/data/ 或者 1 cp -R /var/lib/mysql /home/data/ 这样就把MySQL的数据文件移动到了/home/data/mysql下 4、设置/home/data/下mysql文件夹的属主和权限 1 chown -R mysql:mysql /home/data/mysql复制代码1 [root@localhost data]# ls2 mysql3 [root@localhost data]# ll4 drwxr-x–x. 5 root root# 4096 10月 31 04:03 mysql5 [root@localhost data]# chown -R mysql:mysql /home/data/mysql6 [root@localhost data]# ll7 drwxr-x–x. 5 mysql mysql# 4096 10月 31 04:03 mysql复制代码 5、修改配置文件/etc/my.cnf 为保证MySQL能够正常工作，需要指明mysql.sock文件的产生位置。修改socket=/var/lib/mysql/mysql.sock一行中等号右边的值为：/home/data/mysql/mysql.sock 以及修改datadir为/home/data/mysql操作如下： 1 #datadir=/var/lib/mysql2 datadir=/home/data/mysql3 #socket=/var/lib/mysql/mysql.sock4 socket=/home/data/mysql/mysql.sock 6、重新启动MySQL服务 1 service mysqld start 往往坑总是一个接着一个。 启动异常 以上截图看不到任何问题，我们来查看一下日志 1 tail -n 1000 /var/log/mysqld.log -f 详细的日志信息 1 2017-10-31T08:48:06.533321Z 0 [Warning] Can’t create test file /home/data/mysql/localhost.lower-test2 2017-10-31T08:48:06.533401Z 0 [Note] /usr/sbin/mysqld (mysqld 5.7.20) starting as process 25325 …3 2017-10-31T08:48:06.536585Z 0 [Warning] Can’t create test file /home/data/mysql/localhost.lower-test4 2017-10-31T08:48:06.536617Z 0 [Warning] Can’t create test file /home/data/mysql/localhost.lower-test 解决：设置一个SELinux即可 1 setenforce 0 纵然世间炎凉百态！我自依旧初心不改！！","categories":[],"tags":[],"author":"张存"},{"title":"Nginx的四层和七层代理","slug":"Nginx的四层和七层代理","date":"2021-10-27T03:11:12.000Z","updated":"2021-10-27T03:11:57.773Z","comments":true,"path":"2021/10/27/nginx-de-si-ceng-he-qi-ceng-dai-li/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/nginx-de-si-ceng-he-qi-ceng-dai-li/","excerpt":"","text":"理论部分： 所谓四层负载均衡，也就是主要通过报文中的目标地址和端口，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器，它一般走的是tcp，udp协议 所谓七层负载均衡，也称为“内容交换”，也就是主要通过报文中的真正有意义的应用层内容，再加上负载均衡设备设置的服务器选择方式，决定最终选择的内部服务器，他走的是http协议。 四层代理实例： 和http同等级：所以一般只在http上面一段设置， stream { server { listen 30028; proxy_pass appserver; } upstream appserver{ server 10.0.0.12:8080 weight=2; server 10.0.0.13:8080 weight=2; }} 七层代理实例： 在http段里设置： upstream appserver { server 10.0.0.12:8080 weight=2; server 10.0.0.13:8080 weight=2;}server { listen 80; server_name localhost; location / { proxy_pass http://appserver; }","categories":[],"tags":[],"author":"张存"},{"title":"Docker利用Dockerfile构建tomcat7-jdk8环境","slug":"Docker利用Dockerfile构建tomcat7-jdk8环境","date":"2021-10-27T02:36:53.000Z","updated":"2021-10-27T02:37:38.905Z","comments":true,"path":"2021/10/27/docker-li-yong-dockerfile-gou-jian-tomcat7-jdk8-huan-jing/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/docker-li-yong-dockerfile-gou-jian-tomcat7-jdk8-huan-jing/","excerpt":"","text":"Dockerfile构建tomcat7-jdk8环境Dockerfile常用命令(1) FROM: 制作image时依据的基本image(2) RUN：制作image时执行的命令，一般在Dockerfile中多次出现(3) CMD：启动docker时执行的命令，在Dockerfile中只出现一次(4) ENV：设置环境变量(5) COPY：制作image时，将文件系统中的文件复制到Docker镜像中(6) WORKDIR：设置工作目录(7) EXPOSE：设置向外暴露的端口(8) VOLUME：设置容器与外界映射的目录[1].创建dockerfile存放目录mkdir -p /app/Docker/Tomcatcd /app/Docker/Tomcat/ [2].编写Dockerfile文件cat&gt;/app/Docker/Tomcat/Dockerfile&lt;&lt;EOFFROM centos#指定基础镜像来自于哪里MAINTAINER Tomcat7 images#进行说明ADD jdk1.8.0_144/ /opt/jdk#添加jdkADD apache-tomcat-7.0.75 /opt/tomcat#添加tomcat#COPY xxx.war /opt/tomcat/webapps/#war包可进行挂在或者直接拷贝EXPOSE 8080#开发端口RUN /usr/bin/sed -i ‘107a JAVA_HOME=/opt/jdk’ /opt/tomcat/bin/catalina.sh#配置环境变量CMD [“/bin/bash”,”-c”,”/opt/tomcat/bin/catalina.sh run”]#开启TomcatEOF [3].构建镜像docker build -t tomcat7:01 /app/Docker/Tomcat[4].启动容器docker run -d –name “math_tomcat01” -p8080:8080 tomcat7:01docker ps[5].测试,并查看日志测试：curl 127.0.0.1:8080 -I查看日志：docker logs -f math_tomcat01[6].查看负载docker stats tomcat01[7].利用数据方式启动 mkdir -p /app/tomcatcd /app/tomcatdocker run -d –name “tomcat01” tomcat:01#拷贝出需要后续配置的文件（保持与镜像内文件格式相同）docker cp -a tomcat01:/opt/tomcat/webapps ./docker cp -a tomcat01:/opt/tomcat/logs ./docker cp -a tomcat01:/opt/tomcat/bin ./docker cp -a tomcat01:/opt/tomcat/conf ./docker rm -f tomcat01echo “欢迎使用tomcat7-jdk8”&gt;&gt;/app/data/tomcat/webapps/ROOT/index.html创建数据卷:docker run –name “web_data” -v /app/data/tomcat/webapps:/opt/tomcat/webapps -v /app/data/tomcat/bin:/opt/tomcat/bin -v /app/data/tomcat/conf:/opt/tomcat/conf -v /app/data/tomcat/logs:/opt/tomcat/logs centos创建tomcat容器启动:docker run -d -p8080:8080 –name “tomcat” –volumes-from web_data tomcat:01","categories":[],"tags":[],"author":"张存"},{"title":"linux系统负载检查方法","slug":"linux系统负载检查方法","date":"2021-10-27T02:27:11.000Z","updated":"2021-10-27T02:33:16.816Z","comments":true,"path":"2021/10/27/linux-xi-tong-fu-zai-jian-cha-fang-fa/","link":"","permalink":"https://blog.zhangcun.store/2021/10/27/linux-xi-tong-fu-zai-jian-cha-fang-fa/","excerpt":"","text":"1：load Average 1.1：什么是Load？什么是Load Average? Load 就是对计算机干活多少的度量（WikiPedia：the system Load is a measure of the amount of work that a compute system is doing） 简单的说是进程队列的长度。Load Average 就是一段时间（1分钟、5分钟、15分钟）内平均Load。【参考文章：unix Load Average Part1：How It Works】 1.2：查看指令： w or uptime or procinfo or top load average: 0.02, 0.27, 0.17 1 per/minute 5 per/minute 15 per/minute 1.3：如何判断系统是否已经Over Load？对一般的系统来说，根据cpu数量去判断。如果平均负载始终在1.2一下，而你有2颗cup的机器。那么基本不会出现cpu不够用的情况。也就是Load平均要小于Cpu的数量1.4：Load与容量规划（Capacity Planning） 一般是会根据15分钟那个load 平均值为首先。 1.5：Load误解：1：系统load高一定是性能有问题。 真相：Load高也许是因为在进行cpu密集型的计算 2：系统Load高一定是CPU能力问题或数量不够。 真相：Load高只是代表需要运行的队列累计过多了。但队列中的任务实际可能是耗Cpu的，也可能是耗i/0奶子其他因素的。3：系统长期Load高，首先增加CPU 真相：Load只是表象，不是实质。增加CPU个别情况下会临时看到Load下降，但治标不治本。 2：在Load average 高的情况下如何鉴别系统瓶颈。 是CPU不足，还是io不够快造成或是内存不足？ 2.1：查看系统负载vmstatVmstatprocs ———–memory———- —swap– —–io—- –system– —-cpu—-r b swpd free buff cache si so bi bo in cs us sy id wa0 0# 100152 2436 97200 289740 0 1 34 45 99 33 0 0# 99 0 procsr 列表示运行和等待cpu时间片的进程数，如果长期大于1，说明cpu不足，需要增加cpu。b 列表示在等待资源的进程数，比如正在等待I/O、或者内存交换等。cpu 表示cpu的使用状态us 列显示了用户方式下所花费 CPU 时间的百分比。us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，需要考虑优化用户的程序。sy 列显示了内核进程所花费的cpu时间的百分比。这里us + sy的参考值为80%，如果us+sy 大于 80%说明可能存在CPU不足。wa 列显示了IO等待所占用的CPU时间的百分比。这里wa的参考值为30%，如果wa超过30%，说明IO等待严重，这可能是磁盘大量随机访问造成的，也可能磁盘或者磁盘访问控制器的带宽瓶颈造成的(主要是块操作)。id 列显示了cpu处在空闲状态的时间百分比system 显示采集间隔内发生的中断数in 列表示在某一时间间隔中观测到的每秒设备中断数。cs列表示每秒产生的上下文切换次数，如当 cs 比磁盘 I/O 和网络信息包速率高得多，都应进行进一步调查。memoryswpd 切换到内存交换区的内存数量(k表示)。如果swpd的值不为0，或者比较大，比如超过了100m，只要si、so的值长期为0，系统性能还是正常free 当前的空闲页面列表中内存数量(k表示)buff 作为buffer cache的内存数量，一般对块设备的读写才需要缓冲。cache: 作为page cache的内存数量，一般作为文件系统的cache，如果cache较大，说明用到cache的文件较多，如果此时IO中bi比较小，说明文件系统效率比较好。swapsi 由内存进入内存交换区数量。so由内存交换区进入内存数量。IObi 从块设备读入数据的总量（读磁盘）（每秒kb）。bo 块设备写入数据的总量（写磁盘）（每秒kb）这里我们设置的bi+bo参考值为1000，如果超过1000，而且wa值较大应该考虑均衡磁盘负载，可以结合iostat输出来分析。 2.2：查看磁盘负载iostat每隔2秒统计一次磁盘IO信息，直到按Ctrl+C终止程序，-d 选项表示统计磁盘信息， -k 表示以每秒KB的形式显示，-t 要求打印出时间信息，2 表示每隔 2 秒输出一次。第一次输出的磁盘IO负载状况提供了关于自从系统启动以来的统计信息。随后的每一次输出则是每个间隔之间的平均IO负载状况。 #iostat -x 1 10Linux 2.6.18-92.el5xen 02/03/2009avg-cpu: %user %nice %system %iowait %steal %idle 1.10 0.00 4.82 39.54 0.07 54.46Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s avgrq-sz avgqu-sz await svctm %util rrqm/s: 每秒进行 merge 的读操作数目。即 delta(rmerge)/s wrqm/s: 每秒进行 merge 的写操作数目。即 delta(wmerge)/s r/s: 每秒完成的读 I/O 设备次数。即 delta(rio)/s w/s: 每秒完成的写 I/O 设备次数。即 delta(wio)/s rsec/s: 每秒读扇区数。即 delta(rsect)/s wsec/s: 每秒写扇区数。即 delta(wsect)/s rkB/s: 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算) wkB/s: 每秒写K字节数。是 wsect/s 的一半。(需要计算) avgrq-sz: 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio) avgqu-sz: 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。 await: 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio) svctm: 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio) %util: 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒) 如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘 可能存在瓶颈。 idle小于70% IO压力就较大了,一般读取速度有较多的wait. 同时可以结合vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高) 另外还可以参考 一般: svctm &lt; await (因为同时等待的请求的等待时间被重复计算了)， svctm的大小一般和磁盘性能有关:CPU/内存的负荷也会对其有影响，请求过多也会间接导致 svctm 的增加。 await: await的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式。 如果 svctm 比较接近 await，说明I/O 几乎没有等待时间； 如果 await 远大于 svctm，说明 I/O队列太长，应用得到的响应时间变慢， 如果响应时间超过了用户可以容许的范围，这时可以考虑更换更快的磁盘，调整内核 elevator算法，优化应用，或者升级 CPU。 队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。 别人一个不错的例子.(I/O 系统 vs. 超市排队) 举一个例子，我们在超市排队 checkout 时，怎么决定该去哪个交款台呢? 首当是看排的队人数，5个人总比20人要快吧?除了数人头，我们也常常看看前面人购买的东西多少，如果前面有个采购了一星期食品的大妈，那么可以考虑换个队排了。还有就是收银员的速度了，如果碰上了连钱都点不清楚的新手，那就有的等了。另外，时机也很重要，可能 5分钟前还人满为患的收款台，现在已是人去楼空，这时候交款可是很爽啊，当然，前提是那过去的 5 分钟里所做的事情比排队要有意义(不过我还没发现什么事情比排队还无聊的)。 I/O 系统也和超市排队有很多类似之处: r/s+w/s 类似于交款人的总数 平均队列长度(avgqu-sz)类似于单位时间里平均排队人的个数 平均服务时间(svctm)类似于收银员的收款速度 平均等待时间(await)类似于平均每人的等待时间 平均I/O数据(avgrq-sz)类似于平均每人所买的东西多少 I/O 操作率 (%util)类似于收款台前有人排队的时间比例。 我们可以根据这些数据分析出 I/O 请求的模式，以及 I/O 的速度和响应时间。 下面是别人写的这个参数输出的分析 #iostat -x 1 avg-cpu: %user %nice %sys %idle 16.24 0.00 4.31 79.44 Device: rrqm/s wrqm/s r/s w/s rsec/s wsec/s rkB/s wkB/s avgrq-sz avgqu-sz await svctm %util /dev/cciss/c0d0 0.00 44.90 1.02 27.55 8.16 579.59 4.08 289.80 20.57 22.35 78.21 5.00 14.29 /dev/cciss/c0d0p1 0.00 44.90 1.02 27.55 8.16 579.59 4.08 289.80 20.57 22.35 78.21 5.00 14.29 /dev/cciss/c0d0p2 上面的 iostat 输出表明秒有 28.57 次设备 I/O 操作: 总IO(io)/s = r/s(读) +w/s(写) = 1.02+27.55 = 28.57 (次/秒) 其中写操作占了主体 (w:r = 27:1)。 平均每次设备 I/O 操作只需要 5ms 就可以完成，但每个 I/O 请求却需要等上 78ms，为什么? 因为发出的 I/O 请求太多 (每秒钟约 29 个)，假设这些请求是同时发出的，那么平均等待时间可以这样计算: 平均等待时间 = 单个 I/O 服务时间 * ( 1 + 2 + … + 请求总数-1) / 请求总数 应用到上面的例子: 平均等待时间 = 5ms * (1+2+…+28)/29 = 70ms，和 iostat 给出的78ms 的平均等待时间很接近。这反过来表明 I/O 是同时发起的。 每秒发出的 I/O 请求很多 (约 29 个)，平均队列却不长 (只有 2 个 左右)，这表明这 29 个请求的到来并不均匀，大部分时间 I/O 是空闲的。 一秒中有 14.29% 的时间 I/O 队列中是有请求的，也就是说，85.71% 的时间里 I/O 系统无事可做，所有 29 个 I/O 请求都在142毫秒之内处理掉了。 delta(ruse+wuse)/delta(io) = await = 78.21 =&gt; delta(ruse+wuse)/s=78.21 * delta(io)/s = 78.21*28.57 =2232.8，表明每秒内的I/O请求总共需要等待2232.8ms。所以平均队列长度应为 2232.8ms/1000ms = 2.23，而iostat 给出的平均队列长度 (avgqu-sz) 却为 22.35，为什么?! 因为 iostat 中有 bug，avgqu-sz值应为 2.23，而不是 22.35。","categories":[],"tags":[],"author":"张存"},{"title":"Linux服务器下shell脚本加密与破解方法盘点","slug":"Linux服务器下shell脚本加密与破解方法盘点","date":"2021-10-26T10:49:28.000Z","updated":"2021-10-26T10:51:58.914Z","comments":true,"path":"2021/10/26/linux-fu-wu-qi-xia-shell-jiao-ben-jia-mi-yu-po-jie-fang-fa-pan-dian/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/linux-fu-wu-qi-xia-shell-jiao-ben-jia-mi-yu-po-jie-fang-fa-pan-dian/","excerpt":"","text":"当前服务器服务器操作系统主要分为：WINDOWS、LINUX、NETWARE、UNIX四大流派，而Linux系统深受喜爱，今天我们就来盘点Linux系统的shell脚本加密与解密方法。假设有hanming.com.sh脚本。我们要对其进行加密， 废话不多，开始由简单到复杂的介绍。 一、gzexe压缩加密1、加密方法执行“gzexe hanming.com.sh”，出现“hanming.com.sh”（密文）和“hanming.com.sh~”（明文）两个文件，其hanming.com.sh就是加密好的脚本了。 2、解密方法就以刚才加密的脚本进行解密，此时我们需要删除刚才的原文文件hanming.com.sh~，直接执行“rm hanming.com.sh”来进行删除，删除的原因是防止干扰大家。 (1)加密的脚本存在已经存在于目录“/root/”下，我们直接执行“gzexe -d hanming.com.sh”，此时执行“ls”发现也出现了“hanming.com.sh”（明文）和“hanming.com.sh~”（密文）两个文件，hanming.com.sh即解密好的脚本。 二、shc加密解密1、加密方法(1)安装，依次执行下面代码进行安装。sudo add-apt-repository ppa:neurobin/ppasudo apt-get update sudo apt-get install shc 上方命令不能安装可以执行下方代码wget -q http://www.datsi.fi.upm.es/~frosal/sources/shc-3.8.9.tgztar zxvf shc-3.8.9.tgzcd shc-3.8.9 make (2)加密环节 shc -v -r -T -f hanming.com.sh 说明：hanming.com.sh是原来脚本，hanming.com.sh.x的已经编译后的二进制可执行文件，而hanming.com.sh.x.c 的是转化的C语言源文件。2、解密方法 使用unshc.sh脚本解密 wget https://raw.githubusercontent.com/yanncam/UnSHc/master/latest/unshc.sh chmod 777 ./unshc.sh . /unshc.sh hanming.com.sh.x -o hanming.com.sh 说明：“hanming.com.sh.x”是加密的脚本名，而“hanming.com.sh”是明文 三、upx加密解密1、加密方法 (1)下载 wget https://github.com/upx/upx/releases/download/v3.95/upx-3.95-amd64_linux.tar.xz tar vxf upx-3.95-amd64_linux.tar.xz cd upx-3.95-amd64_linux chmod 777 ./upx (2)下次需要使用先执行 cd upx-3.95-amd64_linux (3)加密环节 ./upx /root/hanming.com.sh 此外，upx还能加密后变异一下，让其不能使用脚本解密，但也能够手脱upx加密。 2、解密方法 cd upx-3.95-amd64_linux ./upx -d /root/hanming.com.sh 综合的加密解密手段1、加密方法先gzexe加密，再shc加密，最后upx需要注意的是进行了upx加密的脚本不能进行shc加密2、解密方法upx解密→shc解密→gzexe解密 综合来讲，市面上的加密就这几种，防小白，但也不安全。需要更安全的脚本请使用C语言写脚本，有句话说得好，shell能做的，C语言都能做，为什么呢？因为shell是一个用C语言编写的程序，它是用户使用 Linux 的桥梁，既然是C语言编写的，那么shell能做的，C语言当然都能做到。通过C语言编写程序再编译的脚本会更加的安全。","categories":[],"tags":[],"author":"张存"},{"title":"dpkg 批量卸载","slug":"dpkg-批量卸载","date":"2021-10-26T10:42:39.000Z","updated":"2021-10-26T10:42:44.968Z","comments":true,"path":"2021/10/26/dpkg-pi-liang-xie-zai/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/dpkg-pi-liang-xie-zai/","excerpt":"","text":"dpkg -l |grep deepin|awk ‘{print $2}’|xargs sudo dpkg -P","categories":[],"tags":[],"author":"张存"},{"title":"ES-9200端口与9300端口","slug":"ES-9200端口与9300端口","date":"2021-10-26T10:37:09.000Z","updated":"2021-10-26T10:37:11.682Z","comments":true,"path":"2021/10/26/es-9200-duan-kou-yu-9300-duan-kou/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/es-9200-duan-kou-yu-9300-duan-kou/","excerpt":"","text":"（1）Elasticsearch是基于lucene的全文检索服务器 （1）9300：ES节点之间的通讯使用 （2）9200：ES节点和外部通讯使用","categories":[],"tags":[],"author":"张存"},{"title":"linux安装ping","slug":"linux安装ping","date":"2021-10-26T10:09:52.000Z","updated":"2021-10-26T10:11:55.242Z","comments":true,"path":"2021/10/26/linux-an-zhuang-ping/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/linux-an-zhuang-ping/","excerpt":"","text":"使用docker仓库下载的ubuntu 14.04 镜像。里面精简的连 ping 命令都没有。google 百度都搜索不到ping 命令在哪个包里。 努力找了半天，在一篇文章的字里行间发现了 ping 的来历～ root@node2:/# apt-get install inetutils-ping 还有ifconfig可以用 apt-get install net-tools 来安装～","categories":[],"tags":[],"author":"张存"},{"title":"docker删除状态为Exited的容器","slug":"docker删除状态为Exited的容器","date":"2021-10-26T02:55:58.000Z","updated":"2021-10-26T02:56:01.381Z","comments":true,"path":"2021/10/26/docker-shan-chu-zhuang-tai-wei-exited-de-rong-qi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/docker-shan-chu-zhuang-tai-wei-exited-de-rong-qi/","excerpt":"","text":"docker rm $(docker ps -qf status=exited)","categories":[],"tags":[],"author":"张存"},{"title":"MongoDB给数据库创建用户","slug":"MongoDB给数据库创建用户","date":"2021-10-26T02:39:08.000Z","updated":"2021-10-26T02:39:31.604Z","comments":true,"path":"2021/10/26/mongodb-gei-shu-ju-ku-chuang-jian-yong-hu/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/mongodb-gei-shu-ju-ku-chuang-jian-yong-hu/","excerpt":"","text":"一.先以非授权的模式启动MongoDB非授权： linux/Mac : mongod -f /mongodb/etc/mongo.conf windows : mongod –config c:\\mongodb\\etc\\mongo.conf 或者 net start mongodb （前提是mongo安装到了服务里面） 备注： /mongodb/etc/mongo.conf 位mongo配置文件所在的地址 授权： mongod -f /mongodb/etc/mongo.conf –auth 备注： 1.–auth代表授权启动，需要帐号密码才能访问 2.auth=true可以加到mongo.conf配置文件里面去进行统一管理 二.创建管理员1.通过非授权的方式启动mongo 2.创建admin数据库 use admin 3.添加管理员用户db.createUser({user:”admin”,pwd:”123456”,roles:[“root”]}) 备注：用户名和密码可随意定 4.认证 db.auth(“admin”, “123456”) 三.以授权的方式启动Mongo,给使用的数据库添加用户1.切换数据库 use test 2.创建用户 db.createUser({user: “root”, pwd: “123456”, roles: [{ role: “dbOwner”, db: “test” }]}) 3.通过客户端连接test数据库","categories":[],"tags":[],"author":"张存"},{"title":"docker动态查看日志最后100行","slug":"docker动态查看日志最后100行","date":"2021-10-26T02:22:30.000Z","updated":"2021-10-26T02:23:44.555Z","comments":true,"path":"2021/10/26/docker-dong-tai-cha-kan-ri-zhi-zui-hou-100-xing/","link":"","permalink":"https://blog.zhangcun.store/2021/10/26/docker-dong-tai-cha-kan-ri-zhi-zui-hou-100-xing/","excerpt":"","text":"docker logs -f -t –tail=100 c337e9df72a7指的是实时查看容器id为c337e9df72a7的最后100行日志 $ docker logs [OPTIONS] CONTAINER Options: –details 显示更多的信息 -f, –follow 跟踪实时日志 –since string 显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟） –tail string 从日志末尾显示多少行日志， 默认是all -t, –timestamps 显示时间戳 –until string 显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟） 例子： 查看指定时间后的日志，只显示最后100行： $ docker logs -f -t –since=”2018-02-08” –tail=100 CONTAINER_ID 查看最近30分钟的日志: $ docker logs –since 30m CONTAINER_ID 查看某时间之后的日志： $ docker logs -t –since=”2018-02-08T13:23:37” CONTAINER_ID 查看某时间段日志： $ docker logs -t –since=”2018-02-08T13:23:37” –until “2018-02-09T12:23:37” CONTAINER_ID","categories":[],"tags":[],"author":"张存"},{"title":"使用docker-compose快速搭建本地ElasticSearch7和Elastichd环境","slug":"使用docker-compose快速搭建本地ElasticSearch7和Elastichd环境","date":"2021-10-25T05:40:03.000Z","updated":"2021-10-25T05:57:43.520Z","comments":true,"path":"2021/10/25/shi-yong-docker-compose-kuai-su-da-jian-ben-di-elasticsearch7-he-elastichd-huan-jing/","link":"","permalink":"https://blog.zhangcun.store/2021/10/25/shi-yong-docker-compose-kuai-su-da-jian-ben-di-elasticsearch7-he-elastichd-huan-jing/","excerpt":"","text":"先编写docker-compose.es.yml version: &#39;3&#39; services: elasticsearch: image: elasticsearch:7.5.1 container_name: elasticsearch networks: - net-es volumes: - ../data/elasticsearch/data:/usr/share/elasticsearch/data #这里将elasticsearch的数据文件映射本地，以保证下次如果删除了容器还有数据 environment: - discovery.type=single-node ports: - &quot;9200:9200&quot; elastichd: image: containerize/elastichd:latest container_name: elasticsearch-hd networks: - net-es ports: - &quot;9800:9800&quot; depends_on: - &quot;elasticsearch&quot; links: - &quot;elasticsearch:demo&quot; #这里要注意，es和eshd要在相同网络才能被links networks: net-es: external: false 启动代码：docker-compose -f docker-compose.es.yml up 启动后访问http://localhost:9800打开elastichd 输入elasticsearch地址点connect即可","categories":[],"tags":[],"author":"张存"},{"title":"MySQL创建用户与授权","slug":"MySQL创建用户与授权","date":"2021-10-25T05:26:07.000Z","updated":"2021-10-25T05:30:18.243Z","comments":true,"path":"2021/10/25/mysql-chuang-jian-yong-hu-yu-shou-quan/","link":"","permalink":"https://blog.zhangcun.store/2021/10/25/mysql-chuang-jian-yong-hu-yu-shou-quan/","excerpt":"","text":"一. 创建用户 命令:CREATE USER ‘username‘@’host’ IDENTIFIED BY ‘password’; 说明：username：你将创建的用户名host：指定该用户在哪个主机上可以登陆，如果是本地用户可用localhost，如果想让该用户可以从任意远程主机登陆，可以使用通配符%password：该用户的登陆密码，密码可以为空，如果为空则该用户可以不需要密码登陆服务器例子：CREATE USER ‘dog‘@’localhost’ IDENTIFIED BY ‘123456’;CREATE USER ‘pig‘@’192.168.1.101_’ IDENDIFIED BY ‘123456’;CREATE USER ‘pig‘@’%’ IDENTIFIED BY ‘123456’;CREATE USER ‘pig‘@’%’ IDENTIFIED BY ‘’;CREATE USER ‘pig‘@’%’; 二. 授权: 命令:GRANT privileges ON databasename.tablename TO ‘username‘@’host’ 说明:privileges：用户的操作权限，如SELECT，INSERT，UPDATE等，如果要授予所的权限则使用ALLdatabasename：数据库名tablename：表名，如果要授予该用户对所有数据库和表的相应操作权限则可用表示，如.*例子:GRANT SELECT, INSERT ON test.user TO ‘pig‘@’%’;GRANT ALL ON . TO ‘pig‘@’%’;GRANT ALL ON maindataplus.* TO ‘pig‘@’%’;注意:用以上命令授权的用户不能给其它用户授权，如果想让该用户可以授权，用以下命令:GRANT privileges ON databasename.tablename TO ‘username‘@’host’ WITH GRANT OPTION; 尝试连接，连接成功 三.设置与更改用户密码 命令:SET PASSWORD FOR ‘username‘@’host’ = PASSWORD(‘newpassword’); 如果是当前登陆用户用:SET PASSWORD = PASSWORD(“newpassword”);例子:SET PASSWORD FOR ‘pig‘@’%’ = PASSWORD(“123456”); 四. 撤销用户权限命令:REVOKE privilege ON databasename.tablename FROM ‘username‘@’host’;说明:privilege, databasename, tablename：同授权部分 例子:REVOKE SELECT ON . FROM ‘pig‘@’%’;注意:假如你在给用户‘pig‘@’%’授权的时候是这样的（或类似的）：GRANT SELECT ON test.user TO ‘pig‘@’%’，则在使用REVOKE SELECT ON . FROM ‘pig‘@’%’;命令并不能撤销该用户对test数据库中user表的SELECT 操作。相反，如果授权使用的是GRANT SELECT ON . TO ‘pig‘@’%’;则REVOKE SELECT ON test.user FROM ‘pig‘@’%’;命令也不能撤销该用户对test数据库中user表的Select权限。 具体信息可以用命令SHOW GRANTS FOR ‘pig‘@’%’; 查看。 五.删除用户命令:DROP USER ‘username‘@’host’;","categories":[],"tags":[],"author":"张存"},{"title":"Tomcat项目自动部署脚本","slug":"Tomcat项目自动部署脚本","date":"2021-10-18T11:47:29.000Z","updated":"2021-10-18T11:49:26.783Z","comments":true,"path":"2021/10/18/tomcat-xiang-mu-zi-dong-bu-shu-jiao-ben/","link":"","permalink":"https://blog.zhangcun.store/2021/10/18/tomcat-xiang-mu-zi-dong-bu-shu-jiao-ben/","excerpt":"","text":"一般情况下使用的Linux环境都是加固的，root路径只有超级管理员权限才能进入。我们新建一个自己的用户，在/home下会有一个用户目录，传输war包都放在这个目录下，此时不动webapps文件下的内容，传输包的时候，项目不会中断。 如下是部署脚本deploy.sh： 复制代码#!/bin/bash#自动部署脚本 #tomcat路径tomcatBinPath=/alidata/server/tomcat-7.0.54/bin#war包和脚本目录homepath=/home/baihuidong/DeployApplicationForTomcat echo ‘——–开始部署——–’ #检查war包是否存在cd $homepathif [ $(find ./ -maxdepth 1 -name “*.war”|wc -l) -ne 1 ]; then echo ‘请保证DeployApplicationForTomcat文件中有且只有一个war包！’ exit 1fi #进入tomcat目录cd $tomcatBinPathif [ $? -ne 0 ];then echo ‘请检查tomcat的bin路径是否正确！’ exit 1fiecho “进入tomcat的bin目录：$tomcatBinPath” pid=$(ps -fu whoami|grep “$tomcatBinPath”|grep -v grep|awk ‘{print $2}’)if [ -z “$pid” ];then echo “相关tomcat进程已关闭:$pid”else ./shutdown.sh #停止tomcat服务 sleep 8 kill -9 $pid echo ‘成功关闭tomcat服务！’fi #清空oldWarPackage目录cd $homepathif [ $? -ne 0 ];then echo ‘请检查homepath路径是否正确或者是否有权限进入！’ exit 1fi if [ -d $homepath/oldWarPackage ];then echo “oldWarPackage文件夹存在！” rm -rf $homepath/oldWarPackage/*else echo “oldWarPackage文件夹不存在！” mkdir $homepath/oldWarPackagefi cd $tomcatBinPath/../webapps/if [ $? -ne 0 ];then echo ‘请检查webapps路径是否正确！’ exit 1fiecho “进入webapps目录：$(pwd)” cp *.war $homepath/oldWarPackage/if [ $? -ne 0 ];then echo ‘请检查webapps下是否有war包或者oldWarPackage目录是否存在！’ exit 1fi rm -rf *cp $homepath/*.war ./ chown root:root *.warchmod 755 *.war cd $tomcatBinPath./startup.sh echo ‘——–部署结束——–’复制代码若部署中间出错，则使用回滚脚本 回滚脚本rollback.sh： 复制代码#!/bin/bash#回滚脚本 #war包和脚本目录homepath=/home/baihuidong/DeployApplicationForTomcat cd $homepath/oldWarPackageif [ $(find ./ -maxdepth 1 -name “*.war”|wc -l) -ne 1 ]; then echo ‘请保证oldWarPackage文件中有且只有一个war包！’ exit 1fi echo ‘——回滚开始——‘cd ../rm -rf ./.warcp ./oldWarPackage/.war ././deploy.shecho ‘——回滚结束——‘复制代码其实这里的回滚脚本，是重新部署原war包的方案。还有一种方案，就是备份webapps路径下的war包和ROOT文件夹，回滚之后拷贝到webapps下，重启tomcat，这样省去了Tomcat解压war包的时间。 注意： 如果在Linux下使用vim命令编写脚本，需添加相关执行权限才能被执行（文件名变成绿色）。 如果在windows下编写的sh脚本，传到Linux上，需要增加相关执行权限，且需要格式转化 使用如下命令进行转换： chmod 755 deploy.sh //设置执行权限dos2unix deploy.sh //格式转化busybox dos2unix deploy.sh //如果提示dos2unix命令找不到，使用这条还可以使用vim进行格式转化。","categories":[],"tags":[],"author":"张存"},{"title":"Linux 常用命令（一）：操作文件命令","slug":"Linux-常用命令（一）：操作文件命令","date":"2021-10-18T11:42:20.000Z","updated":"2021-10-18T11:44:29.837Z","comments":true,"path":"2021/10/18/linux-chang-yong-ming-ling-yi-cao-zuo-wen-jian-ming-ling/","link":"","permalink":"https://blog.zhangcun.store/2021/10/18/linux-chang-yong-ming-ling-yi-cao-zuo-wen-jian-ming-ling/","excerpt":"","text":"目录 一、命令的基本格式 1. 命令的提示符 2. 命令的基本格式二、目录操作命令 1．ls命令 2．cd命令 3．pwd命令 4．mkdir命令 5．rmdir命令三、文件操作命令 1．touch命令 2．stat命令 3．cat命令 4．more命令 5．less命令 6．head命令 7．tail命令 8．ln命令四、目录和文件都能操作的命令 1．rm命令 2．cp命令 3．mv命令一、命令的基本格式 命令的提示符[root@localhost ~][]：这是提示符的分隔符号，没有特殊含义。root：显示的是当前的登录用户，超哥现在使用的是root用户登录 。@：分隔符号，没有特殊含义。localhost：当前系统的简写主机名（完整主机名是localhost.localdomain）。~：代表用户当前所在的目录，此例中用户当前所在的目录是家目录。#：命令提示符。超级用户是#，普通用户是$ 命令的基本格式[root@localhost ~]# 命令 [选项] [参数]ls是最常见的目录操作命令，主要作用是显示目录下的内容。 命令名称：ls。英文原意：list。所在路径：/bin/ls。执行权限：所有用户。功能描述：显示目录下的内容。复制代码[root@localhost ~]#ls [选项] [文件名或目录名]选项： -a: 显示所有文件 --color=when: 支持颜色输出，when的值默认是always（总显示颜色），也可以是never（从不显示颜色）和auto（自动） -d：显示目录信息，而不是目录下的文件 -h：人性化显示，按照我们习惯的单位显示文件大小 -i：显示文件的i节点号 -l：长格式显示 复制代码举几个例子： [root@localhost ~]# ls -l总用量 44 -rw——-. 1 root root# 1207 1月 14 18:18 anaconda-ks.cfg#权限引用计数所有者所属组大小文件修改时间文件名 我们已经知道“-l”选项用于 显示文件的详细信息，那么“-l”选项 显示的这7列分别 是什么含义？ 第一列：权限。具体权限的含义将在4.5节中讲解。 第二列：引用计数。文件的引用计数代表该文件的硬链接个数，而目录的引用计数代表该目录有多少个一级子目录。 第三列：所有者，也就是这个文件属于哪个用户。默认所有者是文件的建立用户 第四列：所属组。默认所属组是文件建立用户的有效组，一般情况下就是建立用户的所在组。 第五列：大小。默认单位是字节。 第六列：文件修改时间。文件状态修改时间或文件数据修改时间都会更改这个时间，注意这个时间不是文件的创建时间。 第七列：文件名。选项：是用于调整命令的功能的。参数：是命令的操作对象，如果省略参数，是因为有默认参数 注：选项：是用于调整命令的功能的。参数：是命令的操作对象，如果省略参数，是因为有默认参数 二、目录操作命令1．ls命令见前一小节的内容。 2．cd命令 cd是切换所在目录的命令，这个命令的基本信息如下。 命令名称：cd。 英文原意：change directory。 所在路径：Shell内置命令。 执行权限：所有用户。 功能描述：切换所在目录。2.1cd命令的简化用法特殊符号 作 用 ~ 代表用户的家目录 代表上次所在目录. 代表当前目录.. 代表上级目录 2.2 绝对路径和相对路径 绝对路径：以跟目录为参照物，从根目录开始，一级一级进入目录 相对路径：以当前目录作为参照物，进行目录查找 3．pwd命令 pwd命令是查询所在目录的命令，基本信息如下： 命令名称：pwd英文原意：print name of current/working directory 所在路径：/bin/pwd执行权限：所有用户。 功能描述：查询所在的工作目录。4．mkdir命令 mkdir是创建目录的命令，其基本信息如下。 命令名称：mkdir。英文原意：make directories。 所在路径：/bin/mkdir。 执行权限：所有用户。 功能描述：创建空目录。命令格式 [root@localhost ~]# mkdir [选项] 目录名选项： -p：递归建立所需目录5．rmdir命令 既然有建立目录的命令，就一定会有删除目录的命令rmdir，其基本信息如下。 命令名称：rmdir。 英文原意：remove empty directories。 所在路径：/bin/rmdir。 执行权限：所有用户。 功能描述：删除空目录。命令格式 root@localhost ~]# rmdir [选项] 目录名选项： -p：递归删除目录 注：rmdir命令的作用十分有限，因为只能删除空目录，所以一旦目录中有内容，就会报错。这个命令比较“笨”，所以我们不太常用。后续我们不论删除的是文件还是目录，都会使用rm命令 三、文件操作命令1．touch命令 创建空文件或修改文件时间，这个命令的基本信息如下。 命令名称：touch。 英文原意：change file timestamps。 所在路径：/bin/touch。 执行权限：所有用户。 功能描述：修改文件的时间戳。2．stat命令 stat是查看文件详细信息的命令，而且可以看到文件的这三个时间，其基本信息如下。 命令名称：stat。 英文原意：display file or file system status。 所在路径：/usr/bin/stat。 执行权限：所有用户。功能描述：显示文件或文件系统的详细信息。命令格式 复制代码[root@localhost ~]# stat anaconda-ks.cfg 文件：”anaconda-ks.cfg” 大小：1453 块：8 IO 块：4096 普通文件设备：803h/2051d Inode：33574991 硬链接：1权限：(0600/-rw——-) Uid：( 0/ root) Gid：( 0/ root)环境：system_u:object_r:admin_home_t:s0最近访问：2018-11-06 23:22:23.409038121 +0800最近更改：2018-10-24 00:53:08.760018638 +0800 #数据修改时间最近改动：2018-10-24 00:53:08.760018638 +0800 #状态修改时间创建时间：-复制代码3．cat命令 cat命令用来查看文件内容。这个命令的基本信息如下。 命令名称：cat。 英文原意：concatenate files and print on the standard output。 所在路径：/bin/cat。 执行权限：所有用户。 功能描述：合并文件并打印输出到标准输出。命令格式 复制代码[root@localhost ~]# cat [选项] 文件名选项： -A：相当于-vET选项的整合，用于列出所有隐藏符号 -E：列出每行结尾的回车符$ -n：显示行号 -T：把Tab键用^I显示出来 -v：列出特殊字符复制代码4．more命令 more是分屏显示文件的命令，其基本信息如下。 命令名称：more。 英文原意：file perusal filter for crt viewin。 所在路径：/bin/more。 执行权限：所有用户。 功能描述：分屏显示文件内容。 more命令比较简单，一般不用什么选项，命令会打开一个交互界面，可以识别一些交互命令。常用的交互命令如下。 空格键：向下翻页。 b：向上翻页。 回车键：向下滚动一行。 /字符串：搜索指定的字符串。 q：退出 。5．less命令 less命令和more命令类似，只是more是分屏显示命令，而less是分行显示命令，其基本信息如下。 命令名称：less。 英文原意：opposite of more。 所在路径：/usr/bin/less。 执行权限：所有用户。功能描述：分行显示文件内容6．head命令 head是用来显示文件开头的命令，其基本信息如下。 命令名称：head。 英文原意：output the first part of files。 所在路径：/usr/bin/head。 执行权限：所有用户。 功能描述：显示文件开头的内容。命令格式 [root@localhost ~]# head [选项] 文件名选项： -n 行数：从文件头开始，显示指定行数 -v：显示文件名 7．tail命令 既然有显示文件开头的命令，就会有显示文件结尾的命令。tail命令的基本信息如下。 命令名称：tail。 英文原意：output the last part of files。 所在路径：/usr/bin/tail。执行权限：所有用户。 功能描述：显示文件结尾的内容。命令格式 [root@localhost ~]# tail [选项] 文件名选项： -n 行数：从文件结尾开始，显示指定行数 -f：监听文件的新增内容 8．ln命令 我们来看看ln命令的基本信息。 命令名称：ln。 英文原意：make links between file。 所在路径：/bin/ln。 执行权限：所有用户。 功能描述：在文件之间建立链接。命令格式 [root@localhost ~]# ln [选项] 源文件目标文件选项： -s：建立软链接文件。如果不加“-s”选项，则建立硬链接文件 -f：强制。如果目标文件已经存在，则删除目标文件后再建立链接文件注：链接文件的意思我认为就是文件挂载 8.1 硬链接命令格式 [root@localhost ~]# touch cangls[root@localhost ~]# ln /root/cangls /tmp/#建立硬链接文件，目标文件没有写文件名，会和原名一致#也就是/root/cangls和/tmp/cangls是硬链接文件硬链接特征： 源文件和硬链接文件拥有相同的Inode和Blockl 修改任意一个文件，另一个都改变 删除任意一个文件，另一个都能使用 硬链接标记不清，很难确认硬链接文件位置，不建议使用 硬链接不能链接目录l硬链接不能跨分区8.1 软链接命令格式 [root@localhost ~]# touch bols[root@localhost ~]# ln -s /root/bols /tmp/#建立软链接文件软链接特征： 软链接和源文件拥有不同的Inode和Block 两个文件修改任意一个，另一个都改变 删除软链接，源文件不受影响；删除源文件，软链接不能使用 软链接没有实际数据，只保存源文件的Inode，不论源文件多大，软链接大小不变 软链接的权限是最大权限lrwxrwxrwx.，但是由于没有实际数据，最终访问时需要参考源文件权限 软链接可以链接目录 软链接可以跨分区l软链接特征明显，建议使用软连接四、目录和文件都能操作的命令1．rm命令 rm是强大的删除命令，不仅可以删除文件，也可以删除目录。这个命令的基本信息如下。 命令名称：rm。 英文原意：remove files or directories。 所在路径：/bin/rm。 执行权限：所有用户。 功能描述：删除文件或目录。 命令格式 [root@localhost ~]# rm [选项] 文件或目录选项： -f：强制删除（force） -i：交互删除，在删除之前会询问用户 -r：递归删除，可以删除目录（recursive）2．cp命令 cp是用于复制的命令，其基本信息如下： 命令名称：cp。 英文原意：copy files and directories。 所在路径：/bin/cp。 执行权限：所有用户。 功能描述：复制文件和目录 。 命令格式 复制代码[root@localhost ~]# cp [选项] 源文件 目标文件选项： -a：相当于-dpr选项的集合，这几个选项我们一一介绍 -d：如果源文件为软链接（对硬链接无效），则复制出的目标文件也为软链接 -i：询问，如果目标文件已经存在，则会询问是否覆盖 -p：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间） -r：递归复制，用于复制目录复制代码3．mv命令 mv是用来剪切的命令，其基本信息如下。 命令名称：mv。 英文原意：move (rename) files。 所在路径：/bin/mv。 执行权限：所有用户。 功能描述：移动文件或改名。命令格式 [root@localhost ~]# mv [选项] 源文件目标文件选项： -f：强制覆盖，如果目标文件已经存在，则不询问，直接强制覆盖 -i：交互移动，如果目标文件已经存在，则询问用户是否覆盖（默认选项） -v：显示详细信息","categories":[],"tags":[],"author":"张存"},{"title":"centos7 安装docker-compose","slug":"docker-compose安装","date":"2021-10-18T11:22:13.000Z","updated":"2021-10-18T11:41:19.553Z","comments":true,"path":"2021/10/18/docker-compose-an-zhuang/","link":"","permalink":"https://blog.zhangcun.store/2021/10/18/docker-compose-an-zhuang/","excerpt":"","text":"推荐使用docker官方的docker-compose安装教程官网安装教程 推荐使用pip安装docker-compose，因为pip可以为你自动对应版本问题安装pipyum -y install epel-releaseyum -y install python3-pip确认版本pip –version更新pippip3 install –upgrade pip安装docker-composepip3 install docker-compose查看版本docker-compose version","categories":[],"tags":[],"author":"张存"},{"title":"docker构建python3.7镜像","slug":"docker构建python3-7镜像","date":"2021-10-18T10:28:51.000Z","updated":"2021-10-18T10:38:43.427Z","comments":true,"path":"2021/10/18/docker-gou-jian-python3-7-jing-xiang/","link":"","permalink":"https://blog.zhangcun.store/2021/10/18/docker-gou-jian-python3-7-jing-xiang/","excerpt":"","text":"安装 Docker Engine-Community使用 Docker 仓库进行安装 在新主机上首次安装 Docker Engine-Community 之前，需要设置 Docker 仓库。之后，您可以从仓库安装和更新 Docker。 设置仓库 安装所需的软件包。yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。 $ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2使用以下命令来设置稳定的仓库。 $ sudo yum-config-manager \\ –add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo安装 Docker Engine-Community 安装最新版本的 Docker Engine-Community 和 containerd，或者转到下一步安装特定版本： $ sudo yum install docker-ce docker-ce-cli containerd.io如果提示您接受 GPG 密钥，请选是。 启动 Docker。 $ sudo systemctl start docker构建python3镜像一.在Dockerfile/Dockerfile 中写入以下代码 注意：Dockerfile目录中最好不要有多余的文件,也会发送给docker引擎，速度会变慢 ############################################## #基于centos7构建python3运行环境 #构建命令: 在Dockerfile文件目录下执行 docker build -t python:37 . #容器启动命令: docker run -itd --name python --restart always --privileged=true -v /root/dockers/python:/root/python -v /root/dockers/python/cron:/var/spool/cron python:37 /usr/sbin/init #进入容器：docker exec -it python /bin/bash ############################################## FROM centos:7.6.1810 MAINTAINER mioshu # 指定作者信息 RUN set -ex \\ # 预安装所需组件 &amp;&amp; yum install -y wget tar libffi-devel zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gcc make initscripts \\ &amp;&amp; wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tgz \\ &amp;&amp; tar -zxvf Python-3.7.0.tgz \\ &amp;&amp; cd Python-3.7.0 \\ &amp;&amp; ./configure prefix=/usr/local/python3 \\ &amp;&amp; make \\ &amp;&amp; make install \\ &amp;&amp; make clean \\ &amp;&amp; rm -rf /Python-3.7.0* \\ &amp;&amp; yum install -y epel-release \\ &amp;&amp; yum install -y python-pip #设置默认为python3 RUN set -ex \\ # 备份旧版本python &amp;&amp; mv /usr/bin/python /usr/bin/python27 \\ &amp;&amp; mv /usr/bin/pip /usr/bin/pip27 \\ # 配置默认为python3 &amp;&amp; ln -s /usr/local/python3/bin/python3.7 /usr/bin/python \\ &amp;&amp; ln -s /usr/local/python3/bin/pip3 /usr/bin/pip #修复因修改python版本导致yum失效问题 RUN set -ex \\ &amp;&amp; sed -i &quot;s#/usr/bin/python#/usr/bin/python2.7#&quot; /usr/bin/yum \\ &amp;&amp; sed -i &quot;s#/usr/bin/python#/usr/bin/python2.7#&quot; /usr/libexec/urlgrabber-ext-down \\ &amp;&amp; yum install -y deltarpm #基础环境配置 RUN set -ex \\ # 修改系统时区为东八区 &amp;&amp; rm -rf /etc/localtime \\ &amp;&amp; ln -s /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \\ &amp;&amp; yum install -y vim \\ # 安装定时任务组件 &amp;&amp; yum -y install cronie #支持中文 RUN yum install kde-l10n-Chinese -y RUN localedef -c -f UTF-8 -i zh_CN zh_CN.utf8 #更新pip版本 RUN pip install --upgrade pip ENV LC_ALL zh_CN.UTF-8 二 dockerfile构建命令: 在Dockerfile文件目录下执行 docker build -t python:37 .-t：指定镜像名称 三 启动容器 docker run -itd –name python –restart always –privileged=true -v /root/dockers/python:/root/python -v /root/dockers/python/cron:/var/spool/cron python:37 /usr/sbin/initdocker run 命令会创建一个名为python的容器-i：互交模式-t：终端模式-d：后台启动–name： 容器名称，即后面的python-v：资源卷映射，主机目录、文件映射到容器目录、文件四 进入容器 docker exec -it python /bin/bash五 导出容器 Ctrl + d 退出当前容器后执行下面语句 docker export python &gt; python.tar六、导入容器 docker import python.tar python:3通过export+import的方法创建镜像不会保留镜像历史，可以缩小镜像体积 七、push到hub 需要先到 https://hub.docker.com 注册一个账号 上传完成后可以在任一主机上拉取镜像： docker pull vfrtgb158/python:3","categories":[],"tags":[],"author":"张存"},{"title":"ubuntu 20.04 安装 nfs","slug":"ubuntu-16-04-安装-nfs","date":"2021-10-18T10:09:05.000Z","updated":"2021-10-18T10:10:20.389Z","comments":true,"path":"2021/10/18/ubuntu-16-04-an-zhuang-nfs/","link":"","permalink":"https://blog.zhangcun.store/2021/10/18/ubuntu-16-04-an-zhuang-nfs/","excerpt":"","text":"Ubuntu 20.04系统上NFS的安装与使用 摘要：本文介绍了NFS服务器的安装过程、配置文件和常用命令行工具，以及NFS客户端上如何安装常用工具，介绍如何挂载共享目录，并通过实验进行验证。 一、服务器端： 1.1安装NFS服务： #执行以下命令安装NFS服务器， #apt会自动安装nfs-common、rpcbind等13个软件包 sudo apt install nfs-kernel-server 1.2编写配置文件： #编辑/etc/exports 文件： sudo vi /etc/exports #/etc/exports文件的内容如下： /tmp *(rw,sync,no_subtree_check,no_root_squash) /data *(rw,sync,no_subtree_check,no_root_squash) /logs *(rw,sync,no_subtree_check,no_root_squash) 1.3创建共享目录 #在服务器端创建/tmp /data和/logs共享目录 sudo mkdir -p /tmp sudo mkdir -p /data sudo mkdir -p /logs 1.4重启nfs服务： sudo service nfs-kernel-server restart 1.5常用命令工具： #在安装NFS服务器时，已包含常用的命令行工具，无需额外安装。 #显示已经mount到本机nfs目录的客户端机器。 sudo showmount -e localhost #将配置文件中的目录全部重新export一次！无需重启服务。 sudo exportfs -rv #查看NFS的运行状态 sudo nfsstat #查看rpc执行信息，可以用于检测rpc运行情况 sudo rpcinfo #查看网络端口，NFS默认是使用111端口。 sudo netstat -tu -4 二、客户端： 2.1安装客户端工具： #在需要连接到NFS服务器的客户端机器上， #需要执行以下命令，安装nfs-common软件包。 #apt会自动安装nfs-common、rpcbind等12个软件包 sudo apt install nfs-common 2.2查看NFS服务器上的共享目录 #显示指定的（192.168.3.167）NFS服务器上export出来的目录 sudo showmount -e 192.168.3.167 2.3创建本地挂载目录 sudo mkdir -p /mnt/data sudo mkdir -p /mnt/logs 2.4挂载共享目录 #将NFS服务器192.168.3.167上的目录，挂载到本地的/mnt/目录下 sudo mount -t nfs 192.168.3.167:/data /mnt/data sudo mount -t nfs 192.168.3.167:/logs /mnt/logs #注：在没有安装nfs-common或者nfs-kernel-server软件包的机器上， #直接执行showmount、exportfs、nfsstat、rpcinfo等命令时， #系统会给出友好的提示， #比如直接showmount会提示需要执行sudo apt install nfs-common命令， #比如直接rpcinfo会提示需要执行sudo apt install rpcbind命令。 实验附图： 1-在没有安装nfs相关软件包的机器上，直接执行nfsstat和rpcinfo命令时，会给出安装提示 2-在没有安装nfs相关软件包的机器上，直接执行exportfs和showmount命令时，会给出的安装提示 3-在NFS服务器上使用apt命令，安装nfs-kernel-server软件包，系统提示同时安装nfs-common,rpcinfo等13个软件包 4-完成NFS服务器端的安装以后，查看etc下exports文件的默认内容 5-查看NFS服务器端的目录，创建共享目录，重启nfs服务 6-在NFS服务器端查看共享出来的目录 7-重启NFS服务，查看服务器端的共享目录，查看NFS的状态，以及RPC信息 8-在客户端192.168.3.166机器上，查看NFS服务器167上的共享目录 9-在客户端192.168.3.166上使用mount命令挂载NFS服务器167上的共享目录，查看目录中的内容 【结束】 参考链接： 超全面的NFS详解 http://server.51cto.com/sManage-150923.htm ubuntu 16.04 nfs服务的搭建 http://www.cnblogs.com/MoreExcellent/p/7222895.html","categories":[],"tags":[],"author":"张存"},{"title":"Linux下批量ping某个网段的脚本","slug":"Linux下批量ping某个网段的脚本","date":"2021-10-18T10:03:57.000Z","updated":"2021-10-18T10:07:05.702Z","comments":true,"path":"2021/10/18/linux-xia-pi-liang-ping-mou-ge-wang-duan-de-jiao-ben/","link":"","permalink":"https://blog.zhangcun.store/2021/10/18/linux-xia-pi-liang-ping-mou-ge-wang-duan-de-jiao-ben/","excerpt":"","text":"比如现在需要对192.168.1.0/24网段的ip进行检查，检查哪些ip现在被占用，哪些ip没有被占用，可以通过ping命令来检查，也可以通过nmap接参数来检查 ping命令脚本如下： 复制代码[root@ZFVM-APP-0-172 shell]# vim ping.sh#!/bin/bash. /etc/init.d/functionsfor var in {1..254};doip=192.168.1.$varping -c2 $ip &gt;/dev/null 2&gt;&amp;1if [ $? = 0 ];thenaction “$ip” /bin/trueelseaction “$ip” /bin/falsefidone 复制代码复制代码[root@uatdns01 opt]# bash ping.sh172.168.1.1 [FAILED]172.168.1.2 [FAILED]172.168.1.3 [FAILED]172.168.1.4 [FAILED]172.168.1.5 [FAILED]………………192.168.1.249 [FAILED]192.168.1.250 [FAILED]192.168.1.251 [FAILED]192.168.1.252 [FAILED]192.168.1.253 [FAILED]192.168.1.254 [FAILED]复制代码用nmap需要先安装nmap命令 复制代码[root@ZFVM-APP-0-172 shell]# yum install -y nmap [root@ZFVM-APP-0-172 shell]# nmap -v -sP 192.168.1.0/24 |grep downNmap scan report for 192.168.1.0 [host down]Nmap scan report for 192.168.1.2 [host down]Nmap scan report for 192.168.1.3 [host down]Nmap scan report for 192.168.1.4 [host down]Nmap scan report for 192.168.1.5 [host down]…………Nmap scan report for 192.168.1.251 [host down]Nmap scan report for 192.168.1.252 [host down]Nmap scan report for 192.168.1.253 [host down]Nmap scan report for 192.168.1.254 [host down]Nmap scan report for 192.168.1.255 [host down]复制代码 检查192.168.1.1网关是否可达的脚本 复制代码[root@ZFVM-APP-0-161 shells]# vim ping.sh#!/bin/bashping www.baidu.com -c 4 -W 5 &gt; /dev/null 2&gt;&amp;1if [ $? -eq 0 ]then echo “网络已通”else echo “网络不可达”fi复制代码 执行结果 [root@ZFVM-APP-0-161 shells]# sh ping.sh网络可通 运维攻城狮","categories":[],"tags":[],"author":"张存"},{"title":"samba用户自行修改密码","slug":"samba用户自行修改密码","date":"2021-10-15T10:16:15.000Z","updated":"2021-10-15T10:43:06.383Z","comments":true,"path":"2021/10/15/samba-yong-hu-zi-xing-xiu-gai-mi-ma/","link":"","permalink":"https://blog.zhangcun.store/2021/10/15/samba-yong-hu-zi-xing-xiu-gai-mi-ma/","excerpt":"","text":"最近一直在潜心研究linux shell,所以好久没有更新了。今天也是在QQ有人和我聊到samba密码ldap集中验证时，想到一个问题，内网使用samba服务器来存储用户数据，所有的用户不能登陆LINUX后台，如何让客户自行修改密码？ 想要解决客户端实现修改samba密码，其实不需要去搭建ldap(维护成本较高)，也不需要利用行政手法统计客户端密码（毕竟同事也不好意思告诉你他平时习惯用的密码），网上google了下，利用changepassword这个工具即可利用其WEB界面让普通用户登录WEB修改自己的密码，大大提高了工作效率。 SAMBA: CentOS默认yum源 CHANGEPASSWORD: changepassword-0.9 APACHE: httpd-2.4.4 一.环境搭建： 1.配置前先关闭iptables和SELINUX，避免配置过程中报错。 #service iptables stop #setenforce 0 #vi /etc/sysconfig/selinux SELINUX=disabled 2.安装开发包 #yum install gcc -y 3.安装apache#yum install httpd -y 传送门：http://www.linuxidc.com/Linux/2013-05/83788.htm 二.配置samba： 1.安装samba: #yum install samba -y 2.配置samba: 要使用changepassword程序实现，客户端更改密码必须设置系统密码和samba密码同步 #vi /etc/samba/smb.conf 搜索security = user 添加以下内容(这里注释了默认一行内容) security = user pam password change = no passwd chat = *NEWUNIXpassword %n\\n RetypenewUNIXpassword* %n\\n successfully passwd program = LANG=en_US /usr/bin/passwd %u unix password sync = yes passdb backend = smbpasswd smb passwd file = /etc/samba/smbpasswd #passdb backend = tdbsam #service smb restart 注：上述修改其实将tdbsam认证方式修改该成smbpasswd,并将认证文件加密保存在/etc/samba/smbpasswd下 创建smb账户 #useradd -s /sbin/nologin test04 #passwd test04 #smbpasswd -a test04 注：这里创建samba账户时必须设置系统账户密码，以及smb账户密码 因为changepassword更改密码的机制是，先修改系统账户密码，然后将系统账户密码同步到 /etc/samba/smbpasswd SMB密码库文件下。 二.安装配置changepassword 1,下载解压: #wget http://prdownloads.sourceforge.net/changepassword/changepassword-0.9.tar.gz #tar -zxvf changepassword-0.9.tar.gz #cd changepassword-0.9 vim conf.h 将前三行的定义修改为自己创建的目录（这里我修改到了/var/smbchangepwd目录下）： // temporary directory and files to usechar TMPFILE[]=”/var/smbchangepwd/changepassword-shadow-XXXXXX”;char TMPSMBFILE[]=”/var/smbchangepwd/changepassword-smb-XXXXXX”;char TMPSQUIDFILE[]=”/var/smbchangepwd/changepassword-squid-XXXXXX”; 创建需要用到的目录 mkdir –pv /var/smbchangepwd 2.编译changepassword前需要安装一个依赖包 #cd smbencrypt/ #tar -xzvf libdes-4.04b.tar.gz #cd des/ #make #cp libdes.a ../ #cd ../.. 3.编译安装changepassword #./configure -enable-cgidir=/var/www/cgi-bin -enable-language=Chinese -enable-smbpasswd=/etc/samba/smbpasswd -disable-squidpasswd -enable-logo=logo.jpg 注：-enable-smbpasswd=/etc/samba/smbpasswd # 修改保存samba密码的库文件 -disable-squidpasswd # 禁用squid -enable-cgidir # 自定义apache根目录路径 -disable-squidpasswd # 自定义smbpassword的密码文件路径 -enable-logo # 设置web根目录logo文件,此处的相对路径对应的是apache根目录 #也就是 samba/logo.jpg对应/var/www/cgi-bin/logo.jpg #make &amp;&amp; make install 4.设置apache支持cgi模块 #vim /etc/httpd/conf/httpd.conf 搜索cgi 去掉如下注释： AddHandler cgi-script .cgi ————– 将AddDefaultCharset的值改为 GB2312，以防中文乱码 重启服务 #service httpd restart 5.访问web后台： http://192.168.1.28/cgi-bin/changepassword.cgi 按照提示修改密码提交即可","categories":[],"tags":[],"author":"张存"},{"title":"Debian GNU/Linux 换源","slug":"Debian-GNU-Linux-换源","date":"2021-10-14T05:22:45.000Z","updated":"2021-10-14T05:33:00.018Z","comments":true,"path":"2021/10/14/debian-gnu-linux-huan-yuan/","link":"","permalink":"https://blog.zhangcun.store/2021/10/14/debian-gnu-linux-huan-yuan/","excerpt":"","text":"Debian 默认源， /etc/apt/sources.list删除/移除 默认源 /etc/apt/sources.list ##这里使用163的镜像站执行：echo ‘deb http://mirrors.163.com/debian/ stretch main non-free contribdeb http://mirrors.163.com/debian/ stretch-updates main non-free contribdeb http://mirrors.163.com/debian/ stretch-backports main non-free contribdeb-src http://mirrors.163.com/debian/ stretch main non-free contribdeb-src http://mirrors.163.com/debian/ stretch-updates main non-free contribdeb-src http://mirrors.163.com/debian/ stretch-backports main non-free contribdeb http://mirrors.163.com/debian-security/ stretch/updates main non-free contribdeb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib’ &gt; /etc/apt/sources.list 163镜像站 deb http://mirrors.163.com/debian/ stretch main non-free contribdeb http://mirrors.163.com/debian/ stretch-updates main non-free contribdeb http://mirrors.163.com/debian/ stretch-backports main non-free contribdeb-src http://mirrors.163.com/debian/ stretch main non-free contribdeb-src http://mirrors.163.com/debian/ stretch-updates main non-free contribdeb-src http://mirrors.163.com/debian/ stretch-backports main non-free contribdeb http://mirrors.163.com/debian-security/ stretch/updates main non-free contribdeb-src http://mirrors.163.com/debian-security/ stretch/updates main non-free contrib 中科大镜像站deb https://mirrors.ustc.edu.cn/debian/ stretch main contrib non-freedeb-src https://mirrors.ustc.edu.cn/debian/ stretch main contrib non-free deb https://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-freedeb-src https://mirrors.ustc.edu.cn/debian/ stretch-updates main contrib non-free deb https://mirrors.ustc.edu.cn/debian/ stretch-backports main contrib non-freedeb-src https://mirrors.ustc.edu.cn/debian/ stretch-backports main contrib non-free deb https://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-freedeb-src https://mirrors.ustc.edu.cn/debian-security/ stretch/updates main contrib non-free 阿里云镜像站deb http://mirrors.aliyun.com/debian/ stretch main non-free contribdeb-src http://mirrors.aliyun.com/debian/ stretch main non-free contribdeb http://mirrors.aliyun.com/debian-security stretch/updates maindeb-src http://mirrors.aliyun.com/debian-security stretch/updates maindeb http://mirrors.aliyun.com/debian/ stretch-updates main non-free contribdeb-src http://mirrors.aliyun.com/debian/ stretch-updates main non-free contribdeb http://mirrors.aliyun.com/debian/ stretch-backports main non-free contribdeb-src http://mirrors.aliyun.com/debian/ stretch-backports main non-free contrib 华为镜像站deb https://mirrors.huaweicloud.com/debian/ stretch main contrib non-freedeb-src https://mirrors.huaweicloud.com/debian/ stretch main contrib non-freedeb https://mirrors.huaweicloud.com/debian/ stretch-updates main contrib non-freedeb-src https://mirrors.huaweicloud.com/debian/ stretch-updates main contrib non-freedeb https://mirrors.huaweicloud.com/debian/ stretch-backports main contrib non-freedeb-src https://mirrors.huaweicloud.com/debian/ stretch-backports main contrib non-free 清华大学镜像站deb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-updates main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/debian/ stretch-backports main contrib non-freedeb https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-freedeb-src https://mirrors.tuna.tsinghua.edu.cn/debian-security/ stretch/updates main contrib non-free 兰州大学镜像站deb http://mirror.lzu.edu.cn/debian stable main contrib non-freedeb-src http://mirror.lzu.edu.cn/debian stable main contrib non-freedeb http://mirror.lzu.edu.cn/debian stable-updates main contrib non-freedeb-src http://mirror.lzu.edu.cn/debian stable-updates main contrib non-freedeb http://mirror.lzu.edu.cn/debian/ stretch-backports main contrib non-freedeb-src http://mirror.lzu.edu.cn/debian/ stretch-backports main contrib non-freedeb http://mirror.lzu.edu.cn/debian-security/ stretch/updates main contrib non-freedeb-src http://mirror.lzu.edu.cn/debian-security/ stretch/updates main contrib non-free 上海交大镜像站deb https://mirror.sjtu.edu.cn/debian/ stretch main contrib non-freedeb-src https://mirror.sjtu.edu.cn/debian/ stretch main contrib non-freedeb https://mirror.sjtu.edu.cn/debian/ stretch-updates main contrib non-freedeb-src https://mirror.sjtu.edu.cn/debian/ stretch-updates main contrib non-freedeb https://mirror.sjtu.edu.cn/debian/ stretch-backports main contrib non-freedeb-src https://mirror.sjtu.edu.cn/debian/ stretch-backports main contrib non-freedeb https://mirror.sjtu.edu.cn/debian-security/ stretch/updates main contrib non-freedeb-src https://mirror.sjtu.edu.cn/debian-security/ stretch/updates main contrib non-free 最后附上官方全球镜像站列表地址https://www.debian.org/mirror/list","categories":[],"tags":[],"author":"张存"},{"title":"K8S中Harbor使用Nginx反向代理无法获取image","slug":"K8S中Harbor使用Nginx反向代理无法获取image","date":"2021-10-13T11:11:23.000Z","updated":"2021-10-13T11:12:09.758Z","comments":true,"path":"2021/10/13/k8s-zhong-harbor-shi-yong-nginx-fan-xiang-dai-li-wu-fa-huo-qu-image/","link":"","permalink":"https://blog.zhangcun.store/2021/10/13/k8s-zhong-harbor-shi-yong-nginx-fan-xiang-dai-li-wu-fa-huo-qu-image/","excerpt":"","text":"问题：Kubernetes创建Pod失败，无法获取image Failed create pod sandbox: rpc error: code = Unknown desc = failed pulling image “harbor.od.com/public/pause:latest”: Error response from daemon: Get http://harbor.od.com/v2/public/pause/manifests/latest: Get http://harbor.od.com:180/service/token?scope=repository%3Apublic%2Fpause%3Apull&amp;service=harbor-registry: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers 环境：harbor.od.com二进制包安装，使用docker-compose启动，harbor.yaml配置port：180然后通过部署nginx，反向到后端harbor上 故障排查： 1.使用docker pull 仓库镜像也无法获取 Error response from daemon: Get http://harbor.od.com/v2/public/pause/manifests/latest: Get http://harbor.od.com:180/service/token?scope=repository%3Apublic%2Fpaue%3Apull&amp;service=harbor-registry: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 2.使用docker loginx登录Harbor Error response from daemon: Get https://harbor,od,com/v2/: dial tcp: lookup harbor,od,com: no such host 3.修改成使用IP的方式登录Harbor Error response from daemon: Get http://harbor.od.com/v2/: Get http://harbor.od.com:180/service/token?account=admin&amp;client_id=docker&amp;offline_token=true&amp;service=habor-registry: net/http: request canceled while waiting for connection (Client.Timeout exceeded while awaiting headers) 分析问题： docker使用Http请求获取镜像，harbor是通过nginx的80端口访问，但是通过Log上看到的是使用Get方式，另外还要带有域名加180端口方式验证，应该是配置问题引起 #https://www.cnblogs.com/liucx/ 解决问题：修改harbor.yml配置文件，取消external_url注释，设置为： external_url: http://harbor.od.com:80然后，docker-compose down停止所有服务，删除当前配置目录：rm -rf ./common/config下配置清单，重新执行install.sh生成配置，即可解决 配置大概解释：如果使用外部代理就要启动该项#Uncomment external_url if you want to enable external proxy#And when it enabled the hostname will no longer used","categories":[],"tags":[],"author":"张存"},{"title":"Docker镜像的导入导出","slug":"Docker镜像的导入导出","date":"2021-10-13T11:02:06.000Z","updated":"2021-10-13T11:03:20.306Z","comments":true,"path":"2021/10/13/docker-jing-xiang-de-dao-ru-dao-chu/","link":"","permalink":"https://blog.zhangcun.store/2021/10/13/docker-jing-xiang-de-dao-ru-dao-chu/","excerpt":"","text":"Docker镜像的导入导出本文介绍Docker镜像的导入导出，用于迁移、备份、升级等场景，准备环境如下： CentOS 7.0Docker 1.18导入导出命令介绍涉及的命令有export、import、save、load save命令docker save [options] images [images…] 示例docker save -o nginx.tar nginx:latest或docker save &gt; nginx.tar nginx:latest其中-o和&gt;表示输出到文件，nginx.tar为目标文件，nginx:latest是源镜像名（name:tag）load命令docker load [options] 示例docker load -i nginx.tar或docker load &lt; nginx.tar其中-i和&lt;表示从文件输入。会成功导入镜像及相关元数据，包括tag信息export命令docker export [options] container 示例docker export -o nginx-test.tar nginx-test其中-o表示输出到文件，nginx-test.tar为目标文件，nginx-test是源容器名（name）import命令docker import [options] file|URL|- [REPOSITORY[:TAG]] 示例docker import nginx-test.tar nginx:imp或cat nginx-test.tar | docker import - nginx:imp区别export命令导出的tar文件略小于save命令导出的 export命令是从容器（container）中导出tar文件，而save命令则是从镜像（images）中导出基于第二点，export导出的文件再import回去时，无法保留镜像所有历史（即每一层layer信息，不熟悉的可以去看Dockerfile），不能进行回滚操作；而save是依据镜像来的，所以导入时可以完整保留下每一层layer信息。如下图所示，nginx:latest是save导出load导入的，nginx:imp是export导出import导入的。 建议可以依据具体使用场景来选择命令 若是只想备份images，使用save、load即可若是在启动容器后，容器内容有变化，需要备份，则使用export、import","categories":[],"tags":[],"author":"张存"},{"title":"curl 的用法指南","slug":"curl-的用法指南","date":"2021-10-13T10:57:35.000Z","updated":"2021-10-13T10:58:16.725Z","comments":true,"path":"2021/10/13/curl-de-yong-fa-zhi-nan/","link":"","permalink":"https://blog.zhangcun.store/2021/10/13/curl-de-yong-fa-zhi-nan/","excerpt":"","text":"简介curl 是常用的命令行工具，用来请求 Web 服务器。它的名字就是客户端（client）的 URL 工具的意思。 它的功能非常强大，命令行参数多达几十种。如果熟练的话，完全可以取代 Postman 这一类的图形界面工具。 本文介绍它的主要命令行参数，作为日常的参考，方便查阅。内容主要翻译自《curl cookbook》。为了节约篇幅，下面的例子不包括运行时的输出，初学者可以先看我以前写的《curl 初学者教程》。 不带有任何参数时，curl 就是发出 GET 请求。 $ curl https://www.example.com上面命令向www.example.com发出 GET 请求，服务器返回的内容会在命令行输出。 -A-A参数指定客户端的用户代理标头，即User-Agent。curl 的默认用户代理字符串是curl/[version]。 $ curl -A ‘Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/76.0.3809.100 Safari/537.36’ https://google.com上面命令将User-Agent改成 Chrome 浏览器。 $ curl -A ‘’ https://google.com上面命令会移除User-Agent标头。 也可以通过-H参数直接指定标头，更改User-Agent。 $ curl -H ‘User-Agent: php/1.0’ https://google.com-b-b参数用来向服务器发送 Cookie。 $ curl -b ‘foo=bar’ https://google.com上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。 $ curl -b ‘foo1=bar;foo2=bar2’ https://google.com上面命令发送两个 Cookie。 $ curl -b cookies.txt https://www.google.com上面命令读取本地文件cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。 -c-c参数将服务器设置的 Cookie 写入一个文件。 $ curl -c cookies.txt https://www.google.com上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。 -d-d参数用于发送 POST 请求的数据体。 $ curl -d’login=emma＆password=123’-X POST https://google.com/login#或者$ curl -d ‘login=emma’ -d ‘password=123’ -X POST https://google.com/login使用-d参数以后，HTTP 请求会自动加上标头Content-Type : application/x-www-form-urlencoded。并且会自动将请求转为 POST 方法，因此可以省略-X POST。 -d参数可以读取本地文本文件的数据，向服务器发送。 $ curl -d ‘@data.txt’ https://google.com/login上面命令读取data.txt文件的内容，作为数据体向服务器发送。 –data-urlencode–data-urlencode参数等同于-d，发送 POST 请求的数据体，区别在于会自动将发送的数据进行 URL 编码。 $ curl –data-urlencode ‘comment=hello world’ https://google.com/login上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。 -e-e参数用来设置 HTTP 的标头Referer，表示请求的来源。 curl -e ‘https://google.com?q=example&#39; https://www.example.com上面命令将Referer标头设为https://google.com?q=example。 -H参数可以通过直接添加标头Referer，达到同样效果。 curl -H ‘Referer: https://google.com?q=example&#39; https://www.example.com-F-F参数用来向服务器上传二进制文件。 $ curl -F ‘file=@photo.png’ https://google.com/profile上面命令会给 HTTP 请求加上标头Content-Type: multipart/form-data，然后将文件photo.png作为file字段上传。 -F参数可以指定 MIME 类型。 $ curl -F ‘file=@photo.png;type=image/png’ https://google.com/profile上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为application/octet-stream。 -F参数也可以指定文件名。 $ curl -F ‘file=@photo.png;filename=me.png’ https://google.com/profile上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。 -G-G参数用来构造 URL 的查询字符串。 $ curl -G -d ‘q=kitties’ -d ‘count=20’ https://google.com/search上面命令会发出一个 GET 请求，实际请求的 URL 为https://google.com/search?q=kitties&amp;count=20。如果省略--G，会发出一个 POST 请求。 如果数据需要 URL 编码，可以结合–data–urlencode参数。 $ curl -G –data-urlencode ‘comment=hello world’ https://www.example.com-H-H参数添加 HTTP 请求的标头。 $ curl -H ‘Accept-Language: en-US’ https://google.com上面命令添加 HTTP 标头Accept-Language: en-US。 $ curl -H ‘Accept-Language: en-US’ -H ‘Secret-Message: xyzzy’ https://google.com上面命令添加两个 HTTP 标头。 $ curl -d ‘{“login”: “emma”, “pass”: “123”}’ -H ‘Content-Type: application/json’ https://google.com/login上面命令添加 HTTP 请求的标头是Content-Type: application/json，然后用-d参数发送 JSON 数据。 -i-i参数打印出服务器回应的 HTTP 标头。 $ curl -i https://www.example.com上面命令收到服务器回应后，先输出服务器回应的标头，然后空一行，再输出网页的源码。 -I-I参数向服务器发出 HEAD 请求，然会将服务器返回的 HTTP 标头打印出来。 $ curl -I https://www.example.com上面命令输出服务器对 HEAD 请求的回应。 –head参数等同于-I。 $ curl –head https://www.example.com-k-k参数指定跳过 SSL 检测。 $ curl -k https://www.example.com上面命令不会检查服务器的 SSL 证书是否正确。 -L-L参数会让 HTTP 请求跟随服务器的重定向。curl 默认不跟随重定向。 $ curl -L -d ‘tweet=hi’ https://api.twitter.com/tweet–limit-rate–limit-rate用来限制 HTTP 请求和回应的带宽，模拟慢网速的环境。 $ curl –limit-rate 200k https://google.com上面命令将带宽限制在每秒 200K 字节。 -o-o参数将服务器的回应保存成文件，等同于wget命令。 $ curl -o example.html https://www.example.com上面命令将www.example.com保存成example.html。 -O-O参数将服务器回应保存成文件，并将 URL 的最后部分当作文件名。 $ curl -O https://www.example.com/foo/bar.html上面命令将服务器回应保存成文件，文件名为bar.html。 -s-s参数将不输出错误和进度信息。 $ curl -s https://www.example.com上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。 如果想让 curl 不产生任何输出，可以使用下面的命令。 $ curl -s -o /dev/null https://google.com-S-S参数指定只输出错误信息，通常与-s一起使用。 $ curl -s -o /dev/null https://google.com上面命令没有任何输出，除非发生错误。 -u-u参数用来设置服务器认证的用户名和密码。 $ curl -u ‘bob:12345’ https://google.com/login上面命令设置用户名为bob，密码为12345，然后将其转为 HTTP 标头Authorization: Basic Ym9iOjEyMzQ1。 curl 能够识别 URL 里面的用户名和密码。 $ curl https://bob:12345@google.com/login上面命令能够识别 URL 里面的用户名和密码，将其转为上个例子里面的 HTTP 标头。 $ curl -u ‘bob’ https://google.com/login上面命令只设置了用户名，执行后，curl 会提示用户输入密码。 -v-v参数输出通信的整个过程，用于调试。 $ curl -v https://www.example.com–trace参数也可以用于调试，还会输出原始的二进制数据。 $ curl –trace - https://www.example.com-x-x参数指定 HTTP 请求的代理。 $ curl -x socks5://james:&#x63;&#97;&#116;&#x73;&#64;&#109;&#x79;&#112;&#x72;&#x6f;&#x78;&#121;&#x2e;&#99;&#x6f;&#109;:8080 https://www.example.com上面命令指定 HTTP 请求通过myproxy.com:8080的 socks5 代理发出。 如果没有指定代理协议，默认为 HTTP。 $ curl -x james:&#99;&#x61;&#x74;&#x73;&#64;&#109;&#121;&#x70;&#x72;&#x6f;&#120;&#x79;&#x2e;&#99;&#x6f;&#109;:8080 https://www.example.com上面命令中，请求的代理使用 HTTP 协议。 -X-X参数指定 HTTP 请求的方法。 $ curl -X POST https://www.example.com上面命令对https://www.example.com发出 POST 请求。","categories":[],"tags":[],"author":"张存"},{"title":"E: 错误，pkgProblemResolver::Resolve 发生故障，这可能是有软件包被要求保持现状的缘故。 E: 无法更正依赖关系","slug":"E-错误，pkgProblemResolver-Resolve-发生故障，这可能是有软件包被要求保持现状的缘故。-E-无法更正依赖关系","date":"2021-10-13T10:52:55.000Z","updated":"2021-10-13T10:52:58.390Z","comments":true,"path":"2021/10/13/e-cuo-wu-pkgproblemresolver-resolve-fa-sheng-gu-zhang-zhe-ke-neng-shi-you-ruan-jian-bao-bei-yao-qiu-bao-chi-xian-zhuang-de-yuan-gu-e-wu-fa-geng-zheng-yi-lai-guan-xi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/13/e-cuo-wu-pkgproblemresolver-resolve-fa-sheng-gu-zhang-zhe-ke-neng-shi-you-ruan-jian-bao-bei-yao-qiu-bao-chi-xian-zhuang-de-yuan-gu-e-wu-fa-geng-zheng-yi-lai-guan-xi/","excerpt":"","text":"mentohust:i386 已经是最新的版本了。您可能需要运行“apt-get -f install”来纠正下列错误：下列软件包有未满足的依赖关系： mentohust:i386 : 依赖: libpcap0.8:i386 但是它将不会被安装 或 libpcap0.9:i386 但无法安装它 或 libpcap1.0:i386 但无法安装它 或 libpcap1:i386 但无法安装它 wps-office : 依赖: libc6:i386 (&gt;= 2.12) 但是它将不会被安装 依赖: libstdc++6:i386 (&gt;= 4.5) 但是它将不会被安装 依赖: libfreetype6:i386 (&gt;= 2.4) 但是它将不会被安装 依赖: libglu1-mesa:i386 但是它将不会被安装 依赖: libcups2:i386 但是它将不会被安装 依赖: libglib2.0-0:i386 但是它将不会被安装 依赖: libsm6:i386 但是它将不会被安装 依赖: libxrender1:i386 但是它将不会被安装 依赖: libfontconfig1:i386 但是它将不会被安装 推荐: ttf-mscorefonts-installer 但是它将不会被安装E: 有未能满足的依赖关系。请尝试不指明软件包的名字来运行“apt-get -f install”(也可以指定一个解决办法)。 E: 错误，pkgProblemResolver::Resolve 发生故障，这可能是有软件包被要求保持现状的缘故。 E: 无法更正依赖关系 卸载包 apt-get purge mentohust 或者更换一下源 gedit /etc/apt/sources.list#华中科技大学更新服务器deb http://mirrors.hust.edu.cn/ubuntu/ utopic main restricted universe multiversedeb http://mirrors.hust.edu.cn/ubuntu/ utopic-backports restricted universe multiversedeb http://mirrors.hust.edu.cn/ubuntu/ utopic-proposed main restricted universe multiversedeb http://mirrors.hust.edu.cn/ubuntu/ utopic-security main restricted universe multiversedeb http://mirrors.hust.edu.cn/ubuntu/ utopic-updates main restricted universe multiversedeb-src http://mirrors.hust.edu.cn/ubuntu/ utopic main restricted universe multiversedeb-src http://mirrors.hust.edu.cn/ubuntu/ utopic-backports main restricted universe multiversedeb-src http://mirrors.hust.edu.cn/ubuntu/ utopic-proposed main restricted universe multiversedeb-src http://mirrors.hust.edu.cn/ubuntu/ utopic-security main restricted universe multiversedeb-src http://mirrors.hust.edu.cn/ubuntu/ utopic-updates main restricted universe multiverse 完啦以后apt-get -f install会要求卸载有冲突的软件包","categories":[],"tags":[],"author":"张存"},{"title":"解决取消挂载时 umount: /mnt: device is busy","slug":"1","date":"2021-10-13T09:31:34.000Z","updated":"2021-10-13T09:31:49.664Z","comments":true,"path":"2021/10/13/1/","link":"","permalink":"https://blog.zhangcun.store/2021/10/13/1/","excerpt":"","text":"取消挂载/mnt时出现 umount: /mnt: device is busy, 原因是因为有程序在使用 /mnt 目录，我们可以使用 fuser 命令查看挂载目录被哪些进程占用 fuser -kvm /mnt然后 kill 就可以了。 命令：kill -9 pid 如果还是不行，还可以强行解除挂载 umount -l /mnt 强行解除挂载","categories":[],"tags":[],"author":"张存"},{"title":"linux mysql5.7设置中文字符集","slug":"linux-mysql5-7设置中文字符集","date":"2021-10-13T03:00:53.000Z","updated":"2021-10-13T03:16:30.152Z","comments":true,"path":"2021/10/13/linux-mysql5-7-she-zhi-zhong-wen-zi-fu-ji/","link":"","permalink":"https://blog.zhangcun.store/2021/10/13/linux-mysql5-7-she-zhi-zhong-wen-zi-fu-ji/","excerpt":"","text":"ubuntu20.04已测试 注意版本，好像从5.6根5.5就不一样，配置文件更深了一层。 1.用vim或nano编辑 /etc/mysql/mysql.conf.d/mysqld.cnf 2.[mysqld]后面添加 character_set_server=utf8 保存退出 3.#service mysql restart 4.登录mysql #mysql -u root -p 后mysql&gt;show variables like ‘character%’查看编码是否都变成了utf8，如果还有latin编码则失败。","categories":[],"tags":[],"author":"张存"},{"title":"ubuntu sudo免密码操作","slug":"ubuntu-sudo免密码操作","date":"2021-10-12T10:28:22.000Z","updated":"2021-10-12T10:32:17.576Z","comments":true,"path":"2021/10/12/ubuntu-sudo-mian-mi-ma-cao-zuo/","link":"","permalink":"https://blog.zhangcun.store/2021/10/12/ubuntu-sudo-mian-mi-ma-cao-zuo/","excerpt":"","text":"sudo vi /etc/sudoers输入密码添加cunzhang ALL=(ALL) NOPASSWD : ALL注释掉 #%sudo ALL=(ALL:ALL) ALL改成%sudo ALL=NOPASSWD: ALL wq! 保存","categories":[],"tags":[],"author":"张存"},{"title":"vmware workstation16许可证密钥","slug":"vmware-workstation16许可证密钥","date":"2021-10-12T10:18:50.000Z","updated":"2021-10-12T10:19:52.707Z","comments":true,"path":"2021/10/12/vmware-workstation16-xu-ke-zheng-mi-yao/","link":"","permalink":"https://blog.zhangcun.store/2021/10/12/vmware-workstation16-xu-ke-zheng-mi-yao/","excerpt":"","text":"vmware workstation16许可证密钥 ZF3R0-FHED2-M80TY-8QYGC-NPKYFYF390-0HF8P-M81RQ-2DXQE-M2UT6ZF71R-DMX85-08DQY-8YMNC-PPHV8 前面的如果已经失效，用下面的 FA1M0-89YE3-081TQ-AFNX9-NKUC0","categories":[],"tags":[],"author":"张存"},{"title":"jenkins ssh连接超时错误","slug":"jenkins-ssh连接超时错误","date":"2021-10-12T10:09:25.000Z","updated":"2021-10-12T10:11:04.778Z","comments":true,"path":"2021/10/12/jenkins-ssh-lian-jie-chao-shi-cuo-wu/","link":"","permalink":"https://blog.zhangcun.store/2021/10/12/jenkins-ssh-lian-jie-chao-shi-cuo-wu/","excerpt":"","text":"SSH: Disconnecting configuration [汇保理测试] …ERROR: Exception when publishing, exception message [Exec timed out or was interrupted after 120,000 ms]Finished: UNSTABLE解决办法很简单： 1.延长timeout时间如下，默认的timeout时间为120秒：11.延长timeout时间如下，默认的timeout时间为120秒： 测试过程中发现及时timeout了调用的脚本也会执行完，只是在Jenkins看不到输出的日志。 3.如果Job会执行很长时间，也不想等timeout可以勾选[Exec in pty]选项 勾选后再执行，成功","categories":[],"tags":[],"author":"张存"},{"title":"docker logs－查看docker容器日志","slug":"docker-logs－查看docker容器日志","date":"2021-10-12T10:00:52.000Z","updated":"2021-10-12T10:03:46.248Z","comments":true,"path":"2021/10/12/docker-logs-cha-kan-docker-rong-qi-ri-zhi/","link":"","permalink":"https://blog.zhangcun.store/2021/10/12/docker-logs-cha-kan-docker-rong-qi-ri-zhi/","excerpt":"","text":"通过docker logs命令可以查看容器的日志。 命令格式： $ docker logs [OPTIONS] CONTAINER Options: –details 显示更多的信息 -f, –follow 跟踪实时日志 –since string 显示自某个timestamp之后的日志，或相对时间，如42m（即42分钟） –tail string 从日志末尾显示多少行日志， 默认是all -t, –timestamps 显示时间戳 –until string 显示自某个timestamp之前的日志，或相对时间，如42m（即42分钟）例子： 查看指定时间后的日志，只显示最后100行： docker logs –tail 50 –follow –timestamps id $ docker logs -f -t –since=”2018-02-08” –tail=100 CONTAINER_ID查看最近30分钟的日志: $ docker logs –since 30m CONTAINER_ID查看某时间之后的日志： $ docker logs -t –since=”2018-02-08T13:23:37” CONTAINER_ID查看某时间段日志： $ docker logs -t –since=”2018-02-08T13:23:37” –until “2018-02-09T12:23:37” CONTAINER_ID","categories":[],"tags":[],"author":"张存"},{"title":"【Docker】容器与系统时间同步","slug":"【Docker】容器与系统时间同步","date":"2021-10-12T08:38:47.000Z","updated":"2021-10-12T08:39:40.619Z","comments":true,"path":"2021/10/12/docker-rong-qi-yu-xi-tong-shi-jian-tong-bu/","link":"","permalink":"https://blog.zhangcun.store/2021/10/12/docker-rong-qi-yu-xi-tong-shi-jian-tong-bu/","excerpt":"","text":"宿主机时间[root@slave-1 ~]# dateFri May 12 11:20:30 CST 2017 容器时间[root@slave-1 ~]# docker exec -ti 87986863838b /bin/bashroot@87986863838b:/# dateFri May 12 03:20:33 UTC 2017发现两者之间的时间相差了八个小时！宿主机采用了CST时区，CST应该是指（China Shanghai Time，东八区时间）容器采用了UTC时区，UTC应该是指（Coordinated Universal Time，标准时间） 统一两者的时区有下面几种方法 1）共享主机的localtime 创建容器的时候指定启动参数，挂载localtime文件到容器内，保证两者所采用的时区是一致的。#docker run -ti -d –name my-nginx -v /etc/localtime:/etc/localtime:ro docker.io/nginx /bin/bash2)复制主机的localtime [root@slave-1 ~]# docker cp /etc/localtime 87986863838b:/etc/ 然后再登陆容器，查看时间，发现已经跟宿主机时间同步了[root@slave-1 ~]# docker exec -ti 87986863838b /bin/bashroot@87986863838b:/# dateFri May 12 11:26:19 CST 20173）创建dockerfile文件的时候，自定义该镜像的时间格式及时区。在dockerfile文件里添加下面内容： ……FROM tomcatENV CATALINA_HOME /usr/local/tomcat…….#设置时区RUN /bin/cp /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &amp;&amp; echo ‘Asia/Shanghai’ &gt;/etc/timezone 保存后，利用docker build命令生成镜像使用即可,使用dockerfile创建的镜像的容器改变了容器的时区，这样不仅保证了容器时间与宿主机时间一致（假如宿主机也是CST）,并且像上面使用tomcat作为父镜像的话，JVM的时区也是CST,这样tomcat的日志信息的时间也是和宿主机一致的，像上面那两种方式只是保证了宿主机时间与容器时间一致，JVM的时区并没有改变，tomcat日志的打印时间依旧是UTC。","categories":[],"tags":[],"author":"张存"},{"title":"安装Maven环境","slug":"安装Maven环境","date":"2021-10-12T08:29:13.000Z","updated":"2021-10-12T08:31:54.456Z","comments":true,"path":"2021/10/12/an-zhuang-maven-huan-jing/","link":"","permalink":"https://blog.zhangcun.store/2021/10/12/an-zhuang-maven-huan-jing/","excerpt":"","text":"因为用到的docker镜像中不包含maven，所以要在宿主机中安装，通过文件挂载的方式提供调用 （1）切换到要安装的文件夹 cd /opt/software（2）下载maven包 wget http://mirror.bit.edu.cn/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz（3）解压 tar -xzvf apache-maven-3.6.3-bin.tar.gz（4）配置settings.xml（可选）此处使用了阿里云的Maven仓库 aliyunmaven * 阿里云公共仓库 https://maven.aliyun.com/repository/public （5）添加环境变量 vi /etc/profile在文件底部加上 export M2_HOME=/opt/software/apache-maven-3.6.3export PATH=$PATH:${M2_HOME}/bin保存并退出编辑，使用下面的命令让修改生效 source /etc/profile（6）验证Maven安装 mvn -version","categories":[],"tags":[],"author":"张存"},{"title":"unbuntu 安装cdua11.4","slug":"unbuntu-安装cdua11-4","date":"2021-10-11T08:16:44.000Z","updated":"2021-11-04T07:06:19.645Z","comments":true,"path":"2021/10/11/unbuntu-an-zhuang-cdua11-4/","link":"","permalink":"https://blog.zhangcun.store/2021/10/11/unbuntu-an-zhuang-cdua11-4/","excerpt":"","text":"​1.备份原来的源，将以前的源备份一下，以防以后可以用的。 sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak 2.打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse#deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse 3.执行apt-get update 更新源 4.下载pin文件 wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pinmv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600apt-key adv –fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub 向 source.list 中添加 cuda软件源 add-apt-repository “deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /“ sed -i ‘s/nvidia.com/nvidia.cn/‘ /etc/apt/sources.list apt-get updateapt-get -y install cuda vim /etc/profile 再最后两行添加 export PATH=/usr/local/cuda-11.4/bin:$PATHexport LD_LIBRARY_PATH=/usr/local/cuda-11.4/lib64:$LD_LIBRARY_PATH source /etc/profile 验证 nvcc -V nvidia-smi 如遇：下图请重启电脑 cuda官网链接：https://developer.nvidia.com/cuda-downloads ​","categories":[],"tags":[],"author":"张存"},{"title":"Ubuntu使用非root用户运行docker","slug":"Ubuntu使用非root用户运行docker","date":"2021-10-08T02:47:00.000Z","updated":"2021-10-08T02:54:06.606Z","comments":true,"path":"2021/10/08/ubuntu-shi-yong-fei-root-yong-hu-yun-xing-docker/","link":"","permalink":"https://blog.zhangcun.store/2021/10/08/ubuntu-shi-yong-fei-root-yong-hu-yun-xing-docker/","excerpt":"","text":"默认情况下，docker 命令会使用 Unix socket 与 Docker 主机通讯，安装完docker主机后默认会创建一个docke用户组。而只有 root 用户和 docker 组的用户才可以访问 Docker 主机的 Unix socket，所以需要把linux非root用户添加到docker组才能直接访问docker 主机。步骤如下： 1.如果没有创建docker用户组，则需要先创建一个docket用户组。$ sudo groupadd docker2.将指定的用户添加到docker用户组。 $ sudo usermod -aG docker userName3.重启docker服务 $ sudo service docker restart //或者 $ sudo /etc/init.d/docker restart4.切换当前回话到docker组或者关闭当前回话重新打开终端。 $ newgrp - docker //切换到docker用户组","categories":[],"tags":[],"author":"张存"},{"title":"ubuntu20.04详细安装教程","slug":"ubuntu20-04详细安装教程","date":"2021-09-30T08:12:18.000Z","updated":"2021-09-30T13:54:26.472Z","comments":true,"path":"2021/09/30/ubuntu20-04-xiang-xi-an-zhuang-jiao-cheng/","link":"","permalink":"https://blog.zhangcun.store/2021/09/30/ubuntu20-04-xiang-xi-an-zhuang-jiao-cheng/","excerpt":"","text":"ubuntu20.04详细安装教程 本文为方便演示采用 VMware Workstation 16 如在生产环境安装基本雷同！ 下载ISO镜像： 从网易的镜像网站下载http://mirrors.163.com/ubuntu-releases/20.04/ 创建虚拟机： 打开vmware，选择【文件】——【新建虚拟机】：典型 【下一步】：“安装客户机操作系统”窗口中，选择：【稍后安装操作系统】。 【下一步】：“选择客户机操作系统”窗口中，操作系统选择：【Linux】，版本选择【Ubuntu 64位】。 【下一步】：“命名虚拟机”窗口中，位置一栏中，选择用于存放虚拟机的目录，这里建议找个空闲的磁盘分区。 【下一步】：“指定磁盘容量”窗口中，大小默认不动，下面选择：【将虚拟磁盘存储为单个文件】。【下一步】：“已准备好创建虚拟机”窗口中，选择：【完成】。 分配虚拟机硬件资源： 打开VMware，选择【虚拟机】——【设置】，打开“虚拟机设置”窗口，快捷键：ctrl + D。 根据自己的硬件条件，适当分配一些硬件资源。 必须设置的一项为：【CD/DVD(STAT)】，在右侧“连接”板块内选择【使用ISO镜像文件】，并指定前面下载的Ubuntu镜像文件存放目录。 分配好虚拟机的硬件资源后点击【确定】。 开始安装Ubuntu 1、运行虚拟机，加载一段时间后弹出“安装”界面。语言栏倒数第三个是中文。点击【安装 Ubuntu】。 2、键盘布局，【继续】 3、更新和其他软件，取消【安装Ubuntu时下载更新】选项，点击【继续】。 4、安装类型，这里如果是学习，或者是为了熟悉这个系统，那直接【现在安装】，让系统自动分配分区，随后弹出“将改动写入此盘吗”，选择【继续】。 5、你在什么地方，选择【Shanghai】——【继续】。 6、你是谁，将各个选项填写一下。点击【继续】。 7、安装完成，重启，进入桌面。","categories":[],"tags":[],"author":"张存"},{"title":"docker 网络的几种模式","slug":"Untitled","date":"2021-09-30T02:48:31.000Z","updated":"2021-09-30T03:36:15.931Z","comments":true,"path":"2021/09/30/untitled/","link":"","permalink":"https://blog.zhangcun.store/2021/09/30/untitled/","excerpt":"","text":"docker 网络分为单机和多机，我们来了解一下docker的单机网络docker单机网络分为以下几种：1）bridge NetWork，使用–net=bridge指定，默认设置。2）Host NetWork ，使用–net=host指定。3）None NetWork，使用–net=none指定。4）Container NetWork，使用–net=container:NAME_or_ID指定。5）自定义 NetWork，使用docker network create my_net，使用–net=my_net指定。 1、首先，我们来看看一个比较重要的概念，关于namespace，看看network的namespace到底是怎么回事。通过实践演示network-namespace。创建容器：创建两个busybox容器 [root@docker01 ~]# docker run -itd –name test1 busyboxf862152b6631cf28cf041b454ab85f5d190b03029c088a331a64b164900ef331[root@docker01 ~]# docker run -itd –name test2 busyboxf78690e1e0b820c4fea8af6e4d062f4f6460f68697274e70b0189b5c2ff3386d启动了2个容器，test1与test2，进入这2个容器查看各自的ip地址 复制代码[root@docker01 ~]# docker exec -it test1 sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft forever30: eth0@if31: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueuelink/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ffinet 172.17.0.2/16 brd 172.17.255.255 scope global eth0valid_lft forever preferred_lft forever/ # exit[root@docker01 ~]# docker exec -it test2 sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft forever32: eth0@if33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueuelink/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ffinet 172.17.0.3/16 brd 172.17.255.255 scope global eth0valid_lft forever preferred_lft forever复制代码可以看出test1的ip为172.17.0.2，test2的ip为172.17.0.3。其实这块就是网络命名空间！在test2上ping可以ping通test1的namespace。 [root@docker01 ~]# docker exec -it test2 sh/ # ping 172.17.0.2PING 172.17.0.2 (172.17.0.2): 56 data bytes64 bytes from 172.17.0.2: seq=0 ttl=64 time=18.389 ms64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.084 ms可以发现命名空间是独立的，容器内的网络命名空间和容器外不同，容器和容器之前的网络命名空间也是相对独立的。 2、那么docker网络究竟是如何配置的？ bridge网络模式我们进入容器内，ping baidu发现可以ping通。这是什么原理呢，肯定是通过可以转接的方式，如：容器—&gt;虚拟机—-&gt;宿主机–&gt;baidu。 / # ping www.baidu.comPING www.baidu.com (115.239.210.27): 56 data bytes64 bytes from 115.239.210.27: seq=0 ttl=127 time=15.410 ms64 bytes from 115.239.210.27: seq=1 ttl=127 time=7.586 ms查看docker网络： [root@docker01 ~]# docker network lsNETWORK ID NAME DRIVER SCOPE99c36d692cac bridge bridge localec237fbb8837 host host local94e84f3d8354 none null local这里我们可以看到桥接模式。对于test1与test2 来讲，他是通过bridge的方式我们可以看一下其内部网络信息： 复制代码[root@docker01 ~]# docker inspect test1……“NetworkSettings”: {“Bridge”: “”,“SandboxID”: “6f8f2f996e4d5bfeddd179832cc5ffb3cd3f9ee830ce6acfff16fd249e9e0130”,“HairpinMode”: false,“LinkLocalIPv6Address”: “”,“LinkLocalIPv6PrefixLen”: 0,“Ports”: {},“SandboxKey”: “/var/run/docker/netns/6f8f2f996e4d”,“SecondaryIPAddresses”: null,“SecondaryIPv6Addresses”: null,“EndpointID”: “d0a01da2cd1b487c6829518c7bdc01215b66a11b1e79e80862ab81c49e5cb0f7”,“Gateway”: “172.17.0.1”,“GlobalIPv6Address”: “”,“GlobalIPv6PrefixLen”: 0,“IPAddress”: “172.17.0.2”,“IPPrefixLen”: 16,“IPv6Gateway”: “”,“MacAddress”: “02:42:ac:11:00:02”,“Networks”: {“bridge”: {“IPAMConfig”: null,“Links”: null,“Aliases”: null,“NetworkID”: “99c36d692cac8d6be351681e590e0048f6a746fd9e1c88b2e3b7769dfd57fccb”,“EndpointID”: “d0a01da2cd1b487c6829518c7bdc01215b66a11b1e79e80862ab81c49e5cb0f7”,“Gateway”: “172.17.0.1”,“IPAddress”: “172.17.0.2”,“IPPrefixLen”: 16,“IPv6Gateway”: “”,“GlobalIPv6Address”: “”,“GlobalIPv6PrefixLen”: 0,“MacAddress”: “02:42:ac:11:00:02”,“DriverOpts”: null}}……复制代码查看宿主机ip信息： 复制代码[root@docker01 ~]# ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft foreverinet6 ::1/128 scope hostvalid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000link/ether 00:0c:29:cf:3d:4b brd ff:ff:ff:ff:ff:ffinet 10.0.0.99/24 brd 10.0.0.255 scope global noprefixroute ens33valid_lft forever preferred_lft foreverinet6 fe80::20c:29ff:fecf:3d4b/64 scope linkvalid_lft forever preferred_lft forever3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group defaultlink/ether 02:42:1f:f4:29:1a brd ff:ff:ff:ff:ff:ffinet 172.17.0.1/16 brd 172.17.255.255 scope global docker0valid_lft forever preferred_lft foreverinet6 fe80::42:1fff:fef4:291a/64 scope linkvalid_lft forever preferred_lft forever4: veth3b111e2@if32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group defaultlink/ether 62:a9:c9:0b:be:d6 brd ff:ff:ff:ff:ff:ff link-netnsid 1inet6 fe80::60a9:c9ff:fe0b:bed6/64 scope linkvalid_lft forever preferred_lft forever5: vethdc6d1fa@if30: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group defaultlink/ether a2:17:9c:af:d1:d9 brd ff:ff:ff:ff:ff:ff link-netnsid 2inet6 fe80::a017:9cff:feaf:d1d9/64 scope linkvalid_lft forever preferred_lft forever复制代码这个机器有5个网路，除了lo，ens33，docker0，veth3b111e2@if32，vethdc6d1fa@if30，veth其实是连接了2个networknamespace，vethdbcb3a6@if11与vethdc6d1fa@if30负责连接docker0上边的，容器test1与test2里面也应该有个和veth连接的。 复制代码[root@docker01 ~]# docker exec test1 ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft forever30: eth0@if31: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueuelink/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ffinet 172.17.0.2/16 brd 172.17.255.255 scope global eth0valid_lft forever preferred_lft forever复制代码eth0@if31和外边的veth3b111e2@if32 其实是一对。test2同理。 可以通过命令查看他们的关系： yum install -y bridge-utils#安装后可以运行brctl这个命令了 [root@docker01 ~]# brctl showdocker0 8000.02421ff4291a no veth3b111e2 vethdc6d1fa因为目前两个容器test1与test2的桥接，所以就显示两个。test1 和test2 之前通过docker0，docker0 类似test1和test2之前的路由器，docker0 在通过nat的eth0连接互联网。 为了形象理解docker bridge network可以参考下图： host 网络模式host模式下容器不会获得一个独立的network namespace，而是与宿主机共用一个。这就意味着容器不会有自己的网卡信息，而是使用宿主机的。容器除了网络，其他都是隔离的。 复制代码[root@docker01 ~]# docker run -itd –name test3 –network host busybox2268c2f8eb8ff74b72e521148dc1fe82a9a822857f251abab2368b24924453d6[root@docker01 ~]# docker exec -it test3 /bin/sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft foreverinet6 ::1/128 scope hostvalid_lft forever preferred_lft forever2: ens33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000link/ether 00:0c:29:cf:3d:4b brd ff:ff:ff:ff:ff:ffinet 10.0.0.99/24 brd 10.0.0.255 scope global noprefixroute ens33valid_lft forever preferred_lft foreverinet6 fe80::20c:29ff:fecf:3d4b/64 scope linkvalid_lft forever preferred_lft forever3: docker0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group defaultlink/ether 02:42:1f:f4:29:1a brd ff:ff:ff:ff:ff:ffinet 172.17.0.1/16 brd 172.17.255.255 scope global docker0valid_lft forever preferred_lft foreverinet6 fe80::42:1fff:fef4:291a/64 scope linkvalid_lft forever preferred_lft forever4: veth3b111e2@if32: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker_gwbridge state UP group defaultlink/ether 62:a9:c9:0b:be:d6 brd ff:ff:ff:ff:ff:ff link-netnsid 1inet6 fe80::60a9:c9ff:fe0b:bed6/64 scope linkvalid_lft forever preferred_lft forever5: vethdc6d1fa@if30: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue master docker0 state UP group defaultlink/ether a2:17:9c:af:d1:d9 brd ff:ff:ff:ff:ff:ff link-netnsid 2inet6 fe80::a017:9cff:feaf:d1d9/64 scope linkvalid_lft forever preferred_lft forever复制代码此容器没有自己的接口，与宿主机ip完全一样，起容器只能起单个，比如nginx。 none网络模式：获取独立的network namespace，但不为容器进行任何网络配置，需要我们手动配置。 复制代码[root@docker01 ~]# docker run -itd –name test4 –network none busybox7222ec17cd70c1094af5710445bec25bd2a7bd09c86f97348857ad5f70ed21b3[root@docker01 ~]# docker exec -it test4 /bin/sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft forever复制代码此容器没有接口ip，与外界无沟通，用于安全性比较高的业务，可自己手动添加网络。 container 网络模式：与指定的容器使用同一个network namespace，具有同样的网络配置信息，两个容器除了网络，其他都还是隔离的。新创建的容器不会创建自己的网卡，配置自己的IP，而是和一个指定的容器共享IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。 复制代码[root@docker01 ~]# docker run -itd –name test5 –net=container:test1 busyboxaf3a29e3171f82ef1a2e827d9307fbd2de6484ec225c6227de5de2fe6e557a90[root@docker01 ~]# docker exec -it test5 /bin/sh/ # ip a1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue qlen 1000link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00inet 127.0.0.1/8 scope host lovalid_lft forever preferred_lft forever30: eth0@if31: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueuelink/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ffinet 172.17.0.2/16 brd 172.17.255.255 scope global eth0valid_lft forever preferred_lft forever复制代码可以看出 test5 与 test1的网络配置信息是一致的。 自定义网络模式：与默认的bridge原理一样，但自定义网络具备内部DNS发现，可以通过容器名或者主机名容器之间网络通信。通过docker network create 创建自定义的网络： 复制代码[root@docker01 ~]# docker network create test[root@docker01 ~]# docker network lsNETWORK ID NAME DRIVER SCOPE99c36d692cac bridge bridge localec237fbb8837 host host local94e84f3d8354 none null localea714a707d9d test bridge local复制代码创建容器指定自定义网桥： [root@docker01 ~]# docker run -itd –name test6 –net=test busybox6b4add91370de5e9ac727c5d8992e516c7a5e8f75846f55f4c314bc433083998[root@docker01 ~]# docker run -itd –name test7 –net=test busyboxeb55f38600e725f050dea02d5227516858a4a3c7c6f85fec8bc9932864c811f8与普通bridge网络不同的是，自定义网络中创建的容器可以通过容器名或者主机名互通。 复制代码[root@docker01 ~]# docker exec -it test6 /bin/sh/ # ping test7PING test7 (172.21.0.3): 56 data bytes64 bytes from 172.21.0.3: seq=0 ttl=64 time=0.151 ms64 bytes from 172.21.0.3: seq=1 ttl=64 time=0.132 ms^C— test7 ping statistics —3 packets transmitted, 3 packets received, 0% packet lossround-trip min/avg/max = 0.083/0.122/0.151 ms/ # exit[root@docker01 ~]# docker exec -it test7 /bin/sh/ # ping test6PING test6 (172.21.0.2): 56 data bytes64 bytes from 172.21.0.2: seq=0 ttl=64 time=0.139 ms64 bytes from 172.21.0.2: seq=1 ttl=64 time=0.087 ms^C— test6 ping statistics —3 packets transmitted, 3 packets received, 0% packet lossround-trip min/avg/max = 0.087/0.104/0.139 ms复制代码其原理是各容器内部的hosts文件做了ip与主机名解析。 复制代码/ # cat /etc/hosts127.0.0.1 localhost::1 localhost ip6-localhost ip6-loopbackfe00::0 ip6-localnetff00::0 ip6-mcastprefixff02::1 ip6-allnodesff02::2 ip6-allrouters172.21.0.3 eb55f38600e7复制代码以上就是docker网络的5种模式。","categories":[],"tags":[],"author":"张存"},{"title":"video视频","slug":"video视频","date":"2021-09-29T12:53:30.000Z","updated":"2021-09-29T12:53:35.090Z","comments":true,"path":"2021/09/29/video-shi-pin/","link":"","permalink":"https://blog.zhangcun.store/2021/09/29/video-shi-pin/","excerpt":"","text":"video演示 100%宽度 Your browser does not support the video tag. 50%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. 25%宽度 Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag. Your browser does not support the video tag.","categories":[],"tags":[],"author":"张存"},{"title":"Text文本样式标签","slug":"111","date":"2021-09-29T12:47:15.000Z","updated":"2021-09-29T12:47:54.273Z","comments":true,"path":"2021/09/29/111/","link":"","permalink":"https://blog.zhangcun.store/2021/09/29/111/","excerpt":"","text":"Text文本样式标签演示 带 下划线 的文本 带 着重号 的文本 带 波浪线 的文本 带 删除线 的文本 键盘样式的文本 command + D 密码样式的文本：这里没有验证码","categories":[],"tags":[],"author":"张存"},{"title":"timeline时间线","slug":"abc","date":"2021-09-29T12:43:36.000Z","updated":"2021-09-29T12:43:59.263Z","comments":true,"path":"2021/09/29/abc/","link":"","permalink":"https://blog.zhangcun.store/2021/09/29/abc/","excerpt":"","text":"2021-01-01 1.0.3 -&gt; 1.0.3 我是一个测试文字ghghgh。我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀fgfgf佛第三节课。我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀trtrtr佛第三节课。 2020-08-15 1.0.2 -&gt; 1.0.2 这是一段测试文字 2020-08-08 1.0.0 -&gt; 1.0.0 我是一个测试文字ghghgh。我是一个测试问题二’qweqw’，请问企鹅请问请问佛挡杀fgfgf佛第三节课。我是一个测试问题三’fgfgfg’，请问企鹅请问请问佛挡杀trtrtr佛第三节课。","categories":[],"tags":[],"author":"张存"},{"title":"title","slug":"line","date":"2021-09-29T12:34:13.000Z","updated":"2021-09-29T12:54:06.496Z","comments":true,"path":"2021/09/29/line/","link":"","permalink":"https://blog.zhangcun.store/2021/09/29/line/","excerpt":"","text":"我是标题 你好啊，未来越来越好哦 我是标题 你好啊，加油哦 我是标题 我是标题 上述事例代码1 &#123;% title h1, 我是标题 %&#125; 2 你好啊，未来越来越好哦 3 &#123;% title h2, 我是标题 %&#125; 4 你好啊，加油哦 5 &#123;% title h2, 我是标题, warning %&#125; 6 % title h2, 我是标题, red %&#125; 我是标题bbb 我是标题bbb 我是标题bbb","categories":[],"tags":[],"author":"张存"},{"title":"使用docker-compose部署wiki","slug":"wiki","date":"2021-09-27T12:12:12.000Z","updated":"2021-10-13T10:29:42.622Z","comments":true,"path":"2021/09/27/wiki/","link":"","permalink":"https://blog.zhangcun.store/2021/09/27/wiki/","excerpt":"","text":"操作系统环境 ubuntu 20.04 1.u盘安装ubuntu 并安装ssh服务（方便后面远程操作）2.安装更新apt源和安装必要软件包3.安装docker和docker-compose （2和3具体见docker部署openvpn-web） 4.具体搭建过程 1.1 基础准备1.1.1 拉取docker镜像，我们选择的版本是cptactionhank/atlassian-confluence:latestmkdir ./confluencecd ./confluencedocker pull cptactionhank/atlassian-confluence:latest 1.1.2 准备好mysql的驱动，我们使用的mysql版本是5.7wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/5.1.47/mysql-connector-java-5.1.47.jar #mysql8.0.20驱动：wget https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.20/mysql-connector-java-8.0.20.jar 1.1.3 准备好docker-compose.yml version: &#39;3&#39; services: confluence: image: cptactionhank/atlassian-confluence:latest container_name: confluence restart: always user: root ports: - 8090:8090 - 8091:8091 networks: - traefik volumes: - &quot;/usr/share/zoneinfo/Asia/Shanghai:/etc/localtime&quot; - ./confluence/logs:/opt/atlassian/confluence/logs - ./server.xml:/opt/atlassian/confluence/conf/server.xml - ./confluence-data:/var/atlassian/confluence - ./mysql-connector-java-5.1.47.jar:/opt/atlassian/confluence/confluence/WEB-INF/lib/mysql-connector-java-5.1.47.jar networks: traefik: external: true 1.1.4 在准备好的 msyql 中创建数据库– drop database confluence;create database confluence DEFAULT CHARACTER SET utf8 COLLATE utf8_bin; 1.1.5 下载好破解工具#下载链接：http://image.baishapu.com/confluence破解工具.zip 1.2 部署破解1.2.1 启动#创建网卡docker network create traefik#启动docker-compose up -d#查看日志docker logs -tf –tail 300 confluence#访问地址： yourIp:8090 1.2.2 复制出 atlassian 的 jar 包docker cp confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar ./atlassian-extras-2.4.jar 下载 atlassian-extras-2.4.jar 文件到windows上 注意复制出来的文件名必须为 atlassian-extras-2.4.jar，因为破解工具中指定了此文件名；1.2.3 运行工具，(提前安装好win版jdk 然后进入jar所在目前 执行java -jar confluence_keygen.jar)如图: 成功后，会在原目录下出现atlassian-extras-2.4.back 备份文件，并生成了一个新的破解后的 atlassian-extras-2.4.jar1.2.4 复制破解后的jar包回容器中docker cp ./atlassian-extras-2.4.jar confluence:/opt/atlassian/confluence/confluence/WEB-INF/lib/atlassian-extras-decoder-v2-3.4.1.jar#重启docker restart confluence 1.2.5 剩下的按照页面提示一步一步设置即可注意：mysql连接时，需要设置事务隔离级别 READ-COMMITTED 参考链接：https://confluence.atlassian.com/confkb/confluence-fails-to-start-and-throws-mysql-session-isolation-level-repeatable-read-is-no-longer-supported-error-241568536.html #mysql 5jdbc:mysql://192.168.1.172:3307/confluence?useSSL=false&amp;sessionVariables=tx_isolation=’READ-COMMITTED’ 解决慢时长gc的问题 默认java配置为1G内存使用一段时间后回经常gc造成卡顿，单击“系统信息”可以看到jvm使用情况 进入docker容器 docker exec -it confluence /bin/bash # 进入docker容器 confluence 修改java配置 vi /opt/atlassian/confluence/bin/catalina.sh 在 “cygwin=false” 上面添加如下内容，最大内存为2G CATALINA_OPTS=”-Xms256m -Xmx2048m -XX:PermSize=128m -XX:MaxPermSize=512m” 重启 wiki confluence 二、数据备份与迁移2.1 参考链接：https://www.cwiki.us/display/CONF6EN/Migrating+Confluence+Between+Servers#space-menu-link-content https://confluence.atlassian.com/conf615/migrating-confluence-between-servers-967338806.html #我的迁移过程1、备份mysql数据库；2、备份mysql驱动；3、备份主目录（本文档安装的挂载目录 “- ./data:/var/atlassian/application-data/confluence”）4、备份server.xml（容器目录： /opt/atlassian/confluence/conf/server.xml）5、在新机器上准备好安装过程需要的东西，以及备份的东西拿过去准备覆盖；6、如果需要迁移数据库，可以直接修改配置文件：&lt;confluence.home&gt;/confluence.cfg.xml 迁移后，日志显示启动成功，但页面任然无法访问，此过程大概需要几分钟左右2.2 关闭confluence自带每日备份任务 2.3 手动备份脚本 + crontab定时任务备份数据库，主目录挂载出来即可； 三、导出PDF注意：confluence导出PDF仅支持一种字体，且需要自己手动上传安装；（可以从系统目录C:\\Windows\\Fonts 中复制出来） 四、配置邮件服务器参考链接：https://qinjiangbo.com/mail-server-configuration-of-confluence.html 说明：25、465端口不行，再试试587端口也是可以的 五、版本升级Confluence7 + Mysql8：CREATE DATABASE xxxxxxConfluence CHARACTER SET utf8mb4 COLLATE utf8mb4_bin; #隔离级别的设置， mysql 8 的区别：sessionVariables=transaction_isolation=’READ-COMMITTED’","categories":[],"tags":[],"author":"张存"},{"title":"MySQL查看数据库表容量大小","slug":"MySQL查看数据库表容量大小","date":"2021-09-26T14:16:34.000Z","updated":"2021-09-26T14:20:48.898Z","comments":true,"path":"2021/09/26/mysql-cha-kan-shu-ju-ku-biao-rong-liang-da-xiao/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/mysql-cha-kan-shu-ju-ku-biao-rong-liang-da-xiao/","excerpt":"","text":"1.查看所有数据库容量大小 selecttable_schema as ‘数据库’,sum(table_rows) as ‘记录数’,sum(truncate(data_length/1024/1024, 2)) as ‘数据容量(MB)’,sum(truncate(index_length/1024/1024, 2)) as ‘索引容量(MB)’from information_schema.tablesgroup by table_schemaorder by sum(data_length) desc, sum(index_length) desc; 2.查看所有数据库各表容量大小 selecttable_schema as ‘数据库’,table_name as ‘表名’,table_rows as ‘记录数’,truncate(data_length/1024/1024, 2) as ‘数据容量(MB)’,truncate(index_length/1024/1024, 2) as ‘索引容量(MB)’from information_schema.tablesorder by data_length desc, index_length desc; 3.查看指定数据库容量大小例：查看mysql库容量大小 selecttable_schema as ‘数据库’,sum(table_rows) as ‘记录数’,sum(truncate(data_length/1024/1024, 2)) as ‘数据容量(MB)’,sum(truncate(index_length/1024/1024, 2)) as ‘索引容量(MB)’from information_schema.tableswhere table_schema=’mysql’; 4.查看指定数据库各表容量大小例：查看mysql库各表容量大小 selecttable_schema as ‘数据库’,table_name as ‘表名’,table_rows as ‘记录数’,truncate(data_length/1024/1024, 2) as ‘数据容量(MB)’,truncate(index_length/1024/1024, 2) as ‘索引容量(MB)’from information_schema.tableswhere table_schema=’mysql’order by data_length desc, index_length desc;","categories":[],"tags":[],"author":"张存"},{"title":"Let’s Encrypt 泛域名配置证书","slug":"Let’s-Encrypt-泛域名配置证书","date":"2021-09-26T14:01:25.000Z","updated":"2021-10-28T06:19:32.546Z","comments":true,"path":"2021/09/26/let-s-encrypt-fan-yu-ming-pei-zhi-zheng-shu/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/let-s-encrypt-fan-yu-ming-pei-zhi-zheng-shu/","excerpt":"","text":"安装acme.sh curl https://get.acme.sh | sh Failed connect to raw.githubusercontent.com:443; Please refer to https://curl.haxx.se/libcurl/c/libcurl-errors.html for error code: 7#通过修改host解析 sudo vim /etc/hosts 添加如下内容 140.82.114.4 github.com 185.199.108.153 github.github.io 199.232.69.194 github.global.ssl.fastly.net 199.232.28.133 raw.githubusercontent.com 通过修改之后，上述可以成功 不行的就拿下面这个地址 wget -O - https://raw.githubusercontent.com/Neilpang/acme.sh/master/acme.sh | INSTALLONLINE=1 sh 获取阿里云Accesskey阿里云dns阿里云申请地址：https://ak-console.aliyun.com/#/accesskey export Ali_Key=”对应Access Key ID”export Ali_Secret=”对应Access Key Secret” ./acme.sh –issue –dns dns_ali - d *.hhui.top 接下来将我们的证书安装到 nginx（当然也可以是 tomcat），下面的脚本除了安装之外，也添加了一个自动更新的任务（一般来说，60 天以后会自动更新，并会强制重启 nginx 使新的证书生效，可以通过 crontab -e看到对应的定时任务 ./acme.sh –installcert -d *.hhui.top –key-file /etc/nginx/ssl/key.pem –fullchain-file /etc/nginx/ssl/cert.pem –reloadcmd “service nginx force-reload” 然后就是配置 nginx，支持 https ACME 手动续期命令 acme.sh –cron –force –debug 2","categories":[],"tags":[],"author":"张存"},{"title":"如何清除没用的 docker 镜像 (image) 文件","slug":"如何清除没用的-docker-镜像-image-文件","date":"2021-09-26T13:52:25.000Z","updated":"2021-09-26T13:53:05.366Z","comments":true,"path":"2021/09/26/ru-he-qing-chu-mei-yong-de-docker-jing-xiang-image-wen-jian/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/ru-he-qing-chu-mei-yong-de-docker-jing-xiang-image-wen-jian/","excerpt":"","text":"当我们每次构建一次 docker 镜像就会替换掉原来的镜像文件。那些文件很占地方。那么如何清除这些文件呢？ 我们可以使用下面的命令： docker system prune 运行以后可以看到以下提示，输入“y”就可以清理无用的 docker 文件了。","categories":[],"tags":[],"author":"张存"},{"title":"grep和sed配合替换文件中的字串","slug":"grep和sed配合替换文件中的字串","date":"2021-09-26T13:42:32.000Z","updated":"2021-09-26T13:45:39.435Z","comments":true,"path":"2021/09/26/grep-he-sed-pei-he-ti-huan-wen-jian-zhong-de-zi-chuan/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/grep-he-sed-pei-he-ti-huan-wen-jian-zhong-de-zi-chuan/","excerpt":"","text":"grep和sed配合替换文件中的字串 命令：sed -i s/yyyy/xxxx/g grep -rl yyyy –include=”*.txt” ./作用：将当前目录(包括子目录)中所有txt文件中的yyyy字符串替换为xxxx字符串 参数解释:sed:-i 表示操作的是文件，``括起来的grep命令，表示将grep命令的结果作为操作文件s/yyyy/xxxx/表示查找yyyy并替换为xxxx，后面跟g表示一行中有多个yyyy的时候，都替换，而不是仅替换第一个 grep:-r表示查找所有子目录-l表示仅列出符合条件的文件名，用来传给sed命令做操作–include=”*.txt” 表示仅查找txt文件./ 表示要查找的根目录为当前目录 注：如果不需要查找子目录，仅需要在当前目录替换，用sed命令就行了，命令如下： sed -i s/xxxx/yyyy/g ./*.txt 例如：1. nl /etc/passwd | grep ‘test’ | sed -e ‘3,$d’ -e ‘s/bash/blueshell/‘ /sbin/ifconfig eth0 | grep ‘inet addr’ | sed ‘s/^.addr://g’ | sed ‘s/Bcast.$//g’192.168.1.100","categories":[],"tags":[],"author":"张存"},{"title":"docker镜像批量打包","slug":"docker镜像批量打包","date":"2021-09-26T13:39:51.000Z","updated":"2021-09-26T13:40:57.358Z","comments":true,"path":"2021/09/26/docker-jing-xiang-pi-liang-da-bao/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/docker-jing-xiang-pi-liang-da-bao/","excerpt":"","text":"批量打包镜像: # docker save $(docker images | grep -v REPOSITORY | awk &#39;BEGIN&#123;OFS=&quot;:&quot;;ORS=&quot; &quot;&#125;&#123;print $1,$2&#125;&#39;) -o demo.tar 将机器上的所有镜像打包到demo.tar文件里面。 导入镜像： # docker load -i demo.tar 然后docker images就可以看到拷贝过来的镜像了。","categories":[],"tags":[],"author":"张存"},{"title":"docker部署openvpn-web","slug":"docker部署openvpn-web","date":"2021-09-26T13:15:19.000Z","updated":"2021-10-13T08:57:26.077Z","comments":true,"path":"2021/09/26/docker-bu-shu-openvpn-web/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/docker-bu-shu-openvpn-web/","excerpt":"","text":"系统环境：ubuntu20.04 一. ###换国内源 1.备份原来的源，将以前的源备份一下，以防以后可以用的。 cp /etc/apt/sources.list /etc/apt/sources.list.bak 2.打开/etc/apt/sources.list文件，在前面添加如下条目，并保存。 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse # deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse# ####阿里源#### deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse3.执行apt-get update 更新源 二.使用 APT 安装docker 1.###添加dcoker源的 GPG 密钥。 curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add - 2.###向 source.list 中添加 Docker 软件源 add-apt-repository “deb [arch=amd64] https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu $(lsb_release -cs) stable”3.###安装 Docker CE apt-get update &amp;&amp; apt-get install docker-ce 4.###安装docker-compose: sudo curl -L ”https://github.com/docker/compose/releases/download/1.28.6/docker-compose-$(uname -s)-$(uname -m)“ -o /usr/local/bin/docker-compose chmod +x /usr/local/bin/docker-compose 5.###编写docker-compoes文件并启动 cd /opt (路径任意本文以/opt举例) vim docker-compose.yml version: &#39;2&#39; services: openvpn: cap_add: - NET_ADMIN image: zhangcun1113/openvpn:latest container_name: openvpn ports: - “1194:1194/udp” restart: always depends_on: - “gui” volumes: - ./openvpn-data/conf:/etc/openvpn - “/etc/localtime:/etc/localtime:ro” - “/etc/timezone:/etc/timezone:ro” gui: image: zhangcun1113/openvpn-web:latest container_name: openvpn-web ports: - “8080:8080/tcp” restart: always volumes: - “/etc/localtime:/etc/localtime:ro” - “/etc/timezone:/etc/timezone:ro” - ./openvpn-data/conf:/etc/openvpn - ./openvpn-data/db:/opt/openvpn-gui/db docker-compose up -d 打开http://ip:8080即可进入后台管理界面 默认用户密码username: adminpassword: b3secure 6.###将ip改为服务器的外网ip 创建用户证书 点击证书下载并conf改为ovpn 去官网下载客户端连接 附加删除用户证书办法 vim del.sh #!/bin/bash read -t 7 -p &quot;请输入你要删除的用户证书......&quot; user docker exec openvpn-web bash -c &quot;cd /usr/share/easy-rsa/ &amp;&amp; source ./vars &amp;&amp; ./revoke-full $user&quot;; addText=&quot;crl-verify /etc/openvpn/keys/crl.pem&quot; if [ `grep -c &quot;$addText&quot; /opt/openvpn-data/conf/server.conf` -eq &#39;0&#39; ]; then echo “input file” echo “$addText”‘’ &gt;&gt; /opt/openvpn-data/conf/server.conf else echo “not input file” fi cd /opt/openvpn/ &amp;&amp; docker-compose down &amp;&amp; docker-compose up -d","categories":[],"tags":[],"author":"张存"},{"title":"docker删除所有容器/镜像","slug":"docker删除所有容器-镜像","date":"2021-09-26T12:32:28.000Z","updated":"2021-11-16T11:43:19.750Z","comments":true,"path":"2021/09/26/docker-shan-chu-suo-you-rong-qi-jing-xiang/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/docker-shan-chu-suo-you-rong-qi-jing-xiang/","excerpt":"","text":"1.想要删除容器，则要先停止所有容器（当然，也可以加-f强制删除，但是不推荐）： docker stop $(docker ps -a -q) 2.删除所有容器 docker rm $(docker ps -a -q)docker rm docker ps -a -q 3.删除所有镜像（慎重） docker rmi $(docker images -q) docker rmi docker images -q 4.删除所有没有tag的镜像docker rmi docker images|grep none|awk &#39;&#123;print $3 &#125;&#39;|xargs 5.删除指定的镜像 docker rmi –force docker images |grep pt-* |awk &#39;/0108/ &#123;print $3&#125;&#39; docker rmi -f docker images | grep pt-*| awk &#39;&#123;print $3&#125;&#39; 6.删除状态为created的容器 docker rm $(docker ps -f status=created|awk ‘{print $1}’) 7.删除状态为exited的容器 docker rm $(docker ps -q -f status=exited)","categories":[],"tags":[],"author":"张存"},{"title":"解决任意域名都能访问nginx443端口的问题","slug":"解决任意域名都能访问nginx443端口的问题","date":"2021-09-26T12:16:01.000Z","updated":"2021-09-26T12:20:19.889Z","comments":true,"path":"2021/09/26/jie-jue-ren-yi-yu-ming-du-neng-fang-wen-nginx443-duan-kou-de-wen-ti/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/jie-jue-ren-yi-yu-ming-du-neng-fang-wen-nginx443-duan-kou-de-wen-ti/","excerpt":"","text":"今天调试时发现，使用b.nbxg.com，c.errb.com等域名也可以访问 a.2kb.com下载目录，这对搜索引擎抓包时应该会产生比较严重的影响，导致搜索引擎误判。 例如 https://www.nbxg.com/index.html 同样也可以访问 https://www.2kb.com/index.html server &#123; listen 443 ssl; server_name a.2kb.com; root html; index index.html index.htm; ssl_certificate cert/a.crt; ssl_certificate_key cert/a.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_dhparam cert/a.pem; location / &#123; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-Proto https; proxy_redirect off; proxy_connect_timeout 240; proxy_send_timeout 240; proxy_read_timeout 240; client_max_body_size 1000m; proxy_pass http://localhost/; &#125; &#125; 经查找，采用以下解决方案 添加一个默认的ssl默置，Nginx找不到ssl server_name时，将转向默认的配置，但必须指定一下证书，随意证书即可 server &#123; listen 443 default_server; server_name _ ; ssl on; ssl_certificate cert/a.crt; ssl_certificate_key cert/a.key; #return 404; location / &#123; root /etc/nginx/error; index index.html; &#125; &#125;","categories":[],"tags":[],"author":"张存"},{"title":"vim 给每行首加入#","slug":"vim-给每行首加入","date":"2021-09-26T12:09:01.000Z","updated":"2021-09-26T12:09:25.815Z","comments":true,"path":"2021/09/26/vim-gei-mei-xing-shou-jia-ru/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/vim-gei-mei-xing-shou-jia-ru/","excerpt":"","text":"每行的行首都添加一个字符串：%s/^/要插入的字符串 每行的行尾都添加一个字符串：%s/$/要插入的字符串 解释： % 代表针对被编辑文件的每一行进行后续操作 $ 代表一行的结尾处 ^ 代表一行的开头处","categories":[],"tags":[],"author":"张存"},{"title":"vim如何删除行首、行位空格、空格行","slug":"vim如何删除行首、行位空格、空格行","date":"2021-09-26T12:01:23.000Z","updated":"2021-09-26T12:01:44.306Z","comments":true,"path":"2021/09/26/vim-ru-he-shan-chu-xing-shou-xing-wei-kong-ge-kong-ge-xing/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/vim-ru-he-shan-chu-xing-shou-xing-wei-kong-ge-kong-ge-xing/","excerpt":"","text":"删除空格行： 非编辑状态下输入:g/^$/d 删除行首空格： 非编辑状态下输入:%s/^\\s*//g 删除行尾空格： 非编辑状态下输入:%s/\\s*$//g","categories":[],"tags":[],"author":"张存"},{"title":"常用地址","slug":"常用地址","date":"2021-09-26T11:52:56.000Z","updated":"2021-10-28T08:45:07.153Z","comments":true,"path":"2021/09/26/chang-yong-di-zhi/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/chang-yong-di-zhi/","excerpt":"","text":"阿里云 1.https://homenew.console.aliyun.com/home/dashboard/Operation#/main油猴脚本 2.https://greasyfork.org/zh-CN/scripts/422814-%E7%99%BE%E5%BA%A6%E4%BA%91%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%80%8D%E9%80%9F-%E5%85%8Dvip%E8%A7%A3%E9%94%81%E5%80%8D%E9%80%9F-%E7%94%BB%E8%B4%A8-%E5%85%A8%E7%BD%91%E7%8B%AC%E5%AE%B6 佛跳墙 3.https://www.qingfengwuhan.com/cn/?a=gi9cp 腾讯企业邮箱 4.https://exmail.qq.com/cgi-bin/frame_html?sid=s9mygrvxv209cl8_,2&amp;sign_type=&amp;r=9a3e649d7110b94b98d7d3f3dc1b091a 阿里企业邮箱 5.https://qiye.aliyun.com/alimail/auth/login?reurl=%2Falimail%2F%23h%3DWyJmbV8yIixbIjIiLCIiLHsiZklkIjoiMSIsInNlbElkIjoiMV8wOkR6enp6eVN4akpKJC0tLS5LdWs0WExuMCIsIm9mZnNldCI6MCwicmciOltbIm1haWxfc2Vzc2lvbl92aWV3Iix7ImlkIjoibSExXzA6RHp6enp5U3hqSkokLS0tLkt1azRYTG4wIiwic2YiOjAsImNvbnRhaW5lcldpZHRoIjozNjB9XV19LHsibGFiZWwiOiLpgq7ku7YifV1d 公积金查询6.https://grwsyw.gjj.beijing.gov.cn/ish/flow/menu/PPLGRZH0102?_r=0.4468948447490928 谷歌翻译7.https://translate.google.com/vmware8.https://customerconnect.vmware.com/en/downloads/details?downloadGroup=ESXI60U3A&amp;productId=491&amp;rPId=74596 Chrome插件扩展下载网9.https://www.extfans.com/search/extensions/%25E8%25BA%25AB%25E4%25BB%25BD/","categories":[],"tags":[],"author":"张存"},{"title":"testimg","slug":"testimg","date":"2021-09-26T10:53:12.000Z","updated":"2021-09-26T11:50:18.789Z","comments":true,"path":"2021/09/26/testimg/","link":"","permalink":"https://blog.zhangcun.store/2021/09/26/testimg/","excerpt":"","text":"ctrl + R 我是黑体字我是微软雅黑我是华文彩云color=#0099ff size=3 face=”黑体”color=#00ffff size=4color=gray size=5 我是高亮 `文本高亮` 这里的内容显示在内容块中 #!/usr/bin/env python3 print(\"Hello, World!\"); 这是红色字体 这是绿色字体 这是黄色字体 这是蓝色字体 &gt; 这里的内容显示在内容块中 asda – haha – 我是一段文字 asa 第一项 第二项 第三项 第一项 第二项 第三项 第一项 第二项 第三项 第一项： 第一项嵌套的第一个元素 第一项嵌套的第二个元素 第二项： 第二项嵌套的第一个元素 第二项嵌套的第二个元素 第一项 第二项 第三项 一级标题二级标题一级标题二级标题三级标题四级标题五级标题六级标题这是加粗的文字 这是倾斜的文字` 这是斜体加粗的文字 这是加删除线的文字 这是引用的内容 这是引用的内容 这是引用的内容 1.![Image text](/images/pasted-1.jpg)","categories":[],"tags":[]},{"title":"中秋快乐","slug":"zhongqiu","date":"2021-09-20T13:46:48.000Z","updated":"2021-09-20T14:35:51.593Z","comments":true,"path":"2021/09/20/zhongqiu/","link":"","permalink":"https://blog.zhangcun.store/2021/09/20/zhongqiu/","excerpt":"","text":"中秋将至，提前祝您：身体“月”来“月”棒，笑容“月”来“月”甜，钞票“月”来“月”多，生活“月”来“月”顺！ 提前祝大家中秋快乐，祝愿你们幸福安康，万事如意！ Your browser does not support the video tag.","categories":[],"tags":[],"author":"张存"},{"title":"这是我的不归路，因为我要胜天半子","slug":"这是我的不归路，因为我要胜天半子","date":"2021-09-16T11:17:00.000Z","updated":"2021-09-18T17:11:43.483Z","comments":true,"path":"2021/09/16/zhe-shi-wo-de-bu-gui-lu-yin-wei-wo-yao-sheng-tian-ban-zi/","link":"","permalink":"https://blog.zhangcun.store/2021/09/16/zhe-shi-wo-de-bu-gui-lu-yin-wei-wo-yao-sheng-tian-ban-zi/","excerpt":"","text":"我是祁同伟，人生如戏，今天我写下这篇文章，我的人生即将谢幕在孤鹰岭——那片我曾经的福地。我如果十多年前死在这片土地上，我就是一个英雄，一个为了人民的利益不惧流血牺牲的英雄。 而现在，我死以后会遭到唾弃，起码是以人民名义的唾弃。 我是一个不被上天眷顾的人 所以我只能选择人定胜天。记得在那次饭桌上想杀侯亮平，虽未能如愿，但如果时光倒流，我依旧会坚持选择，这是我的不归路，因为我要胜天半子。 十年寒窗卧薪尝胆，为的是事业；以身试险血战孤鹰岭，为的是爱情。 我有我爱的人，我爱的人是陈阳，是这个女孩让我一度觉得老天爷也曾关注过我。 我是一个农民的儿子 一路走来贫困潦倒但我渴望功成名就，渴望出人头地，用自己十二万分的努力学习奋斗去报答我的父母，报答曾经有恩于我的故人。 有人说我与高小琴之间不是爱情是赵瑞龙设计的套，其实我更愿意将我和小琴的相遇描述成邂逅。至于赵瑞龙，在他的棋局上我是他的棋子，但在我下的棋局中他何尝不是。 初识高小琴，我们相见恨晚。哪怕之前我们有再多的差异，但有一处相同就够了——那就是我们都是穷人的孩子。我和小琴就有了我们的孩子，在梁璐那里失去的和得不到的，小琴全部给予我了。 我只是一只蝼蚁 我第一次去到那个司法所见到那位司法所所长的时候，他满脸沟壑纵横，神情呆滞。他是三十年前政法大学的毕业生，在这个岗位一干就是30年。 我终于明白了，在赵立春、梁璐父亲面前，我只是一只蝼蚁。后来我常和别人说，当年在汉东大学操场下向梁璐下跪的那一刻我的心伴随着我的尊严一起死了。 其实，那天在司法所见到老所长的那个瞬间，我的心就已经死了。 我不是心性不坚定 陈海坚持原则，他也为自己的坚持付出了惨痛的代价，即使我不杀他，汉东官场中巴不得他死的人比比皆是。李达康坚持所谓的原则， 深受沙瑞金赏识结果怎么样呢，还不是妻离子散；易学习坚持原则，可差一点不就像当年茅台山区那个终年不见天日的老所长。我可以去哭坟，我可以去刨地，这不是我的创举。 我知道侯亮平一定会把所有的原因归结于我心性不坚定。但当初，如果他是我，他也一样。如果我是他，也不会有后来的祁同伟。 我希望我可以是侯亮平 思绪千回百转间，我也心甘情愿，其实我知道这盘棋我的对手根本就不是神仙。作为一个男人，我追求事业成功、爱情美满，何错之有？ 为人进出的门紧锁着。人生至此，我不遗憾。我会被世人以人民的名义唾弃，但过不了多久这片土地就会抹去我所有的痕迹。 所以我不担心遗臭万年，他们也不可能流芳百世，他只不过会比我多活几十年。如果来生我还是祁同伟，还在当年模样的汉东，我依旧坚持这样选择。 只是如果有来生，我希望我可以是侯亮平…","categories":[{"name":"文章","slug":"文章","permalink":"https://blog.zhangcun.store/categories/%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"博客  ","slug":"博客","permalink":"https://blog.zhangcun.store/tags/%E5%8D%9A%E5%AE%A2/"}],"author":"张存"}],"categories":[{"name":"文章","slug":"文章","permalink":"https://blog.zhangcun.store/categories/%E6%96%87%E7%AB%A0/"}],"tags":[{"name":"博客  ","slug":"博客","permalink":"https://blog.zhangcun.store/tags/%E5%8D%9A%E5%AE%A2/"}]}